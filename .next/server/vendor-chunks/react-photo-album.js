"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-photo-album";
exports.ids = ["vendor-chunks/react-photo-album"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-photo-album/dist/index.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/react-photo-album/dist/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PhotoAlbum: () => (/* binding */ PhotoAlbum),\n/* harmony export */   \"default\": () => (/* binding */ PhotoAlbum),\n/* harmony export */   unstable_computeColumnsLayout: () => (/* binding */ computeColumnsLayout),\n/* harmony export */   unstable_computeMasonryLayout: () => (/* binding */ computeMasonryLayout),\n/* harmony export */   unstable_computeRowsLayout: () => (/* binding */ computeRowsLayout)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* __next_internal_client_entry_do_not_use__ PhotoAlbum,default,unstable_computeColumnsLayout,unstable_computeMasonryLayout,unstable_computeRowsLayout auto */ \nfunction ratio({ width, height }) {\n    return width / height;\n}\nfunction round(value, decimals = 0) {\n    const factor = 10 ** decimals;\n    return Math.round((value + Number.EPSILON) * factor) / factor;\n}\nfunction rankingFunctionComparator(rank) {\n    return (a, b)=>rank(b) - rank(a);\n}\nclass MinHeap {\n    constructor(comparator){\n        this.comparator = comparator;\n        this.heap = [];\n        this.n = 0;\n    }\n    greater(i, j) {\n        return this.comparator(this.heap[i], this.heap[j]) < 0;\n    }\n    swap(i, j) {\n        const temp = this.heap[i];\n        this.heap[i] = this.heap[j];\n        this.heap[j] = temp;\n    }\n    swim(i) {\n        let k = i;\n        let k2 = Math.floor(k / 2);\n        while(k > 1 && this.greater(k2, k)){\n            this.swap(k2, k);\n            k = k2;\n            k2 = Math.floor(k / 2);\n        }\n    }\n    sink(i) {\n        let k = i;\n        let k2 = k * 2;\n        while(k2 <= this.n){\n            if (k2 < this.n && this.greater(k2, k2 + 1)) k2 += 1;\n            if (!this.greater(k, k2)) break;\n            this.swap(k, k2);\n            k = k2;\n            k2 = k * 2;\n        }\n    }\n    push(element) {\n        this.n += 1;\n        this.heap[this.n] = element;\n        this.swim(this.n);\n    }\n    pop() {\n        if (this.n === 0) return void 0;\n        this.swap(1, this.n);\n        this.n -= 1;\n        const max = this.heap.pop();\n        this.sink(1);\n        return max;\n    }\n    size() {\n        return this.n;\n    }\n}\nfunction buildPrecedentsMap(graph, startNode, endNode) {\n    const precedentsMap = /* @__PURE__ */ new Map();\n    const visited = /* @__PURE__ */ new Set();\n    const storedShortestPaths = /* @__PURE__ */ new Map();\n    storedShortestPaths.set(startNode, 0);\n    const queue = new MinHeap(rankingFunctionComparator((el)=>el.weight));\n    queue.push({\n        id: startNode,\n        weight: 0\n    });\n    while(queue.size() > 0){\n        const { id, weight } = queue.pop();\n        if (!visited.has(id)) {\n            const neighboringNodes = graph(id);\n            visited.add(id);\n            neighboringNodes.forEach((neighborWeight, neighbor)=>{\n                const newWeight = weight + neighborWeight;\n                const currentId = precedentsMap.get(neighbor);\n                const currentWeight = storedShortestPaths.get(neighbor);\n                if (currentWeight === void 0 || currentWeight > newWeight && (currentWeight / newWeight > 1.005 || currentId !== void 0 && currentId < id)) {\n                    storedShortestPaths.set(neighbor, newWeight);\n                    queue.push({\n                        id: neighbor,\n                        weight: newWeight\n                    });\n                    precedentsMap.set(neighbor, id);\n                }\n            });\n        }\n    }\n    return storedShortestPaths.has(endNode) ? precedentsMap : void 0;\n}\nfunction getPathFromPrecedentsMap(precedentsMap, endNode) {\n    const nodes = [];\n    for(let node = endNode; node !== void 0; node = precedentsMap.get(node)){\n        nodes.push(node);\n    }\n    return nodes.reverse();\n}\nfunction findShortestPath(graph, startNode, endNode) {\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n    return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : void 0;\n}\nfunction findIdealNodeSearch({ photos, targetRowHeight, containerWidth }) {\n    const minRatio = photos.reduce((acc, photo)=>Math.min(ratio(photo), acc), Number.MAX_VALUE);\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\n}\nfunction getCommonHeight(row, containerWidth, spacing, padding) {\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n    const totalAspectRatio = row.reduce((acc, photo)=>acc + ratio(photo), 0);\n    return rowWidth / totalAspectRatio;\n}\nfunction cost(photos, i, j, width, targetRowHeight, spacing, padding) {\n    const row = photos.slice(i, j);\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : void 0;\n}\nfunction makeGetRowNeighbors({ photos, layoutOptions, targetRowHeight, limitNodeSearch, rowConstraints }) {\n    return (node)=>{\n        var _a, _b;\n        const { containerWidth, spacing, padding } = layoutOptions;\n        const results = /* @__PURE__ */ new Map();\n        results.set(node, 0);\n        const startOffset = (_a = rowConstraints == null ? void 0 : rowConstraints.minPhotos) != null ? _a : 1;\n        const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints == null ? void 0 : rowConstraints.maxPhotos) != null ? _b : Infinity);\n        for(let i = node + startOffset; i < photos.length + 1; i += 1){\n            if (i - node > endOffset) break;\n            const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n            if (currentCost === void 0) break;\n            results.set(i, currentCost);\n        }\n        return results;\n    };\n}\nfunction computeRowsLayout({ photos, layoutOptions }) {\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n    const limitNodeSearch = findIdealNodeSearch({\n        photos,\n        containerWidth,\n        targetRowHeight\n    });\n    const getNeighbors = makeGetRowNeighbors({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints\n    });\n    const path = findShortestPath(getNeighbors, 0, photos.length);\n    if (path === void 0) return void 0;\n    const layout = [];\n    for(let i = 1; i < path.length; i += 1){\n        const row = photos.map((photo, index)=>({\n                photo,\n                index\n            })).slice(path[i - 1], path[i]);\n        const height = getCommonHeight(row.map(({ photo })=>photo), containerWidth, spacing, padding);\n        layout.push(row.map(({ photo, index }, photoIndex)=>({\n                photo,\n                layout: {\n                    height,\n                    width: height * ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: row.length\n                }\n            })));\n    }\n    return layout;\n}\nfunction clsx(...classes) {\n    return [\n        ...classes\n    ].filter((cls)=>Boolean(cls)).join(\" \");\n}\nfunction calcWidth(base, photoLayout, layoutOptions) {\n    const { width, photosCount } = photoLayout;\n    const { layout, spacing, padding, containerWidth } = layoutOptions;\n    const count = layout === \"rows\" ? photosCount : layoutOptions.columns;\n    const gaps = spacing * (count - 1) + 2 * padding * count;\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n}\nfunction cssPhotoWidth(layout, layoutOptions) {\n    return layoutOptions.layout !== \"rows\" ? `calc(100% - ${2 * layoutOptions.padding}px)` : calcWidth(\"100%\", layout, layoutOptions);\n}\nfunction calculateSizesValue(size, layout, layoutOptions) {\n    var _a, _b;\n    return calcWidth((_b = (_a = size.match(/^\\s*calc\\((.*)\\)\\s*$/)) == null ? void 0 : _a[1]) != null ? _b : size, layout, layoutOptions);\n}\nfunction srcSetAndSizes(photo, layout, layoutOptions) {\n    var _a;\n    let srcSet;\n    let sizes;\n    const images = photo.srcSet || photo.images;\n    if (images && images.length > 0) {\n        srcSet = images.concat(!images.find(({ width })=>width === photo.width) ? [\n            {\n                src: photo.src,\n                width: photo.width,\n                height: photo.height\n            }\n        ] : []).sort((first, second)=>first.width - second.width).map((image)=>`${image.src} ${image.width}w`).join(\", \");\n    }\n    if ((_a = layoutOptions.sizes) == null ? void 0 : _a.size) {\n        sizes = (layoutOptions.sizes.sizes || []).map(({ viewport, size })=>`${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`).concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions)).join(\", \");\n    } else {\n        sizes = `${Math.ceil(layout.width / layoutOptions.containerWidth * 100)}vw`;\n    }\n    return {\n        srcSet,\n        sizes\n    };\n}\nfunction PhotoRenderer(props) {\n    var _a, _b;\n    const { photo, layout, layoutOptions, imageProps: { style, className, ...restImageProps } = {}, renderPhoto } = props;\n    const { onClick } = layoutOptions;\n    const imageStyle = {\n        display: \"block\",\n        boxSizing: \"content-box\",\n        width: cssPhotoWidth(layout, layoutOptions),\n        height: \"auto\",\n        aspectRatio: `${photo.width} / ${photo.height}`,\n        ...layoutOptions.padding ? {\n            padding: `${layoutOptions.padding}px`\n        } : null,\n        ...(layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") && layout.photoIndex < layout.photosCount - 1 ? {\n            marginBottom: `${layoutOptions.spacing}px`\n        } : null,\n        ...onClick ? {\n            cursor: \"pointer\"\n        } : null,\n        ...style\n    };\n    const handleClick = onClick ? (event)=>{\n        onClick({\n            event,\n            photo,\n            index: layout.index\n        });\n    } : void 0;\n    const imageProps = {\n        src: photo.src,\n        alt: (_a = photo.alt) != null ? _a : \"\",\n        title: photo.title,\n        onClick: handleClick,\n        style: imageStyle,\n        className: clsx(\"react-photo-album--photo\", className),\n        loading: \"lazy\",\n        decoding: \"async\",\n        ...srcSetAndSizes(photo, layout, layoutOptions),\n        ...restImageProps\n    };\n    const renderDefaultPhoto = (options)=>{\n        const { src, alt, srcSet, sizes, style: unwrappedStyle, ...rest } = imageProps;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", {\n            alt,\n            ...srcSet ? {\n                srcSet,\n                sizes\n            } : null,\n            src,\n            style: (options == null ? void 0 : options.wrapped) ? {\n                display: \"block\",\n                width: \"100%\",\n                height: \"100%\"\n            } : unwrappedStyle,\n            ...rest\n        });\n    };\n    const wrapperStyle = (({ display, boxSizing, width, aspectRatio, padding, marginBottom, cursor })=>({\n            display,\n            boxSizing,\n            width,\n            aspectRatio,\n            padding,\n            marginBottom,\n            cursor\n        }))(imageStyle);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (_b = renderPhoto == null ? void 0 : renderPhoto({\n        photo,\n        layout,\n        layoutOptions,\n        imageProps,\n        renderDefaultPhoto,\n        wrapperStyle\n    })) != null ? _b : renderDefaultPhoto());\n}\nfunction defaultRenderRowContainer({ rowContainerProps, children }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...rowContainerProps\n    }, children);\n}\nfunction RowContainerRenderer(props) {\n    const { layoutOptions, rowIndex, rowsCount, renderRowContainer, rowContainerProps: { style, className, ...restRowContainerProps } = {}, children } = props;\n    const rowContainerProps = {\n        className: clsx(\"react-photo-album--row\", className),\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            ...rowIndex < rowsCount - 1 ? {\n                marginBottom: `${layoutOptions.spacing}px`\n            } : null,\n            ...style\n        },\n        ...restRowContainerProps\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (renderRowContainer != null ? renderRowContainer : defaultRenderRowContainer)({\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        rowContainerProps,\n        children\n    }));\n}\nfunction RowsLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps: { imageProps, rowContainerProps } } = props;\n    const rowsLayout = computeRowsLayout({\n        photos,\n        layoutOptions\n    });\n    if (!rowsLayout) return null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, rowsLayout.map((row, rowIndex)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RowContainerRenderer, {\n            key: `row-${rowIndex}`,\n            layoutOptions,\n            rowIndex,\n            rowsCount: rowsLayout.length,\n            renderRowContainer,\n            rowContainerProps\n        }, row.map(({ photo, layout })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PhotoRenderer, {\n                key: photo.key || photo.src,\n                photo,\n                layout,\n                layoutOptions,\n                renderPhoto,\n                imageProps\n            })))));\n}\nfunction computeShortestPath(graph, pathLength, startNode, endNode) {\n    const matrix = /* @__PURE__ */ new Map();\n    const queue = /* @__PURE__ */ new Set();\n    queue.add(startNode);\n    for(let length = 0; length < pathLength; length += 1){\n        const currentQueue = [\n            ...queue.keys()\n        ];\n        queue.clear();\n        currentQueue.forEach((node)=>{\n            const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n            graph(node).forEach(({ neighbor, weight })=>{\n                let paths = matrix.get(neighbor);\n                if (!paths) {\n                    paths = [];\n                    matrix.set(neighbor, paths);\n                }\n                const newWeight = accumulatedWeight + weight;\n                const nextPath = paths[length + 1];\n                if (!nextPath || nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node)) {\n                    paths[length + 1] = {\n                        node,\n                        weight: newWeight\n                    };\n                }\n                if (length < pathLength - 1 && neighbor !== endNode) {\n                    queue.add(neighbor);\n                }\n            });\n        });\n    }\n    return matrix;\n}\nfunction reconstructShortestPath(matrix, pathLength, endNode) {\n    const path = [\n        endNode\n    ];\n    for(let node = endNode, length = pathLength; length > 0; length -= 1){\n        node = matrix.get(node)[length].node;\n        path.push(node);\n    }\n    return path.reverse();\n}\nfunction findShortestPathLengthN(graph, pathLength, startNode, endNode) {\n    return reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n}\nfunction makeGetColumnNeighbors({ photos, spacing, padding, targetColumnWidth, targetColumnHeight }) {\n    return (node)=>{\n        const results = [];\n        const cutOffHeight = targetColumnHeight * 1.5;\n        let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n        for(let i = node + 1; i < photos.length + 1; i += 1){\n            results.push({\n                neighbor: i,\n                weight: (targetColumnHeight - height) ** 2\n            });\n            if (height > cutOffHeight || i === photos.length) {\n                break;\n            }\n            height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n        }\n        return results;\n    };\n}\nfunction buildColumnsModel({ path, photos, containerWidth, columnsGaps, columnsRatios, spacing, padding }) {\n    const columnsModel = [];\n    const totalRatio = columnsRatios.reduce((total, columnRatio)=>total + columnRatio, 0);\n    for(let i = 0; i < path.length - 1; i += 1){\n        const column = photos.map((photo, index)=>({\n                photo,\n                index\n            })).slice(path[i], path[i + 1]);\n        const totalAdjustedGaps = columnsRatios.reduce((total, columnRatio, index)=>total + (columnsGaps[i] - columnsGaps[index]) * columnRatio, 0);\n        const columnWidth = (containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) * columnsRatios[i] / totalRatio;\n        columnsModel.push(column.map(({ photo, index }, photoIndex)=>({\n                photo,\n                layout: {\n                    width: columnWidth,\n                    height: columnWidth / ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: column.length\n                }\n            })));\n    }\n    return columnsModel;\n}\nfunction computeColumnsModel({ photos, layoutOptions, targetColumnWidth }) {\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnsGaps = [];\n    const columnsRatios = [];\n    if (photos.length <= columns) {\n        const averageRatio = photos.length > 0 ? photos.reduce((acc, photo)=>acc + ratio(photo), 0) / photos.length : 1;\n        for(let i = 0; i < columns; i += 1){\n            columnsGaps[i] = 2 * padding;\n            columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n        }\n        const columnsModel2 = buildColumnsModel({\n            path: Array.from({\n                length: columns + 1\n            }).map((_, index)=>Math.min(index, photos.length)),\n            photos,\n            columnsRatios,\n            columnsGaps,\n            containerWidth,\n            spacing,\n            padding\n        });\n        return {\n            columnsGaps,\n            columnsRatios,\n            columnsModel: columnsModel2\n        };\n    }\n    const targetColumnHeight = (photos.reduce((acc, photo)=>acc + targetColumnWidth / ratio(photo), 0) + spacing * (photos.length - columns) + 2 * padding * photos.length) / columns;\n    const getNeighbors = makeGetColumnNeighbors({\n        photos,\n        targetColumnWidth,\n        targetColumnHeight,\n        spacing,\n        padding\n    });\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n    for(let i = 0; i < path.length - 1; i += 1){\n        const column = photos.slice(path[i], path[i + 1]);\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n        columnsRatios[i] = 1 / column.reduce((acc, photo)=>acc + 1 / ratio(photo), 0);\n    }\n    const columnsModel = buildColumnsModel({\n        path,\n        photos,\n        columnsRatios,\n        columnsGaps,\n        containerWidth,\n        spacing,\n        padding\n    });\n    return {\n        columnsGaps,\n        columnsRatios,\n        columnsModel\n    };\n}\nfunction computeLayout(props) {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n        photos,\n        layoutOptions,\n        targetColumnWidth\n    });\n    if (columnsModel.findIndex((columnModel)=>columnModel.findIndex(({ layout: { width, height } })=>width < 0 || height < 0) >= 0) >= 0) {\n        if (columns > 1) {\n            return computeLayout({\n                photos,\n                layoutOptions: {\n                    ...layoutOptions,\n                    columns: columns - 1\n                }\n            });\n        }\n        return void 0;\n    }\n    return {\n        columnsModel,\n        columnsGaps,\n        columnsRatios\n    };\n}\nfunction computeColumnsLayout({ photos, layoutOptions }) {\n    return computeLayout({\n        photos,\n        layoutOptions\n    });\n}\nfunction defaultRenderColumnContainer({ columnContainerProps, children }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ...columnContainerProps\n    }, children);\n}\nfunction cssColumnWidth(props) {\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n    const { layout, spacing, padding } = layoutOptions;\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n    }\n    const totalRatio = columnsRatios.reduce((acc, ratio2)=>acc + ratio2, 0);\n    const totalAdjustedGaps = columnsRatios.reduce((acc, ratio2, index)=>acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio2, 0);\n    return `calc((100% - ${round((columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps, 3)}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n}\nfunction ColumnContainerRenderer(props) {\n    const { layoutOptions, renderColumnContainer, children, columnContainerProps: { style, className, ...restColumnContainerProps } = {}, ...rest } = props;\n    const columnContainerProps = {\n        className: clsx(\"react-photo-album--column\", className),\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            width: cssColumnWidth(props),\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n            ...style\n        },\n        ...restColumnContainerProps\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (renderColumnContainer != null ? renderColumnContainer : defaultRenderColumnContainer)({\n        layoutOptions,\n        columnContainerProps,\n        children,\n        ...rest\n    }));\n}\nfunction ColumnsLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps: { imageProps, columnContainerProps } } = props;\n    const columnsLayout = computeColumnsLayout({\n        photos,\n        layoutOptions\n    });\n    if (!columnsLayout) return null;\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, columnsModel.map((column, columnIndex)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ColumnContainerRenderer, {\n            key: `column-${columnIndex}`,\n            layoutOptions,\n            columnIndex,\n            columnsCount: columnsModel.length,\n            columnsGaps,\n            columnsRatios,\n            renderColumnContainer,\n            columnContainerProps\n        }, column.map(({ photo, layout })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PhotoRenderer, {\n                key: photo.key || photo.src,\n                photo,\n                layout,\n                layoutOptions,\n                renderPhoto,\n                imageProps\n            })))));\n}\nfunction computeMasonryLayout(props) {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    if (columnWidth <= 0) {\n        return columns > 1 ? computeMasonryLayout({\n            ...props,\n            layoutOptions: {\n                ...layoutOptions,\n                columns: columns - 1\n            }\n        }) : void 0;\n    }\n    const columnsCurrentTopPositions = [];\n    for(let i = 0; i < columns; i += 1){\n        columnsCurrentTopPositions[i] = 0;\n    }\n    const columnsModel = photos.reduce((model, photo, index)=>{\n        const shortestColumn = columnsCurrentTopPositions.reduce((currentShortestColumn, item, i)=>item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn, 0);\n        columnsCurrentTopPositions[shortestColumn] = columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n        model[shortestColumn].push({\n            photo,\n            index\n        });\n        return model;\n    }, Array.from({\n        length: columns\n    }).map(()=>[]));\n    return columnsModel.map((column)=>column.map(({ photo, index }, photoIndex)=>({\n                photo,\n                layout: {\n                    width: columnWidth,\n                    height: columnWidth / ratio(photo),\n                    index,\n                    photoIndex,\n                    photosCount: column.length\n                }\n            })));\n}\nfunction MasonryLayout(props) {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps: { imageProps, columnContainerProps } } = props;\n    const masonryLayout = computeMasonryLayout({\n        photos,\n        layoutOptions\n    });\n    if (!masonryLayout) return null;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, masonryLayout.map((column, columnIndex)=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ColumnContainerRenderer, {\n            key: `masonry-column-${columnIndex}`,\n            layoutOptions,\n            columnsCount: masonryLayout.length,\n            columnIndex,\n            renderColumnContainer,\n            columnContainerProps\n        }, column.map(({ photo, layout })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PhotoRenderer, {\n                key: photo.key || photo.src,\n                photo,\n                layout,\n                layoutOptions,\n                renderPhoto,\n                imageProps\n            })))));\n}\nfunction defaultRenderContainer({ containerProps, children, containerRef }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: containerRef,\n        ...containerProps\n    }, children);\n}\nfunction ContainerRenderer(props) {\n    const { layout, renderContainer, children, containerRef, containerProps: { style, className, ...restContainerProps } = {} } = props;\n    const containerProps = {\n        className: clsx(\"react-photo-album\", `react-photo-album--${layout}`, className),\n        style: {\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-between\",\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n            ...style\n        },\n        ...restContainerProps\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (renderContainer != null ? renderContainer : defaultRenderContainer)({\n        containerProps,\n        containerRef,\n        layout,\n        children\n    }));\n}\nfunction useArray(array) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(array);\n    if (!array || !ref.current || array.join() !== ref.current.join()) {\n        ref.current = array;\n    }\n    return ref.current;\n}\nfunction containerWidthReducer(state, { newContainerWidth, newScrollbarWidth }) {\n    const { containerWidth, scrollbarWidth } = state;\n    if (containerWidth !== void 0 && scrollbarWidth !== void 0 && newContainerWidth !== void 0 && newScrollbarWidth !== void 0 && newContainerWidth > containerWidth && newContainerWidth - containerWidth <= 20 && newScrollbarWidth < scrollbarWidth) {\n        return {\n            containerWidth,\n            scrollbarWidth: newScrollbarWidth\n        };\n    }\n    return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth ? {\n        containerWidth: newContainerWidth,\n        scrollbarWidth: newScrollbarWidth\n    } : state;\n}\nfunction resolveContainerWidth(el, breakpoints2) {\n    let width = el == null ? void 0 : el.clientWidth;\n    if (width !== void 0 && breakpoints2 && breakpoints2.length > 0) {\n        const sorted = [\n            ...breakpoints2.filter((x)=>x > 0)\n        ].sort((a, b)=>b - a);\n        sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n        const threshold = width;\n        width = sorted.find((breakpoint, index)=>breakpoint <= threshold || index === sorted.length - 1);\n    }\n    return width;\n}\nfunction useContainerWidth(breakpoints2, defaultContainerWidth) {\n    const [{ containerWidth }, dispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(containerWidthReducer, {\n        containerWidth: defaultContainerWidth\n    });\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const observerRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const containerRef = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((node)=>{\n        var _a;\n        (_a = observerRef.current) == null ? void 0 : _a.disconnect();\n        observerRef.current = void 0;\n        ref.current = node;\n        const updateWidth = ()=>dispatch({\n                newContainerWidth: resolveContainerWidth(ref.current, breakpoints2),\n                newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth\n            });\n        updateWidth();\n        if (node && typeof ResizeObserver !== \"undefined\") {\n            observerRef.current = new ResizeObserver(updateWidth);\n            observerRef.current.observe(node);\n        }\n    }, [\n        breakpoints2\n    ]);\n    return {\n        containerRef,\n        containerWidth\n    };\n}\nconst breakpoints = Object.freeze([\n    1200,\n    600,\n    300,\n    0\n]);\nfunction unwrap(value, arg) {\n    return typeof value === \"function\" ? value(arg) : value;\n}\nfunction unwrapParameter(value, containerWidth) {\n    return typeof value !== \"undefined\" ? unwrap(value, containerWidth) : void 0;\n}\nfunction selectResponsiveValue(values, containerWidth) {\n    const index = breakpoints.findIndex((breakpoint)=>breakpoint <= containerWidth);\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\n}\nfunction resolveResponsiveParameter(parameter, containerWidth, values, minValue = 0) {\n    const value = unwrapParameter(parameter, containerWidth);\n    return Math.round(Math.max(value === void 0 ? selectResponsiveValue(values, containerWidth) : value, minValue));\n}\nfunction resolveLayoutOptions({ layout, onClick, containerWidth, targetRowHeight, rowConstraints, columns, spacing, padding, sizes }) {\n    return {\n        layout,\n        onClick,\n        containerWidth,\n        columns: resolveResponsiveParameter(columns, containerWidth, [\n            5,\n            4,\n            3,\n            2\n        ], 1),\n        spacing: resolveResponsiveParameter(spacing, containerWidth, [\n            20,\n            15,\n            10,\n            5\n        ]),\n        padding: resolveResponsiveParameter(padding, containerWidth, [\n            0,\n            0,\n            0,\n            0,\n            0\n        ]),\n        targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n            (w)=>w / 5,\n            (w)=>w / 4,\n            (w)=>w / 3,\n            (w)=>w / 2\n        ]),\n        rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n        sizes\n    };\n}\nfunction resolveComponentsProps(props, containerWidth, layoutOptions) {\n    const { photos, componentsProps: componentsPropsProp } = props;\n    const componentsProps = unwrap(componentsPropsProp, containerWidth) || {};\n    if (layoutOptions) {\n        const { layout, spacing, padding, rowConstraints } = layoutOptions;\n        if (layout === \"rows\") {\n            const { singleRowMaxHeight } = rowConstraints || {};\n            if (singleRowMaxHeight) {\n                const maxWidth = Math.floor(photos.reduce((acc, { width, height })=>acc + width / height * singleRowMaxHeight - 2 * padding, padding * photos.length * 2 + spacing * (photos.length - 1)));\n                if (maxWidth > 0) {\n                    componentsProps.containerProps = componentsProps.containerProps || {};\n                    componentsProps.containerProps.style = {\n                        maxWidth,\n                        ...componentsProps.containerProps.style\n                    };\n                }\n            }\n        }\n    }\n    return componentsProps;\n}\nfunction renderLayout(props, componentsProps, layoutOptions) {\n    const { photos, layout, renderPhoto, renderRowContainer, renderColumnContainer } = props;\n    const commonLayoutProps = {\n        photos,\n        renderPhoto,\n        componentsProps\n    };\n    if (layout === \"rows\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RowsLayout, {\n            layoutOptions,\n            renderRowContainer,\n            ...commonLayoutProps\n        });\n    }\n    if (layout === \"columns\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ColumnsLayout, {\n            layoutOptions,\n            renderColumnContainer,\n            ...commonLayoutProps\n        });\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MasonryLayout, {\n        layoutOptions,\n        renderColumnContainer,\n        ...commonLayoutProps\n    });\n}\nfunction PhotoAlbum(props) {\n    const { photos, layout, renderContainer, defaultContainerWidth, breakpoints: breakpoints2 } = props;\n    const { containerRef, containerWidth } = useContainerWidth(useArray(breakpoints2), defaultContainerWidth);\n    if (!layout || ![\n        \"rows\",\n        \"columns\",\n        \"masonry\"\n    ].includes(layout) || !Array.isArray(photos)) return null;\n    const layoutOptions = containerWidth ? resolveLayoutOptions({\n        containerWidth,\n        ...props\n    }) : void 0;\n    const componentsProps = resolveComponentsProps(props, containerWidth, layoutOptions);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContainerRenderer, {\n        layout,\n        containerRef,\n        renderContainer,\n        containerProps: componentsProps.containerProps\n    }, layoutOptions && renderLayout(props, componentsProps, layoutOptions));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-photo-album/dist/index.mjs\n");

/***/ })

};
;