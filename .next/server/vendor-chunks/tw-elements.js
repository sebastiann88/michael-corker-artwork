"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tw-elements";
exports.ids = ["vendor-chunks/tw-elements"];
exports.modules = {

/***/ "(ssr)/./node_modules/tw-elements/js/tw-elements.es.min.js":
/*!***********************************************************!*\
  !*** ./node_modules/tw-elements/js/tw-elements.es.min.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Button: () => (/* binding */ qs),\n/* harmony export */   Carousel: () => (/* binding */ Z),\n/* harmony export */   Collapse: () => (/* binding */ pe),\n/* harmony export */   Dropdown: () => (/* binding */ X),\n/* harmony export */   Input: () => (/* binding */ $),\n/* harmony export */   Modal: () => (/* binding */ ai),\n/* harmony export */   Offcanvas: () => (/* binding */ _e),\n/* harmony export */   Popover: () => (/* binding */ Nn),\n/* harmony export */   Ripple: () => (/* binding */ Hn),\n/* harmony export */   ScrollSpy: () => (/* binding */ In),\n/* harmony export */   Tab: () => (/* binding */ Rn),\n/* harmony export */   Tooltip: () => (/* binding */ Qt),\n/* harmony export */   initTWE: () => (/* binding */ lc)\n/* harmony export */ });\nvar Yn = Object.defineProperty;\nvar Kn = (i, t, e)=>t in i ? Yn(i, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : i[t] = e;\nvar Ne = (i, t, e)=>(Kn(i, typeof t != \"symbol\" ? t + \"\" : t, e), e);\n/*!\n* TW Elements\n* Version: FREE 2.0.0\n* \n* Copyright: Material Design for Bootstrap\n* https://mdbootstrap.com/\n* \n* Read the license: https://tw-elements.com/license/\n*\n*\n* Documentation: https://tw-elements.com/\n*\n* Support: https://mdbootstrap.com/support/cat/twe\n*\n* Contact: tailwind@mdbootstrap.com\n* \n*/ const Se = (()=>{\n    const i = {};\n    let t = 1;\n    return {\n        set (e, s, n) {\n            typeof e[s] > \"u\" && (e[s] = {\n                key: s,\n                id: t\n            }, t++), i[e[s].id] = n;\n        },\n        get (e, s) {\n            if (!e || typeof e[s] > \"u\") return null;\n            const n = e[s];\n            return n.key === s ? i[n.id] : null;\n        },\n        delete (e, s) {\n            if (typeof e[s] > \"u\") return;\n            const n = e[s];\n            n.key === s && (delete i[n.id], delete e[s]);\n        }\n    };\n})(), V = {\n    setData (i, t, e) {\n        Se.set(i, t, e);\n    },\n    getData (i, t) {\n        return Se.get(i, t);\n    },\n    removeData (i, t) {\n        Se.delete(i, t);\n    }\n}, zn = 1e6, qn = 1e3, Ze = \"transitionend\", Xn = (i)=>i == null ? `${i}` : ({}).toString.call(i).match(/\\s([a-z]+)/i)[1].toLowerCase(), Gn = (i)=>{\n    do i += Math.floor(Math.random() * zn);\n    while (document.getElementById(i));\n    return i;\n}, ks = (i)=>{\n    let t = i.getAttribute(\"data-twe-target\");\n    if (!t || t === \"#\") {\n        let e = i.getAttribute(\"href\");\n        if (!e || !e.includes(\"#\") && !e.startsWith(\".\")) return null;\n        e.includes(\"#\") && !e.startsWith(\"#\") && (e = `#${e.split(\"#\")[1]}`), t = e && e !== \"#\" ? e.trim() : null;\n    }\n    return t;\n}, ci = (i)=>{\n    const t = ks(i);\n    return t && document.querySelector(t) ? t : null;\n}, nt = (i)=>{\n    const t = ks(i);\n    return t ? document.querySelector(t) : null;\n}, Je = (i)=>{\n    if (!i) return 0;\n    let { transitionDuration: t, transitionDelay: e } = window.getComputedStyle(i);\n    const s = Number.parseFloat(t), n = Number.parseFloat(e);\n    return !s && !n ? 0 : (t = t.split(\",\")[0], e = e.split(\",\")[0], (Number.parseFloat(t) + Number.parseFloat(e)) * qn);\n}, Ps = (i)=>{\n    i.dispatchEvent(new Event(Ze));\n}, St = (i)=>!i || typeof i != \"object\" ? !1 : (typeof i.jquery < \"u\" && (i = i[0]), typeof i.nodeType < \"u\"), rt = (i)=>St(i) ? i.jquery ? i[0] : i : typeof i == \"string\" && i.length > 0 ? document.querySelector(i) : null, R = (i, t, e)=>{\n    Object.keys(e).forEach((s)=>{\n        const n = e[s], r = t[s], o = r && St(r) ? \"element\" : Xn(r);\n        if (!new RegExp(n).test(o)) throw new Error(`${i.toUpperCase()}: Option \"${s}\" provided type \"${o}\" but expected type \"${n}\".`);\n    });\n}, kt = (i)=>{\n    if (!i) return !1;\n    if (i.style && i.parentNode && i.parentNode.style) {\n        const t = getComputedStyle(i), e = getComputedStyle(i.parentNode);\n        return t.display !== \"none\" && e.display !== \"none\" && t.visibility !== \"hidden\";\n    }\n    return !1;\n}, gt = (i)=>!i || i.nodeType !== Node.ELEMENT_NODE || i.classList.contains(\"disabled\") ? !0 : typeof i.disabled < \"u\" ? i.disabled : i.hasAttribute(\"disabled\") && i.getAttribute(\"disabled\") !== \"false\", Ms = (i)=>{\n    if (!document.documentElement.attachShadow) return null;\n    if (typeof i.getRootNode == \"function\") {\n        const t = i.getRootNode();\n        return t instanceof ShadowRoot ? t : null;\n    }\n    return i instanceof ShadowRoot ? i : i.parentNode ? Ms(i.parentNode) : null;\n}, me = ()=>function() {}, Xt = (i)=>{\n    i.offsetHeight;\n}, Hs = ()=>{\n    const { jQuery: i } = window;\n    return i && !document.body.hasAttribute(\"data-twe-no-jquery\") ? i : null;\n}, Le = [], Vs = (i)=>{\n    document.readyState === \"loading\" ? (Le.length || document.addEventListener(\"DOMContentLoaded\", ()=>{\n        Le.forEach((t)=>t());\n    }), Le.push(i)) : i();\n}, M = ()=>document.documentElement.dir === \"rtl\", Ft = (i)=>document.createElement(i), _t = (i)=>{\n    typeof i == \"function\" && i();\n}, Ws = (i, t, e = !0)=>{\n    if (!e) {\n        _t(i);\n        return;\n    }\n    const s = 5, n = Je(t) + s;\n    let r = !1;\n    const o = ({ target: a })=>{\n        a === t && (r = !0, t.removeEventListener(Ze, o), _t(i));\n    };\n    t.addEventListener(Ze, o), setTimeout(()=>{\n        r || Ps(t);\n    }, n);\n}, Bs = (i, t, e, s)=>{\n    let n = i.indexOf(t);\n    if (n === -1) return i[!e && s ? i.length - 1 : 0];\n    const r = i.length;\n    return n += e ? 1 : -1, s && (n = (n + r) % r), i[Math.max(0, Math.min(n, r - 1))];\n}, Qn = /[^.]*(?=\\..*)\\.|.*/, Zn = /\\..*/, Jn = /::\\d+$/, $e = {};\nlet ki = 1;\nconst tr = {\n    mouseenter: \"mouseover\",\n    mouseleave: \"mouseout\"\n}, er = /^(mouseenter|mouseleave)/i, js = /* @__PURE__ */ new Set([\n    \"click\",\n    \"dblclick\",\n    \"mouseup\",\n    \"mousedown\",\n    \"contextmenu\",\n    \"mousewheel\",\n    \"DOMMouseScroll\",\n    \"mouseover\",\n    \"mouseout\",\n    \"mousemove\",\n    \"selectstart\",\n    \"selectend\",\n    \"keydown\",\n    \"keypress\",\n    \"keyup\",\n    \"orientationchange\",\n    \"touchstart\",\n    \"touchmove\",\n    \"touchend\",\n    \"touchcancel\",\n    \"pointerdown\",\n    \"pointermove\",\n    \"pointerup\",\n    \"pointerleave\",\n    \"pointercancel\",\n    \"gesturestart\",\n    \"gesturechange\",\n    \"gestureend\",\n    \"focus\",\n    \"blur\",\n    \"change\",\n    \"reset\",\n    \"select\",\n    \"submit\",\n    \"focusin\",\n    \"focusout\",\n    \"load\",\n    \"unload\",\n    \"beforeunload\",\n    \"resize\",\n    \"move\",\n    \"DOMContentLoaded\",\n    \"readystatechange\",\n    \"error\",\n    \"abort\",\n    \"scroll\"\n]);\nfunction Us(i, t) {\n    return t && `${t}::${ki++}` || i.uidEvent || ki++;\n}\nfunction Fs(i) {\n    const t = Us(i);\n    return i.uidEvent = t, $e[t] = $e[t] || {}, $e[t];\n}\nfunction ir(i, t) {\n    return function e(s) {\n        return s.delegateTarget = i, e.oneOff && d.off(i, s.type, t), t.apply(i, [\n            s\n        ]);\n    };\n}\nfunction sr(i, t, e) {\n    return function s(n) {\n        const r = i.querySelectorAll(t);\n        for(let { target: o } = n; o && o !== this; o = o.parentNode)for(let a = r.length; a--; \"\")if (r[a] === o) return n.delegateTarget = o, s.oneOff && d.off(i, n.type, e), e.apply(o, [\n            n\n        ]);\n        return null;\n    };\n}\nfunction Ys(i, t, e = null) {\n    const s = Object.keys(i);\n    for(let n = 0, r = s.length; n < r; n++){\n        const o = i[s[n]];\n        if (o.originalHandler === t && o.delegationSelector === e) return o;\n    }\n    return null;\n}\nfunction Ks(i, t, e) {\n    const s = typeof t == \"string\", n = s ? e : t;\n    let r = zs(i);\n    return js.has(r) || (r = i), [\n        s,\n        n,\n        r\n    ];\n}\nfunction Pi(i, t, e, s, n) {\n    if (typeof t != \"string\" || !i) return;\n    if (e || (e = s, s = null), er.test(t)) {\n        const g = (O)=>function(T) {\n                if (!T.relatedTarget || T.relatedTarget !== T.delegateTarget && !T.delegateTarget.contains(T.relatedTarget)) return O.call(this, T);\n            };\n        s ? s = g(s) : e = g(e);\n    }\n    const [r, o, a] = Ks(t, e, s), l = Fs(i), u = l[a] || (l[a] = {}), c = Ys(u, o, r ? e : null);\n    if (c) {\n        c.oneOff = c.oneOff && n;\n        return;\n    }\n    const f = Us(o, t.replace(Qn, \"\")), v = r ? sr(i, e, s) : ir(i, e);\n    v.delegationSelector = r ? e : null, v.originalHandler = o, v.oneOff = n, v.uidEvent = f, u[f] = v, i.addEventListener(a, v, r);\n}\nfunction ti(i, t, e, s, n) {\n    const r = Ys(t[e], s, n);\n    r && (i.removeEventListener(e, r, !!n), delete t[e][r.uidEvent]);\n}\nfunction nr(i, t, e, s) {\n    const n = t[e] || {};\n    Object.keys(n).forEach((r)=>{\n        if (r.includes(s)) {\n            const o = n[r];\n            ti(i, t, e, o.originalHandler, o.delegationSelector);\n        }\n    });\n}\nfunction zs(i) {\n    return i = i.replace(Zn, \"\"), tr[i] || i;\n}\nconst d = {\n    on (i, t, e, s) {\n        Pi(i, t, e, s, !1);\n    },\n    one (i, t, e, s) {\n        Pi(i, t, e, s, !0);\n    },\n    off (i, t, e, s) {\n        if (typeof t != \"string\" || !i) return;\n        const [n, r, o] = Ks(t, e, s), a = o !== t, l = Fs(i), u = t.startsWith(\".\");\n        if (typeof r < \"u\") {\n            if (!l || !l[o]) return;\n            ti(i, l, o, r, n ? e : null);\n            return;\n        }\n        u && Object.keys(l).forEach((f)=>{\n            nr(i, l, f, t.slice(1));\n        });\n        const c = l[o] || {};\n        Object.keys(c).forEach((f)=>{\n            const v = f.replace(Jn, \"\");\n            if (!a || t.includes(v)) {\n                const g = c[f];\n                ti(i, l, o, g.originalHandler, g.delegationSelector);\n            }\n        });\n    },\n    trigger (i, t, e) {\n        if (typeof t != \"string\" || !i) return null;\n        const s = Hs(), n = zs(t), r = t !== n, o = js.has(n);\n        let a, l = !0, u = !0, c = !1, f = null;\n        return r && s && (a = s.Event(t, e), s(i).trigger(a), l = !a.isPropagationStopped(), u = !a.isImmediatePropagationStopped(), c = a.isDefaultPrevented()), o ? (f = document.createEvent(\"HTMLEvents\"), f.initEvent(n, l, !0)) : f = new CustomEvent(t, {\n            bubbles: l,\n            cancelable: !0\n        }), typeof e < \"u\" && Object.keys(e).forEach((v)=>{\n            Object.defineProperty(f, v, {\n                get () {\n                    return e[v];\n                }\n            });\n        }), c && f.preventDefault(), u && i.dispatchEvent(f), f.defaultPrevented && typeof a < \"u\" && a.preventDefault(), f;\n    }\n}, rr = \"5.1.3\";\nclass tt {\n    constructor(t){\n        t = rt(t), t && (this._element = t, V.setData(this._element, this.constructor.DATA_KEY, this));\n    }\n    dispose() {\n        V.removeData(this._element, this.constructor.DATA_KEY), d.off(this._element, this.constructor.EVENT_KEY), Object.getOwnPropertyNames(this).forEach((t)=>{\n            this[t] = null;\n        });\n    }\n    _queueCallback(t, e, s = !0) {\n        Ws(t, e, s);\n    }\n    /** Static */ static getInstance(t) {\n        return V.getData(rt(t), this.DATA_KEY);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n    static get VERSION() {\n        return rr;\n    }\n    static get NAME() {\n        throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n    static get DATA_KEY() {\n        return `twe.${this.NAME}`;\n    }\n    static get EVENT_KEY() {\n        return `.${this.DATA_KEY}`;\n    }\n}\nconst or = \"button\", ar = \"active\";\nclass qs extends tt {\n    // Getters\n    static get NAME() {\n        return or;\n    }\n    // Public\n    toggle() {\n        this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(ar));\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = qs.getOrCreateInstance(this);\n            t === \"toggle\" && e[t]();\n        });\n    }\n}\nvar k = \"top\", W = \"bottom\", B = \"right\", P = \"left\", ve = \"auto\", Pt = [\n    k,\n    W,\n    B,\n    P\n], Et = \"start\", Lt = \"end\", Xs = \"clippingParents\", di = \"viewport\", Ct = \"popper\", Gs = \"reference\", ei = /* @__PURE__ */ Pt.reduce(function(i, t) {\n    return i.concat([\n        t + \"-\" + Et,\n        t + \"-\" + Lt\n    ]);\n}, []), ui = /* @__PURE__ */ [].concat(Pt, [\n    ve\n]).reduce(function(i, t) {\n    return i.concat([\n        t,\n        t + \"-\" + Et,\n        t + \"-\" + Lt\n    ]);\n}, []), Qs = \"beforeRead\", Zs = \"read\", Js = \"afterRead\", tn = \"beforeMain\", en = \"main\", sn = \"afterMain\", nn = \"beforeWrite\", rn = \"write\", on = \"afterWrite\", an = [\n    Qs,\n    Zs,\n    Js,\n    tn,\n    en,\n    sn,\n    nn,\n    rn,\n    on\n];\nfunction Q(i) {\n    return i ? (i.nodeName || \"\").toLowerCase() : null;\n}\nfunction j(i) {\n    if (i == null) return window;\n    if (i.toString() !== \"[object Window]\") {\n        var t = i.ownerDocument;\n        return t && t.defaultView || window;\n    }\n    return i;\n}\nfunction vt(i) {\n    var t = j(i).Element;\n    return i instanceof t || i instanceof Element;\n}\nfunction F(i) {\n    var t = j(i).HTMLElement;\n    return i instanceof t || i instanceof HTMLElement;\n}\nfunction hi(i) {\n    if (typeof ShadowRoot > \"u\") return !1;\n    var t = j(i).ShadowRoot;\n    return i instanceof t || i instanceof ShadowRoot;\n}\nfunction lr(i) {\n    var t = i.state;\n    Object.keys(t.elements).forEach(function(e) {\n        var s = t.styles[e] || {}, n = t.attributes[e] || {}, r = t.elements[e];\n        !F(r) || !Q(r) || (Object.assign(r.style, s), Object.keys(n).forEach(function(o) {\n            var a = n[o];\n            a === !1 ? r.removeAttribute(o) : r.setAttribute(o, a === !0 ? \"\" : a);\n        }));\n    });\n}\nfunction cr(i) {\n    var t = i.state, e = {\n        popper: {\n            position: t.options.strategy,\n            left: \"0\",\n            top: \"0\",\n            margin: \"0\"\n        },\n        arrow: {\n            position: \"absolute\"\n        },\n        reference: {}\n    };\n    return Object.assign(t.elements.popper.style, e.popper), t.styles = e, t.elements.arrow && Object.assign(t.elements.arrow.style, e.arrow), function() {\n        Object.keys(t.elements).forEach(function(s) {\n            var n = t.elements[s], r = t.attributes[s] || {}, o = Object.keys(t.styles.hasOwnProperty(s) ? t.styles[s] : e[s]), a = o.reduce(function(l, u) {\n                return l[u] = \"\", l;\n            }, {});\n            !F(n) || !Q(n) || (Object.assign(n.style, a), Object.keys(r).forEach(function(l) {\n                n.removeAttribute(l);\n            }));\n        });\n    };\n}\nconst fi = {\n    name: \"applyStyles\",\n    enabled: !0,\n    phase: \"write\",\n    fn: lr,\n    effect: cr,\n    requires: [\n        \"computeStyles\"\n    ]\n};\nfunction G(i) {\n    return i.split(\"-\")[0];\n}\nvar mt = Math.max, Ee = Math.min, $t = Math.round;\nfunction ii() {\n    var i = navigator.userAgentData;\n    return i != null && i.brands && Array.isArray(i.brands) ? i.brands.map(function(t) {\n        return t.brand + \"/\" + t.version;\n    }).join(\" \") : navigator.userAgent;\n}\nfunction ln() {\n    return !/^((?!chrome|android).)*safari/i.test(ii());\n}\nfunction It(i, t, e) {\n    t === void 0 && (t = !1), e === void 0 && (e = !1);\n    var s = i.getBoundingClientRect(), n = 1, r = 1;\n    t && F(i) && (n = i.offsetWidth > 0 && $t(s.width) / i.offsetWidth || 1, r = i.offsetHeight > 0 && $t(s.height) / i.offsetHeight || 1);\n    var o = vt(i) ? j(i) : window, a = o.visualViewport, l = !ln() && e, u = (s.left + (l && a ? a.offsetLeft : 0)) / n, c = (s.top + (l && a ? a.offsetTop : 0)) / r, f = s.width / n, v = s.height / r;\n    return {\n        width: f,\n        height: v,\n        top: c,\n        right: u + f,\n        bottom: c + v,\n        left: u,\n        x: u,\n        y: c\n    };\n}\nfunction pi(i) {\n    var t = It(i), e = i.offsetWidth, s = i.offsetHeight;\n    return Math.abs(t.width - e) <= 1 && (e = t.width), Math.abs(t.height - s) <= 1 && (s = t.height), {\n        x: i.offsetLeft,\n        y: i.offsetTop,\n        width: e,\n        height: s\n    };\n}\nfunction cn(i, t) {\n    var e = t.getRootNode && t.getRootNode();\n    if (i.contains(t)) return !0;\n    if (e && hi(e)) {\n        var s = t;\n        do {\n            if (s && i.isSameNode(s)) return !0;\n            s = s.parentNode || s.host;\n        }while (s);\n    }\n    return !1;\n}\nfunction J(i) {\n    return j(i).getComputedStyle(i);\n}\nfunction dr(i) {\n    return [\n        \"table\",\n        \"td\",\n        \"th\"\n    ].indexOf(Q(i)) >= 0;\n}\nfunction ot(i) {\n    return ((vt(i) ? i.ownerDocument : // $FlowFixMe[prop-missing]\n    i.document) || window.document).documentElement;\n}\nfunction be(i) {\n    return Q(i) === \"html\" ? i : // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    i.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    i.parentNode || // DOM Element detected\n    (hi(i) ? i.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    ot(i);\n}\nfunction Mi(i) {\n    return !F(i) || // https://github.com/popperjs/popper-core/issues/837\n    J(i).position === \"fixed\" ? null : i.offsetParent;\n}\nfunction ur(i) {\n    var t = /firefox/i.test(ii()), e = /Trident/i.test(ii());\n    if (e && F(i)) {\n        var s = J(i);\n        if (s.position === \"fixed\") return null;\n    }\n    var n = be(i);\n    for(hi(n) && (n = n.host); F(n) && [\n        \"html\",\n        \"body\"\n    ].indexOf(Q(n)) < 0;){\n        var r = J(n);\n        if (r.transform !== \"none\" || r.perspective !== \"none\" || r.contain === \"paint\" || [\n            \"transform\",\n            \"perspective\"\n        ].indexOf(r.willChange) !== -1 || t && r.willChange === \"filter\" || t && r.filter && r.filter !== \"none\") return n;\n        n = n.parentNode;\n    }\n    return null;\n}\nfunction Gt(i) {\n    for(var t = j(i), e = Mi(i); e && dr(e) && J(e).position === \"static\";)e = Mi(e);\n    return e && (Q(e) === \"html\" || Q(e) === \"body\" && J(e).position === \"static\") ? t : e || ur(i) || t;\n}\nfunction _i(i) {\n    return [\n        \"top\",\n        \"bottom\"\n    ].indexOf(i) >= 0 ? \"x\" : \"y\";\n}\nfunction zt(i, t, e) {\n    return mt(i, Ee(t, e));\n}\nfunction hr(i, t, e) {\n    var s = zt(i, t, e);\n    return s > e ? e : s;\n}\nfunction dn() {\n    return {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n    };\n}\nfunction un(i) {\n    return Object.assign({}, dn(), i);\n}\nfunction hn(i, t) {\n    return t.reduce(function(e, s) {\n        return e[s] = i, e;\n    }, {});\n}\nvar fr = function(t, e) {\n    return t = typeof t == \"function\" ? t(Object.assign({}, e.rects, {\n        placement: e.placement\n    })) : t, un(typeof t != \"number\" ? t : hn(t, Pt));\n};\nfunction pr(i) {\n    var t, e = i.state, s = i.name, n = i.options, r = e.elements.arrow, o = e.modifiersData.popperOffsets, a = G(e.placement), l = _i(a), u = [\n        P,\n        B\n    ].indexOf(a) >= 0, c = u ? \"height\" : \"width\";\n    if (!(!r || !o)) {\n        var f = fr(n.padding, e), v = pi(r), g = l === \"y\" ? k : P, O = l === \"y\" ? W : B, T = e.rects.reference[c] + e.rects.reference[l] - o[l] - e.rects.popper[c], A = o[l] - e.rects.reference[l], D = Gt(r), L = D ? l === \"y\" ? D.clientHeight || 0 : D.clientWidth || 0 : 0, m = T / 2 - A / 2, p = f[g], _ = L - v[c] - f[O], b = L / 2 - v[c] / 2 + m, w = zt(p, b, _), C = l;\n        e.modifiersData[s] = (t = {}, t[C] = w, t.centerOffset = w - b, t);\n    }\n}\nfunction _r(i) {\n    var t = i.state, e = i.options, s = e.element, n = s === void 0 ? \"[data-popper-arrow]\" : s;\n    n != null && (typeof n == \"string\" && (n = t.elements.popper.querySelector(n), !n) || cn(t.elements.popper, n) && (t.elements.arrow = n));\n}\nconst fn = {\n    name: \"arrow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: pr,\n    effect: _r,\n    requires: [\n        \"popperOffsets\"\n    ],\n    requiresIfExists: [\n        \"preventOverflow\"\n    ]\n};\nfunction Rt(i) {\n    return i.split(\"-\")[1];\n}\nvar gr = {\n    top: \"auto\",\n    right: \"auto\",\n    bottom: \"auto\",\n    left: \"auto\"\n};\nfunction mr(i, t) {\n    var e = i.x, s = i.y, n = t.devicePixelRatio || 1;\n    return {\n        x: $t(e * n) / n || 0,\n        y: $t(s * n) / n || 0\n    };\n}\nfunction Hi(i) {\n    var t, e = i.popper, s = i.popperRect, n = i.placement, r = i.variation, o = i.offsets, a = i.position, l = i.gpuAcceleration, u = i.adaptive, c = i.roundOffsets, f = i.isFixed, v = o.x, g = v === void 0 ? 0 : v, O = o.y, T = O === void 0 ? 0 : O, A = typeof c == \"function\" ? c({\n        x: g,\n        y: T\n    }) : {\n        x: g,\n        y: T\n    };\n    g = A.x, T = A.y;\n    var D = o.hasOwnProperty(\"x\"), L = o.hasOwnProperty(\"y\"), m = P, p = k, _ = window;\n    if (u) {\n        var b = Gt(e), w = \"clientHeight\", C = \"clientWidth\";\n        if (b === j(e) && (b = ot(e), J(b).position !== \"static\" && a === \"absolute\" && (w = \"scrollHeight\", C = \"scrollWidth\")), b = b, n === k || (n === P || n === B) && r === Lt) {\n            p = W;\n            var y = f && b === _ && _.visualViewport ? _.visualViewport.height : // $FlowFixMe[prop-missing]\n            b[w];\n            T -= y - s.height, T *= l ? 1 : -1;\n        }\n        if (n === P || (n === k || n === W) && r === Lt) {\n            m = B;\n            var N = f && b === _ && _.visualViewport ? _.visualViewport.width : // $FlowFixMe[prop-missing]\n            b[C];\n            g -= N - s.width, g *= l ? 1 : -1;\n        }\n    }\n    var S = Object.assign({\n        position: a\n    }, u && gr), x = c === !0 ? mr({\n        x: g,\n        y: T\n    }, j(e)) : {\n        x: g,\n        y: T\n    };\n    if (g = x.x, T = x.y, l) {\n        var I;\n        return Object.assign({}, S, (I = {}, I[p] = L ? \"0\" : \"\", I[m] = D ? \"0\" : \"\", I.transform = (_.devicePixelRatio || 1) <= 1 ? \"translate(\" + g + \"px, \" + T + \"px)\" : \"translate3d(\" + g + \"px, \" + T + \"px, 0)\", I));\n    }\n    return Object.assign({}, S, (t = {}, t[p] = L ? T + \"px\" : \"\", t[m] = D ? g + \"px\" : \"\", t.transform = \"\", t));\n}\nfunction Er(i) {\n    var t = i.state, e = i.options, s = e.gpuAcceleration, n = s === void 0 ? !0 : s, r = e.adaptive, o = r === void 0 ? !0 : r, a = e.roundOffsets, l = a === void 0 ? !0 : a, u = {\n        placement: G(t.placement),\n        variation: Rt(t.placement),\n        popper: t.elements.popper,\n        popperRect: t.rects.popper,\n        gpuAcceleration: n,\n        isFixed: t.options.strategy === \"fixed\"\n    };\n    t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, Hi(Object.assign({}, u, {\n        offsets: t.modifiersData.popperOffsets,\n        position: t.options.strategy,\n        adaptive: o,\n        roundOffsets: l\n    })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, Hi(Object.assign({}, u, {\n        offsets: t.modifiersData.arrow,\n        position: \"absolute\",\n        adaptive: !1,\n        roundOffsets: l\n    })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-placement\": t.placement\n    });\n}\nconst gi = {\n    name: \"computeStyles\",\n    enabled: !0,\n    phase: \"beforeWrite\",\n    fn: Er,\n    data: {}\n};\nvar se = {\n    passive: !0\n};\nfunction vr(i) {\n    var t = i.state, e = i.instance, s = i.options, n = s.scroll, r = n === void 0 ? !0 : n, o = s.resize, a = o === void 0 ? !0 : o, l = j(t.elements.popper), u = [].concat(t.scrollParents.reference, t.scrollParents.popper);\n    return r && u.forEach(function(c) {\n        c.addEventListener(\"scroll\", e.update, se);\n    }), a && l.addEventListener(\"resize\", e.update, se), function() {\n        r && u.forEach(function(c) {\n            c.removeEventListener(\"scroll\", e.update, se);\n        }), a && l.removeEventListener(\"resize\", e.update, se);\n    };\n}\nconst mi = {\n    name: \"eventListeners\",\n    enabled: !0,\n    phase: \"write\",\n    fn: function() {},\n    effect: vr,\n    data: {}\n};\nvar br = {\n    left: \"right\",\n    right: \"left\",\n    bottom: \"top\",\n    top: \"bottom\"\n};\nfunction ue(i) {\n    return i.replace(/left|right|bottom|top/g, function(t) {\n        return br[t];\n    });\n}\nvar wr = {\n    start: \"end\",\n    end: \"start\"\n};\nfunction Vi(i) {\n    return i.replace(/start|end/g, function(t) {\n        return wr[t];\n    });\n}\nfunction Ei(i) {\n    var t = j(i), e = t.pageXOffset, s = t.pageYOffset;\n    return {\n        scrollLeft: e,\n        scrollTop: s\n    };\n}\nfunction vi(i) {\n    return It(ot(i)).left + Ei(i).scrollLeft;\n}\nfunction Tr(i, t) {\n    var e = j(i), s = ot(i), n = e.visualViewport, r = s.clientWidth, o = s.clientHeight, a = 0, l = 0;\n    if (n) {\n        r = n.width, o = n.height;\n        var u = ln();\n        (u || !u && t === \"fixed\") && (a = n.offsetLeft, l = n.offsetTop);\n    }\n    return {\n        width: r,\n        height: o,\n        x: a + vi(i),\n        y: l\n    };\n}\nfunction yr(i) {\n    var t, e = ot(i), s = Ei(i), n = (t = i.ownerDocument) == null ? void 0 : t.body, r = mt(e.scrollWidth, e.clientWidth, n ? n.scrollWidth : 0, n ? n.clientWidth : 0), o = mt(e.scrollHeight, e.clientHeight, n ? n.scrollHeight : 0, n ? n.clientHeight : 0), a = -s.scrollLeft + vi(i), l = -s.scrollTop;\n    return J(n || e).direction === \"rtl\" && (a += mt(e.clientWidth, n ? n.clientWidth : 0) - r), {\n        width: r,\n        height: o,\n        x: a,\n        y: l\n    };\n}\nfunction bi(i) {\n    var t = J(i), e = t.overflow, s = t.overflowX, n = t.overflowY;\n    return /auto|scroll|overlay|hidden/.test(e + n + s);\n}\nfunction pn(i) {\n    return [\n        \"html\",\n        \"body\",\n        \"#document\"\n    ].indexOf(Q(i)) >= 0 ? i.ownerDocument.body : F(i) && bi(i) ? i : pn(be(i));\n}\nfunction qt(i, t) {\n    var e;\n    t === void 0 && (t = []);\n    var s = pn(i), n = s === ((e = i.ownerDocument) == null ? void 0 : e.body), r = j(s), o = n ? [\n        r\n    ].concat(r.visualViewport || [], bi(s) ? s : []) : s, a = t.concat(o);\n    return n ? a : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n    a.concat(qt(be(o)));\n}\nfunction si(i) {\n    return Object.assign({}, i, {\n        left: i.x,\n        top: i.y,\n        right: i.x + i.width,\n        bottom: i.y + i.height\n    });\n}\nfunction Ar(i, t) {\n    var e = It(i, !1, t === \"fixed\");\n    return e.top = e.top + i.clientTop, e.left = e.left + i.clientLeft, e.bottom = e.top + i.clientHeight, e.right = e.left + i.clientWidth, e.width = i.clientWidth, e.height = i.clientHeight, e.x = e.left, e.y = e.top, e;\n}\nfunction Wi(i, t, e) {\n    return t === di ? si(Tr(i, e)) : vt(t) ? Ar(t, e) : si(yr(ot(i)));\n}\nfunction Cr(i) {\n    var t = qt(be(i)), e = [\n        \"absolute\",\n        \"fixed\"\n    ].indexOf(J(i).position) >= 0, s = e && F(i) ? Gt(i) : i;\n    return vt(s) ? t.filter(function(n) {\n        return vt(n) && cn(n, s) && Q(n) !== \"body\";\n    }) : [];\n}\nfunction Or(i, t, e, s) {\n    var n = t === \"clippingParents\" ? Cr(i) : [].concat(t), r = [].concat(n, [\n        e\n    ]), o = r[0], a = r.reduce(function(l, u) {\n        var c = Wi(i, u, s);\n        return l.top = mt(c.top, l.top), l.right = Ee(c.right, l.right), l.bottom = Ee(c.bottom, l.bottom), l.left = mt(c.left, l.left), l;\n    }, Wi(i, o, s));\n    return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;\n}\nfunction _n(i) {\n    var t = i.reference, e = i.element, s = i.placement, n = s ? G(s) : null, r = s ? Rt(s) : null, o = t.x + t.width / 2 - e.width / 2, a = t.y + t.height / 2 - e.height / 2, l;\n    switch(n){\n        case k:\n            l = {\n                x: o,\n                y: t.y - e.height\n            };\n            break;\n        case W:\n            l = {\n                x: o,\n                y: t.y + t.height\n            };\n            break;\n        case B:\n            l = {\n                x: t.x + t.width,\n                y: a\n            };\n            break;\n        case P:\n            l = {\n                x: t.x - e.width,\n                y: a\n            };\n            break;\n        default:\n            l = {\n                x: t.x,\n                y: t.y\n            };\n    }\n    var u = n ? _i(n) : null;\n    if (u != null) {\n        var c = u === \"y\" ? \"height\" : \"width\";\n        switch(r){\n            case Et:\n                l[u] = l[u] - (t[c] / 2 - e[c] / 2);\n                break;\n            case Lt:\n                l[u] = l[u] + (t[c] / 2 - e[c] / 2);\n                break;\n        }\n    }\n    return l;\n}\nfunction xt(i, t) {\n    t === void 0 && (t = {});\n    var e = t, s = e.placement, n = s === void 0 ? i.placement : s, r = e.strategy, o = r === void 0 ? i.strategy : r, a = e.boundary, l = a === void 0 ? Xs : a, u = e.rootBoundary, c = u === void 0 ? di : u, f = e.elementContext, v = f === void 0 ? Ct : f, g = e.altBoundary, O = g === void 0 ? !1 : g, T = e.padding, A = T === void 0 ? 0 : T, D = un(typeof A != \"number\" ? A : hn(A, Pt)), L = v === Ct ? Gs : Ct, m = i.rects.popper, p = i.elements[O ? L : v], _ = Or(vt(p) ? p : p.contextElement || ot(i.elements.popper), l, c, o), b = It(i.elements.reference), w = _n({\n        reference: b,\n        element: m,\n        strategy: \"absolute\",\n        placement: n\n    }), C = si(Object.assign({}, m, w)), y = v === Ct ? C : b, N = {\n        top: _.top - y.top + D.top,\n        bottom: y.bottom - _.bottom + D.bottom,\n        left: _.left - y.left + D.left,\n        right: y.right - _.right + D.right\n    }, S = i.modifiersData.offset;\n    if (v === Ct && S) {\n        var x = S[n];\n        Object.keys(N).forEach(function(I) {\n            var at = [\n                B,\n                W\n            ].indexOf(I) >= 0 ? 1 : -1, lt = [\n                k,\n                W\n            ].indexOf(I) >= 0 ? \"y\" : \"x\";\n            N[I] += x[lt] * at;\n        });\n    }\n    return N;\n}\nfunction Dr(i, t) {\n    t === void 0 && (t = {});\n    var e = t, s = e.placement, n = e.boundary, r = e.rootBoundary, o = e.padding, a = e.flipVariations, l = e.allowedAutoPlacements, u = l === void 0 ? ui : l, c = Rt(s), f = c ? a ? ei : ei.filter(function(O) {\n        return Rt(O) === c;\n    }) : Pt, v = f.filter(function(O) {\n        return u.indexOf(O) >= 0;\n    });\n    v.length === 0 && (v = f);\n    var g = v.reduce(function(O, T) {\n        return O[T] = xt(i, {\n            placement: T,\n            boundary: n,\n            rootBoundary: r,\n            padding: o\n        })[G(T)], O;\n    }, {});\n    return Object.keys(g).sort(function(O, T) {\n        return g[O] - g[T];\n    });\n}\nfunction Nr(i) {\n    if (G(i) === ve) return [];\n    var t = ue(i);\n    return [\n        Vi(i),\n        t,\n        Vi(t)\n    ];\n}\nfunction Sr(i) {\n    var t = i.state, e = i.options, s = i.name;\n    if (!t.modifiersData[s]._skip) {\n        for(var n = e.mainAxis, r = n === void 0 ? !0 : n, o = e.altAxis, a = o === void 0 ? !0 : o, l = e.fallbackPlacements, u = e.padding, c = e.boundary, f = e.rootBoundary, v = e.altBoundary, g = e.flipVariations, O = g === void 0 ? !0 : g, T = e.allowedAutoPlacements, A = t.options.placement, D = G(A), L = D === A, m = l || (L || !O ? [\n            ue(A)\n        ] : Nr(A)), p = [\n            A\n        ].concat(m).reduce(function(wt, et) {\n            return wt.concat(G(et) === ve ? Dr(t, {\n                placement: et,\n                boundary: c,\n                rootBoundary: f,\n                padding: u,\n                flipVariations: O,\n                allowedAutoPlacements: T\n            }) : et);\n        }, []), _ = t.rects.reference, b = t.rects.popper, w = /* @__PURE__ */ new Map(), C = !0, y = p[0], N = 0; N < p.length; N++){\n            var S = p[N], x = G(S), I = Rt(S) === Et, at = [\n                k,\n                W\n            ].indexOf(x) >= 0, lt = at ? \"width\" : \"height\", H = xt(t, {\n                placement: S,\n                boundary: c,\n                rootBoundary: f,\n                altBoundary: v,\n                padding: u\n            }), Y = at ? I ? B : P : I ? W : k;\n            _[lt] > b[lt] && (Y = ue(Y));\n            var Zt = ue(Y), ct = [];\n            if (r && ct.push(H[x] <= 0), a && ct.push(H[Y] <= 0, H[Zt] <= 0), ct.every(function(wt) {\n                return wt;\n            })) {\n                y = S, C = !1;\n                break;\n            }\n            w.set(S, ct);\n        }\n        if (C) for(var Jt = O ? 3 : 1, Ae = function(et) {\n            var Vt = p.find(function(ee) {\n                var dt = w.get(ee);\n                if (dt) return dt.slice(0, et).every(function(Ce) {\n                    return Ce;\n                });\n            });\n            if (Vt) return y = Vt, \"break\";\n        }, Ht = Jt; Ht > 0; Ht--){\n            var te = Ae(Ht);\n            if (te === \"break\") break;\n        }\n        t.placement !== y && (t.modifiersData[s]._skip = !0, t.placement = y, t.reset = !0);\n    }\n}\nconst gn = {\n    name: \"flip\",\n    enabled: !0,\n    phase: \"main\",\n    fn: Sr,\n    requiresIfExists: [\n        \"offset\"\n    ],\n    data: {\n        _skip: !1\n    }\n};\nfunction Bi(i, t, e) {\n    return e === void 0 && (e = {\n        x: 0,\n        y: 0\n    }), {\n        top: i.top - t.height - e.y,\n        right: i.right - t.width + e.x,\n        bottom: i.bottom - t.height + e.y,\n        left: i.left - t.width - e.x\n    };\n}\nfunction ji(i) {\n    return [\n        k,\n        B,\n        W,\n        P\n    ].some(function(t) {\n        return i[t] >= 0;\n    });\n}\nfunction Lr(i) {\n    var t = i.state, e = i.name, s = t.rects.reference, n = t.rects.popper, r = t.modifiersData.preventOverflow, o = xt(t, {\n        elementContext: \"reference\"\n    }), a = xt(t, {\n        altBoundary: !0\n    }), l = Bi(o, s), u = Bi(a, n, r), c = ji(l), f = ji(u);\n    t.modifiersData[e] = {\n        referenceClippingOffsets: l,\n        popperEscapeOffsets: u,\n        isReferenceHidden: c,\n        hasPopperEscaped: f\n    }, t.attributes.popper = Object.assign({}, t.attributes.popper, {\n        \"data-popper-reference-hidden\": c,\n        \"data-popper-escaped\": f\n    });\n}\nconst mn = {\n    name: \"hide\",\n    enabled: !0,\n    phase: \"main\",\n    requiresIfExists: [\n        \"preventOverflow\"\n    ],\n    fn: Lr\n};\nfunction $r(i, t, e) {\n    var s = G(i), n = [\n        P,\n        k\n    ].indexOf(s) >= 0 ? -1 : 1, r = typeof e == \"function\" ? e(Object.assign({}, t, {\n        placement: i\n    })) : e, o = r[0], a = r[1];\n    return o = o || 0, a = (a || 0) * n, [\n        P,\n        B\n    ].indexOf(s) >= 0 ? {\n        x: a,\n        y: o\n    } : {\n        x: o,\n        y: a\n    };\n}\nfunction Ir(i) {\n    var t = i.state, e = i.options, s = i.name, n = e.offset, r = n === void 0 ? [\n        0,\n        0\n    ] : n, o = ui.reduce(function(c, f) {\n        return c[f] = $r(f, t.rects, r), c;\n    }, {}), a = o[t.placement], l = a.x, u = a.y;\n    t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += l, t.modifiersData.popperOffsets.y += u), t.modifiersData[s] = o;\n}\nconst En = {\n    name: \"offset\",\n    enabled: !0,\n    phase: \"main\",\n    requires: [\n        \"popperOffsets\"\n    ],\n    fn: Ir\n};\nfunction Rr(i) {\n    var t = i.state, e = i.name;\n    t.modifiersData[e] = _n({\n        reference: t.rects.reference,\n        element: t.rects.popper,\n        strategy: \"absolute\",\n        placement: t.placement\n    });\n}\nconst wi = {\n    name: \"popperOffsets\",\n    enabled: !0,\n    phase: \"read\",\n    fn: Rr,\n    data: {}\n};\nfunction xr(i) {\n    return i === \"x\" ? \"y\" : \"x\";\n}\nfunction kr(i) {\n    var t = i.state, e = i.options, s = i.name, n = e.mainAxis, r = n === void 0 ? !0 : n, o = e.altAxis, a = o === void 0 ? !1 : o, l = e.boundary, u = e.rootBoundary, c = e.altBoundary, f = e.padding, v = e.tether, g = v === void 0 ? !0 : v, O = e.tetherOffset, T = O === void 0 ? 0 : O, A = xt(t, {\n        boundary: l,\n        rootBoundary: u,\n        padding: f,\n        altBoundary: c\n    }), D = G(t.placement), L = Rt(t.placement), m = !L, p = _i(D), _ = xr(p), b = t.modifiersData.popperOffsets, w = t.rects.reference, C = t.rects.popper, y = typeof T == \"function\" ? T(Object.assign({}, t.rects, {\n        placement: t.placement\n    })) : T, N = typeof y == \"number\" ? {\n        mainAxis: y,\n        altAxis: y\n    } : Object.assign({\n        mainAxis: 0,\n        altAxis: 0\n    }, y), S = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, x = {\n        x: 0,\n        y: 0\n    };\n    if (b) {\n        if (r) {\n            var I, at = p === \"y\" ? k : P, lt = p === \"y\" ? W : B, H = p === \"y\" ? \"height\" : \"width\", Y = b[p], Zt = Y + A[at], ct = Y - A[lt], Jt = g ? -C[H] / 2 : 0, Ae = L === Et ? w[H] : C[H], Ht = L === Et ? -C[H] : -w[H], te = t.elements.arrow, wt = g && te ? pi(te) : {\n                width: 0,\n                height: 0\n            }, et = t.modifiersData[\"arrow#persistent\"] ? t.modifiersData[\"arrow#persistent\"].padding : dn(), Vt = et[at], ee = et[lt], dt = zt(0, w[H], wt[H]), Ce = m ? w[H] / 2 - Jt - dt - Vt - N.mainAxis : Ae - dt - Vt - N.mainAxis, Vn = m ? -w[H] / 2 + Jt + dt + ee + N.mainAxis : Ht + dt + ee + N.mainAxis, Oe = t.elements.arrow && Gt(t.elements.arrow), Wn = Oe ? p === \"y\" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Oi = (I = S == null ? void 0 : S[p]) != null ? I : 0, Bn = Y + Ce - Oi - Wn, jn = Y + Vn - Oi, Di = zt(g ? Ee(Zt, Bn) : Zt, Y, g ? mt(ct, jn) : ct);\n            b[p] = Di, x[p] = Di - Y;\n        }\n        if (a) {\n            var Ni, Un = p === \"x\" ? k : P, Fn = p === \"x\" ? W : B, ut = b[_], ie = _ === \"y\" ? \"height\" : \"width\", Si = ut + A[Un], Li = ut - A[Fn], De = [\n                k,\n                P\n            ].indexOf(D) !== -1, $i = (Ni = S == null ? void 0 : S[_]) != null ? Ni : 0, Ii = De ? Si : ut - w[ie] - C[ie] - $i + N.altAxis, Ri = De ? ut + w[ie] + C[ie] - $i - N.altAxis : Li, xi = g && De ? hr(Ii, ut, Ri) : zt(g ? Ii : Si, ut, g ? Ri : Li);\n            b[_] = xi, x[_] = xi - ut;\n        }\n        t.modifiersData[s] = x;\n    }\n}\nconst vn = {\n    name: \"preventOverflow\",\n    enabled: !0,\n    phase: \"main\",\n    fn: kr,\n    requiresIfExists: [\n        \"offset\"\n    ]\n};\nfunction Pr(i) {\n    return {\n        scrollLeft: i.scrollLeft,\n        scrollTop: i.scrollTop\n    };\n}\nfunction Mr(i) {\n    return i === j(i) || !F(i) ? Ei(i) : Pr(i);\n}\nfunction Hr(i) {\n    var t = i.getBoundingClientRect(), e = $t(t.width) / i.offsetWidth || 1, s = $t(t.height) / i.offsetHeight || 1;\n    return e !== 1 || s !== 1;\n}\nfunction Vr(i, t, e) {\n    e === void 0 && (e = !1);\n    var s = F(t), n = F(t) && Hr(t), r = ot(t), o = It(i, n, e), a = {\n        scrollLeft: 0,\n        scrollTop: 0\n    }, l = {\n        x: 0,\n        y: 0\n    };\n    return (s || !s && !e) && ((Q(t) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n    bi(r)) && (a = Mr(t)), F(t) ? (l = It(t, !0), l.x += t.clientLeft, l.y += t.clientTop) : r && (l.x = vi(r))), {\n        x: o.left + a.scrollLeft - l.x,\n        y: o.top + a.scrollTop - l.y,\n        width: o.width,\n        height: o.height\n    };\n}\nfunction Wr(i) {\n    var t = /* @__PURE__ */ new Map(), e = /* @__PURE__ */ new Set(), s = [];\n    i.forEach(function(r) {\n        t.set(r.name, r);\n    });\n    function n(r) {\n        e.add(r.name);\n        var o = [].concat(r.requires || [], r.requiresIfExists || []);\n        o.forEach(function(a) {\n            if (!e.has(a)) {\n                var l = t.get(a);\n                l && n(l);\n            }\n        }), s.push(r);\n    }\n    return i.forEach(function(r) {\n        e.has(r.name) || n(r);\n    }), s;\n}\nfunction Br(i) {\n    var t = Wr(i);\n    return an.reduce(function(e, s) {\n        return e.concat(t.filter(function(n) {\n            return n.phase === s;\n        }));\n    }, []);\n}\nfunction jr(i) {\n    var t;\n    return function() {\n        return t || (t = new Promise(function(e) {\n            Promise.resolve().then(function() {\n                t = void 0, e(i());\n            });\n        })), t;\n    };\n}\nfunction Ur(i) {\n    var t = i.reduce(function(e, s) {\n        var n = e[s.name];\n        return e[s.name] = n ? Object.assign({}, n, s, {\n            options: Object.assign({}, n.options, s.options),\n            data: Object.assign({}, n.data, s.data)\n        }) : s, e;\n    }, {});\n    return Object.keys(t).map(function(e) {\n        return t[e];\n    });\n}\nvar Ui = {\n    placement: \"bottom\",\n    modifiers: [],\n    strategy: \"absolute\"\n};\nfunction Fi() {\n    for(var i = arguments.length, t = new Array(i), e = 0; e < i; e++)t[e] = arguments[e];\n    return !t.some(function(s) {\n        return !(s && typeof s.getBoundingClientRect == \"function\");\n    });\n}\nfunction we(i) {\n    i === void 0 && (i = {});\n    var t = i, e = t.defaultModifiers, s = e === void 0 ? [] : e, n = t.defaultOptions, r = n === void 0 ? Ui : n;\n    return function(a, l, u) {\n        u === void 0 && (u = r);\n        var c = {\n            placement: \"bottom\",\n            orderedModifiers: [],\n            options: Object.assign({}, Ui, r),\n            modifiersData: {},\n            elements: {\n                reference: a,\n                popper: l\n            },\n            attributes: {},\n            styles: {}\n        }, f = [], v = !1, g = {\n            state: c,\n            setOptions: function(D) {\n                var L = typeof D == \"function\" ? D(c.options) : D;\n                T(), c.options = Object.assign({}, r, c.options, L), c.scrollParents = {\n                    reference: vt(a) ? qt(a) : a.contextElement ? qt(a.contextElement) : [],\n                    popper: qt(l)\n                };\n                var m = Br(Ur([].concat(s, c.options.modifiers)));\n                return c.orderedModifiers = m.filter(function(p) {\n                    return p.enabled;\n                }), O(), g.update();\n            },\n            // Sync update – it will always be executed, even if not necessary. This\n            // is useful for low frequency updates where sync behavior simplifies the\n            // logic.\n            // For high frequency updates (e.g. `resize` and `scroll` events), always\n            // prefer the async Popper#update method\n            forceUpdate: function() {\n                if (!v) {\n                    var D = c.elements, L = D.reference, m = D.popper;\n                    if (Fi(L, m)) {\n                        c.rects = {\n                            reference: Vr(L, Gt(m), c.options.strategy === \"fixed\"),\n                            popper: pi(m)\n                        }, c.reset = !1, c.placement = c.options.placement, c.orderedModifiers.forEach(function(N) {\n                            return c.modifiersData[N.name] = Object.assign({}, N.data);\n                        });\n                        for(var p = 0; p < c.orderedModifiers.length; p++){\n                            if (c.reset === !0) {\n                                c.reset = !1, p = -1;\n                                continue;\n                            }\n                            var _ = c.orderedModifiers[p], b = _.fn, w = _.options, C = w === void 0 ? {} : w, y = _.name;\n                            typeof b == \"function\" && (c = b({\n                                state: c,\n                                options: C,\n                                name: y,\n                                instance: g\n                            }) || c);\n                        }\n                    }\n                }\n            },\n            // Async and optimistically optimized update – it will not be executed if\n            // not necessary (debounced to run at most once-per-tick)\n            update: jr(function() {\n                return new Promise(function(A) {\n                    g.forceUpdate(), A(c);\n                });\n            }),\n            destroy: function() {\n                T(), v = !0;\n            }\n        };\n        if (!Fi(a, l)) return g;\n        g.setOptions(u).then(function(A) {\n            !v && u.onFirstUpdate && u.onFirstUpdate(A);\n        });\n        function O() {\n            c.orderedModifiers.forEach(function(A) {\n                var D = A.name, L = A.options, m = L === void 0 ? {} : L, p = A.effect;\n                if (typeof p == \"function\") {\n                    var _ = p({\n                        state: c,\n                        name: D,\n                        instance: g,\n                        options: m\n                    }), b = function() {};\n                    f.push(_ || b);\n                }\n            });\n        }\n        function T() {\n            f.forEach(function(A) {\n                return A();\n            }), f = [];\n        }\n        return g;\n    };\n}\nvar Fr = /* @__PURE__ */ we(), Yr = [\n    mi,\n    wi,\n    gi,\n    fi\n], Kr = /* @__PURE__ */ we({\n    defaultModifiers: Yr\n}), zr = [\n    mi,\n    wi,\n    gi,\n    fi,\n    En,\n    gn,\n    vn,\n    fn,\n    mn\n], Ti = /* @__PURE__ */ we({\n    defaultModifiers: zr\n});\nconst bn = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    afterMain: sn,\n    afterRead: Js,\n    afterWrite: on,\n    applyStyles: fi,\n    arrow: fn,\n    auto: ve,\n    basePlacements: Pt,\n    beforeMain: tn,\n    beforeRead: Qs,\n    beforeWrite: nn,\n    bottom: W,\n    clippingParents: Xs,\n    computeStyles: gi,\n    createPopper: Ti,\n    createPopperBase: Fr,\n    createPopperLite: Kr,\n    detectOverflow: xt,\n    end: Lt,\n    eventListeners: mi,\n    flip: gn,\n    hide: mn,\n    left: P,\n    main: en,\n    modifierPhases: an,\n    offset: En,\n    placements: ui,\n    popper: Ct,\n    popperGenerator: we,\n    popperOffsets: wi,\n    preventOverflow: vn,\n    read: Zs,\n    reference: Gs,\n    right: B,\n    start: Et,\n    top: k,\n    variationPlacements: ei,\n    viewport: di,\n    write: rn\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\nfunction Ie(i) {\n    return i === \"true\" ? !0 : i === \"false\" ? !1 : i === Number(i).toString() ? Number(i) : i === \"\" || i === \"null\" ? null : i;\n}\nfunction Re(i) {\n    return i.replace(/[A-Z]/g, (t)=>`-${t.toLowerCase()}`);\n}\nconst E = {\n    setDataAttribute (i, t, e) {\n        i.setAttribute(`data-twe-${Re(t)}`, e);\n    },\n    removeDataAttribute (i, t) {\n        i.removeAttribute(`data-twe-${Re(t)}`);\n    },\n    getDataAttributes (i) {\n        if (!i) return {};\n        const t = {};\n        return Object.keys(i.dataset).filter((e)=>e.startsWith(\"twe\")).forEach((e)=>{\n            if (e.startsWith(\"tweClass\")) return;\n            let s = e.replace(/^twe/, \"\");\n            s = s.charAt(0).toLowerCase() + s.slice(1, s.length), t[s] = Ie(i.dataset[e]);\n        }), t;\n    },\n    getDataClassAttributes (i) {\n        if (!i) return {};\n        const t = {\n            ...i.dataset\n        };\n        return Object.keys(t).filter((e)=>e.startsWith(\"tweClass\")).forEach((e)=>{\n            let s = e.replace(/^tweClass/, \"\");\n            s = s.charAt(0).toLowerCase() + s.slice(1, s.length), t[s] = Ie(t[e]);\n        }), t;\n    },\n    getDataAttribute (i, t) {\n        return Ie(i.getAttribute(`data-twe-${Re(t)}`));\n    },\n    offset (i) {\n        const t = i.getBoundingClientRect();\n        return {\n            top: t.top + document.body.scrollTop,\n            left: t.left + document.body.scrollLeft\n        };\n    },\n    position (i) {\n        return {\n            top: i.offsetTop,\n            left: i.offsetLeft\n        };\n    },\n    style (i, t) {\n        Object.assign(i.style, t);\n    },\n    toggleClass (i, t) {\n        i && xe(t).forEach((e)=>{\n            i.classList.contains(e) ? i.classList.remove(e) : i.classList.add(e);\n        });\n    },\n    addClass (i, t) {\n        xe(t).forEach((e)=>!i.classList.contains(e) && i.classList.add(e));\n    },\n    addStyle (i, t) {\n        Object.keys(t).forEach((e)=>{\n            i.style[e] = t[e];\n        });\n    },\n    removeClass (i, t) {\n        xe(t).forEach((e)=>i.classList.contains(e) && i.classList.remove(e));\n    },\n    hasClass (i, t) {\n        return i.classList.contains(t);\n    },\n    maxOffset (i) {\n        const t = i.getBoundingClientRect();\n        return {\n            top: t.top + Math.max(document.body.scrollTop, document.documentElement.scrollTop, window.scrollY),\n            left: t.left + Math.max(document.body.scrollLeft, document.documentElement.scrollLeft, window.scrollX)\n        };\n    }\n};\nfunction xe(i) {\n    return typeof i == \"string\" ? i.split(\" \") : Array.isArray(i) ? i : !1;\n}\nconst qr = 3, h = {\n    closest (i, t) {\n        return i.closest(t);\n    },\n    matches (i, t) {\n        return i.matches(t);\n    },\n    find (i, t = document.documentElement) {\n        return [].concat(...Element.prototype.querySelectorAll.call(t, i));\n    },\n    findOne (i, t = document.documentElement) {\n        return Element.prototype.querySelector.call(t, i);\n    },\n    children (i, t) {\n        return [].concat(...i.children).filter((s)=>s.matches(t));\n    },\n    parents (i, t) {\n        const e = [];\n        let s = i.parentNode;\n        for(; s && s.nodeType === Node.ELEMENT_NODE && s.nodeType !== qr;)this.matches(s, t) && e.push(s), s = s.parentNode;\n        return e;\n    },\n    prev (i, t) {\n        let e = i.previousElementSibling;\n        for(; e;){\n            if (e.matches(t)) return [\n                e\n            ];\n            e = e.previousElementSibling;\n        }\n        return [];\n    },\n    next (i, t) {\n        let e = i.nextElementSibling;\n        for(; e;){\n            if (this.matches(e, t)) return [\n                e\n            ];\n            e = e.nextElementSibling;\n        }\n        return [];\n    },\n    focusableChildren (i) {\n        const t = [\n            \"a\",\n            \"button\",\n            \"input\",\n            \"textarea\",\n            \"select\",\n            \"details\",\n            \"[tabindex]\",\n            '[contenteditable=\"true\"]'\n        ].map((e)=>`${e}:not([tabindex^=\"-\"])`).join(\", \");\n        return this.find(t, i).filter((e)=>!gt(e) && kt(e));\n    }\n}, ke = \"dropdown\", Xr = \"twe.dropdown\", bt = `.${Xr}`, yi = \".data-api\", he = \"Escape\", Yi = \"Space\", Ki = \"Tab\", ni = \"ArrowUp\", fe = \"ArrowDown\", Gr = 2, Qr = new RegExp(`${ni}|${fe}|${he}`), Zr = `hide${bt}`, Jr = `hidden${bt}`, to = `show${bt}`, eo = `shown${bt}`, io = `click${bt}${yi}`, zi = `keydown${bt}${yi}`, so = `keyup${bt}${yi}`, it = \"show\", no = \"dropup\", ro = \"dropend\", oo = \"dropstart\", ao = \"[data-twe-navbar-ref]\", ne = \"[data-twe-dropdown-toggle-ref]\", Pe = \"[data-twe-dropdown-menu-ref]\", lo = \"[data-twe-navbar-nav-ref]\", co = \"[data-twe-dropdown-menu-ref] [data-twe-dropdown-item-ref]:not(.disabled):not(:disabled)\", uo = M() ? \"top-end\" : \"top-start\", ho = M() ? \"top-start\" : \"top-end\", fo = M() ? \"bottom-end\" : \"bottom-start\", po = M() ? \"bottom-start\" : \"bottom-end\", _o = M() ? \"left-start\" : \"right-start\", go = M() ? \"right-start\" : \"left-start\", mo = [\n    {\n        opacity: \"0\"\n    },\n    {\n        opacity: \"1\"\n    }\n], Eo = [\n    {\n        opacity: \"1\"\n    },\n    {\n        opacity: \"0\"\n    }\n], qi = {\n    iterations: 1,\n    easing: \"ease\",\n    fill: \"both\"\n}, vo = {\n    offset: [\n        0,\n        2\n    ],\n    boundary: \"clippingParents\",\n    reference: \"toggle\",\n    display: \"dynamic\",\n    popperConfig: null,\n    autoClose: !0,\n    dropdownAnimation: \"on\",\n    animationDuration: 550\n}, bo = {\n    offset: \"(array|string|function)\",\n    boundary: \"(string|element)\",\n    reference: \"(string|element|object)\",\n    display: \"string\",\n    popperConfig: \"(null|object|function)\",\n    autoClose: \"(boolean|string)\",\n    dropdownAnimation: \"string\",\n    animationDuration: \"number\"\n};\nclass X extends tt {\n    constructor(t, e){\n        super(t), this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._fadeOutAnimate = null;\n        const s = window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n        this._animationCanPlay = this._config.dropdownAnimation === \"on\" && !s, this._didInit = !1, this._init();\n    }\n    // Getters\n    static get Default() {\n        return vo;\n    }\n    static get DefaultType() {\n        return bo;\n    }\n    static get NAME() {\n        return ke;\n    }\n    // Public\n    toggle() {\n        return this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (gt(this._element) || this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        if (d.trigger(this._element, to, t).defaultPrevented) return;\n        const s = X.getParentFromElement(this._element);\n        this._inNavbar ? E.setDataAttribute(this._menu, \"popper\", \"none\") : this._createPopper(s), \"ontouchstart\" in document.documentElement && !s.closest(lo) && [].concat(...document.body.children).forEach((n)=>d.on(n, \"mouseover\", me)), this._element.focus(), this._element.setAttribute(\"aria-expanded\", !0), this._menu.setAttribute(`data-twe-dropdown-${it}`, \"\"), this._animationCanPlay && this._menu.animate(mo, {\n            ...qi,\n            duration: this._config.animationDuration\n        }), this._element.setAttribute(`data-twe-dropdown-${it}`, \"\"), setTimeout(()=>{\n            d.trigger(this._element, eo, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0);\n    }\n    hide() {\n        if (gt(this._element) || !this._isShown(this._menu)) return;\n        const t = {\n            relatedTarget: this._element\n        };\n        this._completeHide(t);\n    }\n    dispose() {\n        this._popper && this._popper.destroy(), super.dispose();\n    }\n    update() {\n        this._inNavbar = this._detectNavbar(), this._popper && this._popper.update();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(document, zi, ne, X.dataApiKeydownHandler), d.on(document, zi, Pe, X.dataApiKeydownHandler), d.on(document, io, X.clearMenus), d.on(document, so, X.clearMenus), this._didInit = !0);\n    }\n    _completeHide(t) {\n        this._fadeOutAnimate && this._fadeOutAnimate.playState === \"running\" || d.trigger(this._element, Zr, t).defaultPrevented || (\"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((s)=>d.off(s, \"mouseover\", me)), this._animationCanPlay && (this._fadeOutAnimate = this._menu.animate(Eo, {\n            ...qi,\n            duration: this._config.animationDuration\n        })), setTimeout(()=>{\n            this._popper && this._popper.destroy(), this._menu.removeAttribute(`data-twe-dropdown-${it}`), this._element.removeAttribute(`data-twe-dropdown-${it}`), this._element.setAttribute(\"aria-expanded\", \"false\"), E.removeDataAttribute(this._menu, \"popper\"), d.trigger(this._element, Jr, t);\n        }, this._animationCanPlay ? this._config.animationDuration : 0));\n    }\n    _getConfig(t) {\n        if (t = {\n            ...this.constructor.Default,\n            ...E.getDataAttributes(this._element),\n            ...t\n        }, R(ke, t, this.constructor.DefaultType), typeof t.reference == \"object\" && !St(t.reference) && typeof t.reference.getBoundingClientRect != \"function\") throw new TypeError(`${ke.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`);\n        return t;\n    }\n    _createPopper(t) {\n        if (typeof bn > \"u\") throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n        let e = this._element;\n        this._config.reference === \"parent\" ? e = t : St(this._config.reference) ? e = rt(this._config.reference) : typeof this._config.reference == \"object\" && (e = this._config.reference);\n        const s = this._getPopperConfig(), n = s.modifiers.find((r)=>r.name === \"applyStyles\" && r.enabled === !1);\n        this._popper = Ti(e, this._menu, s), n && E.setDataAttribute(this._menu, \"popper\", \"static\");\n    }\n    _isShown(t = this._element) {\n        return t.dataset[`tweDropdown${it.charAt(0).toUpperCase() + it.slice(1)}`] === \"\";\n    }\n    _getMenuElement() {\n        return h.next(this._element, Pe)[0];\n    }\n    _getPlacement() {\n        const t = this._element.parentNode;\n        if (t.dataset.tweDropdownPosition === ro) return _o;\n        if (t.dataset.tweDropdownPosition === oo) return go;\n        const e = t.dataset.tweDropdownAlignment === \"end\";\n        return t.dataset.tweDropdownPosition === no ? e ? ho : uo : e ? po : fo;\n    }\n    _detectNavbar() {\n        return this._element.closest(ao) !== null;\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _getPopperConfig() {\n        const t = {\n            placement: this._getPlacement(),\n            modifiers: [\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                }\n            ]\n        };\n        return this._config.display === \"static\" && (t.modifiers = [\n            {\n                name: \"applyStyles\",\n                enabled: !1\n            }\n        ]), {\n            ...t,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(t) : this._config.popperConfig\n        };\n    }\n    _selectMenuItem({ key: t, target: e }) {\n        const s = h.find(co, this._menu).filter(kt);\n        s.length && Bs(s, e, t === fe, !s.includes(e)).focus();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = X.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static clearMenus(t) {\n        if (t && (t.button === Gr || t.type === \"keyup\" && t.key !== Ki)) return;\n        const e = h.find(ne);\n        for(let s = 0, n = e.length; s < n; s++){\n            const r = X.getInstance(e[s]);\n            if (!r || r._config.autoClose === !1 || !r._isShown()) continue;\n            const o = {\n                relatedTarget: r._element\n            };\n            if (t) {\n                const a = t.composedPath(), l = a.includes(r._menu);\n                if (a.includes(r._element) || r._config.autoClose === \"inside\" && !l || r._config.autoClose === \"outside\" && l || r._menu.contains(t.target) && (t.type === \"keyup\" && t.key === Ki || /input|select|option|textarea|form/i.test(t.target.tagName))) continue;\n                t.type === \"click\" && (o.clickEvent = t);\n            }\n            r._completeHide(o);\n        }\n    }\n    static getParentFromElement(t) {\n        return nt(t) || t.parentNode;\n    }\n    static dataApiKeydownHandler(t) {\n        if (/input|textarea/i.test(t.target.tagName) ? t.key === Yi || t.key !== he && (t.key !== fe && t.key !== ni || t.target.closest(Pe)) : !Qr.test(t.key)) return;\n        const e = this.dataset[`tweDropdown${it.charAt(0).toUpperCase() + it.slice(1)}`] === \"\";\n        if (!e && t.key === he || (t.preventDefault(), t.stopPropagation(), gt(this))) return;\n        const s = this.matches(ne) ? this : h.prev(this, ne)[0], n = X.getOrCreateInstance(s);\n        if (t.key === he) {\n            n.hide();\n            return;\n        }\n        if (t.key === ni || t.key === fe) {\n            e || n.show(), n._selectMenuItem(t);\n            return;\n        }\n        (!e || t.key === Yi) && X.clearMenus();\n    }\n}\nconst Me = \"collapse\", wn = \"twe.collapse\", Te = `.${wn}`, Xi = {\n    toggle: !0,\n    parent: null\n}, wo = {\n    toggle: \"boolean\",\n    parent: \"(null|element)\"\n}, To = `show${Te}`, yo = `shown${Te}`, Ao = `hide${Te}`, Co = `hidden${Te}`, He = \"data-twe-collapse-show\", Gi = \"data-twe-collapse-collapsed\", re = \"data-twe-collapse-collapsing\", Oo = \"data-twe-collapse-horizontal\", Nt = \"data-twe-collapse-item\", Qi = `:scope [${Nt}] [${Nt}]`, Do = \"width\", No = \"height\", So = \"[data-twe-collapse-item][data-twe-collapse-show], [data-twe-collapse-item][data-twe-collapse-collapsing]\", Zi = \"[data-twe-collapse-init]\", Lo = {\n    visible: \"!visible\",\n    hidden: \"hidden\",\n    baseTransition: \"overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsing: \"h-0 transition-[height] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\",\n    collapsingHorizontal: \"w-0 h-auto transition-[width] overflow-hidden duration-[350ms] ease-[cubic-bezier(0.25,0.1,0.25,1.0)] motion-reduce:transition-none\"\n}, $o = {\n    visible: \"string\",\n    hidden: \"string\",\n    baseTransition: \"string\",\n    collapsing: \"string\",\n    collapsingHorizontal: \"string\"\n};\nclass pe extends tt {\n    constructor(t, e, s){\n        super(t), this._isTransitioning = !1, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._triggerArray = [];\n        const n = h.find(Zi);\n        for(let r = 0, o = n.length; r < o; r++){\n            const a = n[r], l = ci(a), u = h.find(l).filter((c)=>c === this._element);\n            l !== null && u.length && (this._selector = l, this._triggerArray.push(a));\n        }\n        this._initializeChildren(), this._config.parent || this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()), this._config.toggle && this.toggle();\n    }\n    // Getters\n    static get Default() {\n        return Xi;\n    }\n    static get NAME() {\n        return Me;\n    }\n    // Public\n    toggle() {\n        this._isShown() ? this.hide() : this.show();\n    }\n    show() {\n        if (this._isTransitioning || this._isShown()) return;\n        let t = [], e;\n        if (this._config.parent) {\n            const c = h.find(Qi, this._config.parent);\n            t = h.find(So, this._config.parent).filter((f)=>!c.includes(f));\n        }\n        const s = h.findOne(this._selector);\n        if (t.length) {\n            const c = t.find((f)=>s !== f);\n            if (e = c ? pe.getInstance(c) : null, e && e._isTransitioning) return;\n        }\n        if (d.trigger(this._element, To).defaultPrevented) return;\n        t.forEach((c)=>{\n            s !== c && pe.getOrCreateInstance(c, {\n                toggle: !1\n            }).hide(), e || V.setData(c, wn, null);\n        });\n        const r = this._getDimension(), o = r === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        E.removeClass(this._element, this._classes.visible), E.removeClass(this._element, this._classes.hidden), E.addClass(this._element, o), this._element.removeAttribute(Nt), this._element.setAttribute(re, \"\"), this._element.style[r] = 0, this._addAriaAndCollapsedClass(this._triggerArray, !0), this._isTransitioning = !0;\n        const a = ()=>{\n            this._isTransitioning = !1, E.removeClass(this._element, this._classes.hidden), E.removeClass(this._element, o), E.addClass(this._element, this._classes.visible), this._element.removeAttribute(re), this._element.setAttribute(Nt, \"\"), this._element.setAttribute(He, \"\"), this._element.style[r] = \"\", d.trigger(this._element, yo);\n        }, u = `scroll${r[0].toUpperCase() + r.slice(1)}`;\n        this._queueCallback(a, this._element, !0), this._element.style[r] = `${this._element[u]}px`;\n    }\n    hide() {\n        if (this._isTransitioning || !this._isShown() || d.trigger(this._element, Ao).defaultPrevented) return;\n        const e = this._getDimension(), s = e === \"height\" ? this._classes.collapsing : this._classes.collapsingHorizontal;\n        this._element.style[e] = `${this._element.getBoundingClientRect()[e]}px`, Xt(this._element), E.addClass(this._element, s), E.removeClass(this._element, this._classes.visible), E.removeClass(this._element, this._classes.hidden), this._element.setAttribute(re, \"\"), this._element.removeAttribute(Nt), this._element.removeAttribute(He);\n        const n = this._triggerArray.length;\n        for(let o = 0; o < n; o++){\n            const a = this._triggerArray[o], l = nt(a);\n            l && !this._isShown(l) && this._addAriaAndCollapsedClass([\n                a\n            ], !1);\n        }\n        this._isTransitioning = !0;\n        const r = ()=>{\n            this._isTransitioning = !1, E.removeClass(this._element, s), E.addClass(this._element, this._classes.visible), E.addClass(this._element, this._classes.hidden), this._element.removeAttribute(re), this._element.setAttribute(Nt, \"\"), d.trigger(this._element, Co);\n        };\n        this._element.style[e] = \"\", this._queueCallback(r, this._element, !0);\n    }\n    _isShown(t = this._element) {\n        return t.hasAttribute(He);\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ...Xi,\n            ...E.getDataAttributes(this._element),\n            ...t\n        }, t.toggle = !!t.toggle, t.parent = rt(t.parent), R(Me, t, wo), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Lo,\n            ...e,\n            ...t\n        }, R(Me, t, $o), t;\n    }\n    _getDimension() {\n        return this._element.hasAttribute(Oo) ? Do : No;\n    }\n    _initializeChildren() {\n        if (!this._config.parent) return;\n        const t = h.find(Qi, this._config.parent);\n        h.find(Zi, this._config.parent).filter((e)=>!t.includes(e)).forEach((e)=>{\n            const s = nt(e);\n            s && this._addAriaAndCollapsedClass([\n                e\n            ], this._isShown(s));\n        });\n    }\n    _addAriaAndCollapsedClass(t, e) {\n        t.length && t.forEach((s)=>{\n            e ? s.removeAttribute(Gi) : s.setAttribute(`${Gi}`, \"\"), s.setAttribute(\"aria-expanded\", e);\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = {};\n            typeof t == \"string\" && /show|hide/.test(t) && (e.toggle = !1);\n            const s = pe.getOrCreateInstance(this, e);\n            if (typeof t == \"string\") {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t]();\n            }\n        });\n    }\n}\nconst Ji = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\", ts = \".sticky-top\";\nclass ri {\n    constructor(){\n        this._element = document.body;\n    }\n    getWidth() {\n        const t = document.documentElement.clientWidth;\n        return Math.abs(window.innerWidth - t);\n    }\n    hide() {\n        const t = this.getWidth();\n        this._disableOverFlow(), this._setElementAttributes(this._element, \"paddingRight\", (e)=>e + t), this._setElementAttributes(Ji, \"paddingRight\", (e)=>e + t), this._setElementAttributes(ts, \"marginRight\", (e)=>e - t);\n    }\n    _disableOverFlow() {\n        this._saveInitialAttribute(this._element, \"overflow\"), this._element.style.overflow = \"hidden\";\n    }\n    _setElementAttributes(t, e, s) {\n        const n = this.getWidth(), r = (o)=>{\n            if (o !== this._element && window.innerWidth > o.clientWidth + n) return;\n            this._saveInitialAttribute(o, e);\n            const a = window.getComputedStyle(o)[e];\n            o.style[e] = `${s(Number.parseFloat(a))}px`;\n        };\n        this._applyManipulationCallback(t, r);\n    }\n    reset() {\n        this._resetElementAttributes(this._element, \"overflow\"), this._resetElementAttributes(this._element, \"paddingRight\"), this._resetElementAttributes(Ji, \"paddingRight\"), this._resetElementAttributes(ts, \"marginRight\");\n    }\n    _saveInitialAttribute(t, e) {\n        const s = t.style[e];\n        s && E.setDataAttribute(t, e, s);\n    }\n    _resetElementAttributes(t, e) {\n        const s = (n)=>{\n            const r = E.getDataAttribute(n, e);\n            typeof r > \"u\" ? n.style.removeProperty(e) : (E.removeDataAttribute(n, e), n.style[e] = r);\n        };\n        this._applyManipulationCallback(t, s);\n    }\n    _applyManipulationCallback(t, e) {\n        St(t) ? e(t) : h.find(t, this._element).forEach(e);\n    }\n    isOverflowing() {\n        return this.getWidth() > 0;\n    }\n}\nconst Io = {\n    isVisible: !0,\n    // if false, we use the backdrop helper without adding any element to the dom\n    isAnimated: !1,\n    rootElement: \"body\",\n    // give the choice to place backdrop under different elements\n    clickCallback: null,\n    backdropClasses: null\n}, Ro = {\n    isVisible: \"boolean\",\n    isAnimated: \"boolean\",\n    rootElement: \"(element|string)\",\n    clickCallback: \"(function|null)\",\n    backdropClasses: \"(array|string|null)\"\n}, Tn = \"backdrop\", es = `mousedown.twe.${Tn}`;\nclass yn {\n    constructor(t){\n        this._config = this._getConfig(t), this._isAppended = !1, this._element = null;\n    }\n    show(t) {\n        if (!this._config.isVisible) {\n            _t(t);\n            return;\n        }\n        this._append(), this._config.isAnimated && Xt(this._getElement());\n        const e = this._config.backdropClasses || [\n            \"opacity-50\",\n            \"transition-all\",\n            \"duration-300\",\n            \"ease-in-out\",\n            \"fixed\",\n            \"top-0\",\n            \"left-0\",\n            \"z-[1040]\",\n            \"bg-black\",\n            \"w-screen\",\n            \"h-screen\"\n        ];\n        E.removeClass(this._getElement(), \"opacity-0\"), E.addClass(this._getElement(), e), this._element.setAttribute(\"data-twe-backdrop-show\", \"\"), this._emulateAnimation(()=>{\n            _t(t);\n        });\n    }\n    hide(t) {\n        if (!this._config.isVisible) {\n            _t(t);\n            return;\n        }\n        this._element.removeAttribute(\"data-twe-backdrop-show\"), this._getElement().classList.add(\"opacity-0\"), this._getElement().classList.remove(\"opacity-50\"), this._emulateAnimation(()=>{\n            this.dispose(), _t(t);\n        });\n    }\n    update(t = {}) {\n        this._config = this._getConfig({\n            ...this._config,\n            ...t\n        });\n    }\n    // Private\n    _getElement() {\n        if (!this._element) {\n            const t = document.createElement(\"div\");\n            this._element = t;\n        }\n        return this._element;\n    }\n    _getConfig(t) {\n        return t = {\n            ...Io,\n            ...typeof t == \"object\" ? t : {}\n        }, t.rootElement = rt(t.rootElement), R(Tn, t, Ro), t;\n    }\n    _append() {\n        this._isAppended || (this._config.rootElement.append(this._getElement()), d.on(this._getElement(), es, ()=>{\n            _t(this._config.clickCallback);\n        }), this._isAppended = !0);\n    }\n    dispose() {\n        this._isAppended && (d.off(this._element, es), this._element.remove(), this._isAppended = !1);\n    }\n    _emulateAnimation(t) {\n        Ws(t, this._getElement(), this._config.isAnimated);\n    }\n}\nclass An {\n    constructor(t, e = {}, s){\n        this._element = t, this._toggler = s, this._event = e.event || \"blur\", this._condition = e.condition || (()=>!0), this._selector = e.selector || 'button, a, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])', this._onlyVisible = e.onlyVisible || !1, this._focusableElements = [], this._firstElement = null, this._lastElement = null, this.handler = (n)=>{\n            this._condition(n) && !n.shiftKey && n.target === this._lastElement ? (n.preventDefault(), this._firstElement.focus()) : this._condition(n) && n.shiftKey && n.target === this._firstElement && (n.preventDefault(), this._lastElement.focus());\n        };\n    }\n    trap() {\n        this._setElements(), this._init(), this._setFocusTrap();\n    }\n    disable() {\n        this._focusableElements.forEach((t)=>{\n            t.removeEventListener(this._event, this.handler);\n        }), this._toggler && this._toggler.focus();\n    }\n    update() {\n        this._setElements(), this._setFocusTrap();\n    }\n    _init() {\n        const t = (e)=>{\n            !this._firstElement || e.key !== \"Tab\" || this._focusableElements.includes(e.target) || (e.preventDefault(), this._firstElement.focus(), window.removeEventListener(\"keydown\", t));\n        };\n        window.addEventListener(\"keydown\", t);\n    }\n    _filterVisible(t) {\n        return t.filter((e)=>{\n            if (!kt(e)) return !1;\n            const s = h.parents(e, \"*\");\n            for(let n = 0; n < s.length; n++){\n                const r = window.getComputedStyle(s[n]);\n                if (r && (r.display === \"none\" || r.visibility === \"hidden\")) return !1;\n            }\n            return !0;\n        });\n    }\n    _setElements() {\n        const t = h.find(this._selector, this._element);\n        this._focusableElements = t.filter((e)=>{\n            const s = e.getAttribute(\"data-twe-disabled\") === \"true\" || e.hasAttribute(\"disabled\");\n            return e.disabled || s ? null : e;\n        }), this._onlyVisible && (this._focusableElements = this._filterVisible(this._focusableElements)), this._firstElement = this._focusableElements[0], this._lastElement = this._focusableElements[this._focusableElements.length - 1];\n    }\n    _setFocusTrap() {\n        this._focusableElements.forEach((t, e)=>{\n            e === this._focusableElements.length - 1 || e === 0 ? t.addEventListener(this._event, this.handler) : t.removeEventListener(this._event, this.handler);\n        });\n    }\n}\nlet is = [];\nconst Cn = (i, t = \"hide\")=>{\n    const e = `click.dismiss${i.EVENT_KEY}`, s = i.NAME;\n    is.includes(s) || (is.push(s), d.on(document, e, `[data-twe-${s}-dismiss]`, function(n) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && n.preventDefault(), gt(this)) return;\n        const r = nt(this) || this.closest(`.${s}`) || this.closest(`[data-twe-${s}-init]`);\n        if (!r) return;\n        i.getOrCreateInstance(r)[t]();\n    }));\n}, xo = 9, ss = \"offcanvas\", ko = \"twe.offcanvas\", Mt = `.${ko}`, Po = \".data-api\", Mo = `load${Mt}${Po}`, Ho = \"Escape\", ns = {\n    backdrop: !0,\n    keyboard: !0,\n    scroll: !1\n}, Vo = {\n    backdrop: \"boolean\",\n    keyboard: \"boolean\",\n    scroll: \"boolean\"\n}, rs = \"show\", Wo = \"[data-twe-offcanvas-init][data-twe-offcanvas-show]\", Bo = `show${Mt}`, jo = `shown${Mt}`, Uo = `hide${Mt}`, Fo = `hidden${Mt}`, Yo = `keydown.dismiss${Mt}`;\nclass _e extends tt {\n    constructor(t, e){\n        super(t), this._config = this._getConfig(e), this._isShown = !1, this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._addEventListeners(), this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return ss;\n    }\n    static get Default() {\n        return ns;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        if (this._isShown || d.trigger(this._element, Bo, {\n            relatedTarget: t\n        }).defaultPrevented) return;\n        this._isShown = !0, this._element.style.visibility = \"visible\", this._backdrop.show(), this._config.scroll || new ri().hide(), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`data-twe-offcanvas-${rs}`, \"\");\n        const s = ()=>{\n            this._config.scroll || this._focustrap.trap(), d.trigger(this._element, jo, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(s, this._element, !0);\n    }\n    hide() {\n        if (!this._isShown || d.trigger(this._element, Uo).defaultPrevented) return;\n        this._focustrap.disable(), this._element.blur(), this._isShown = !1, this._element.removeAttribute(`data-twe-offcanvas-${rs}`), this._backdrop.hide();\n        const e = ()=>{\n            this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._element.style.visibility = \"hidden\", this._config.scroll || new ri().reset(), d.trigger(this._element, Fo);\n        };\n        this._queueCallback(e, this._element, !0);\n    }\n    dispose() {\n        this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(window, Mo, ()=>h.find(Wo).forEach((t)=>_e.getOrCreateInstance(t).show())), this._didInit = !0, Cn(_e));\n    }\n    _getConfig(t) {\n        return t = {\n            ...ns,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(ss, t, Vo), t;\n    }\n    _initializeBackDrop() {\n        return new yn({\n            isVisible: this._config.backdrop,\n            isAnimated: !0,\n            rootElement: this._element.parentNode,\n            clickCallback: ()=>this.hide()\n        });\n    }\n    _initializeFocusTrap() {\n        return new An(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.keyCode === xo,\n            onlyVisible: !0\n        });\n    }\n    _addEventListeners() {\n        d.on(this._element, Yo, (t)=>{\n            this._config.keyboard && t.key === Ho && this.hide();\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = _e.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (e[t] === void 0 || t.startsWith(\"_\") || t === \"constructor\") throw new TypeError(`No method named \"${t}\"`);\n                e[t](this);\n            }\n        });\n    }\n}\nconst Ve = \"carousel\", Ko = \"twe.carousel\", U = `.${Ko}`, On = \".data-api\", zo = \"ArrowLeft\", qo = \"ArrowRight\", Xo = 500, Go = 40, os = {\n    interval: 5e3,\n    keyboard: !0,\n    ride: !1,\n    pause: \"hover\",\n    wrap: !0,\n    touch: !0\n}, Qo = {\n    interval: \"(number|boolean)\",\n    keyboard: \"boolean\",\n    ride: \"(boolean|string)\",\n    pause: \"(string|boolean)\",\n    wrap: \"boolean\",\n    touch: \"boolean\"\n}, Zo = {\n    pointer: \"touch-pan-y\",\n    block: \"!block\",\n    visible: \"data-[twe-carousel-fade]:opacity-100 data-[twe-carousel-fade]:z-[1]\",\n    invisible: \"data-[twe-carousel-fade]:z-0 data-[twe-carousel-fade]:opacity-0 data-[twe-carousel-fade]:duration-[600ms] data-[twe-carousel-fade]:delay-600\",\n    slideRight: \"translate-x-full\",\n    slideLeft: \"-translate-x-full\"\n}, Jo = {\n    pointer: \"string\",\n    block: \"string\",\n    visible: \"string\",\n    invisible: \"string\",\n    slideRight: \"string\",\n    slideLeft: \"string\"\n}, ht = \"next\", ft = \"prev\", pt = \"left\", Yt = \"right\", ta = {\n    [zo]: Yt,\n    [qo]: pt\n}, ea = `slide${U}`, We = `slid${U}`, ia = `keydown${U}`, sa = `mouseenter${U}`, na = `mouseleave${U}`, ra = `touchstart${U}`, oa = `touchmove${U}`, aa = `touchend${U}`, la = `pointerdown${U}`, ca = `pointerup${U}`, da = `dragstart${U}`, as = `load${U}${On}`, ls = `click${U}${On}`, Wt = \"data-twe-carousel-active\", ua = \"data-twe-carousel-item-end\", Be = \"data-twe-carousel-item-start\", ha = \"data-twe-carousel-item-next\", fa = \"data-twe-carousel-item-prev\", pa = \"data-twe-carousel-pointer-event\", _a = \"[data-twe-carousel-init]\", Dn = \"[data-twe-carousel-active]\", Ai = \"[data-twe-carousel-item]\", Tt = `${Dn}${Ai}`, ga = `${Ai} img`, ma = \"[data-twe-carousel-item-next], [data-twe-carousel-item-prev]\", Ea = \"[data-twe-carousel-indicators]\", va = \"[data-twe-target]\", cs = \"[data-twe-slide], [data-twe-slide-to]\", ba = \"touch\", wa = \"pen\";\nclass Z extends tt {\n    constructor(t, e, s){\n        super(t), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._indicatorsElement = h.findOne(Ea, this._element), this._touchSupported = \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0, this._pointerEvent = !!window.PointerEvent, this._setActiveElementClass(), this._addEventListeners(), this._didInit = !1, this._init(), this._config.ride === \"carousel\" && this.cycle();\n    }\n    // Getters\n    static get Default() {\n        return os;\n    }\n    static get NAME() {\n        return Ve;\n    }\n    // Public\n    next() {\n        this._slide(ht);\n    }\n    nextWhenVisible() {\n        !document.hidden && kt(this._element) && this.next();\n    }\n    prev() {\n        this._slide(ft);\n    }\n    pause(t) {\n        t || (this._isPaused = !0), h.findOne(ma, this._element) && (Ps(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;\n    }\n    cycle(t) {\n        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config && this._config.interval && !this._isPaused && (this._updateInterval(), this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));\n    }\n    to(t) {\n        this._activeElement = h.findOne(Tt, this._element);\n        const e = this._getItemIndex(this._activeElement);\n        if (t > this._items.length - 1 || t < 0) return;\n        if (this._isSliding) {\n            d.one(this._element, We, ()=>this.to(t));\n            return;\n        }\n        if (e === t) {\n            this.pause(), this.cycle();\n            return;\n        }\n        const s = t > e ? ht : ft;\n        this._slide(s, this._items[t]);\n    }\n    dispose() {\n        d.off(document, ls, cs, Z.dataApiClickHandler), d.off(window, as), super.dispose();\n    }\n    // Private\n    _init() {\n        this._didInit || (d.on(document, ls, cs, Z.dataApiClickHandler), d.on(window, as, ()=>{\n            const t = h.find(_a);\n            for(let e = 0, s = t.length; e < s; e++)Z.carouselInterface(t[e], Z.getInstance(t[e]));\n        }), this._didInit = !0);\n    }\n    _getConfig(t) {\n        return t = {\n            ...os,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Ve, t, Qo), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Zo,\n            ...e,\n            ...t\n        }, R(Ve, t, Jo), t;\n    }\n    _enableCycle() {\n        if (this._config.ride) {\n            if (this._isSliding) {\n                d.one(this._element, We, ()=>this.cycle());\n                return;\n            }\n            this.cycle();\n        }\n    }\n    _applyInitialClasses() {\n        const t = h.findOne(Tt, this._element);\n        t.classList.add(this._classes.block, ...this._classes.visible.split(\" \")), this._setActiveIndicatorElement(t);\n    }\n    _handleSwipe() {\n        const t = Math.abs(this.touchDeltaX);\n        if (t <= Go) return;\n        const e = t / this.touchDeltaX;\n        this.touchDeltaX = 0, e && this._slide(e > 0 ? Yt : pt);\n    }\n    _setActiveElementClass() {\n        this._activeElement = h.findOne(Tt, this._element), E.addClass(this._activeElement, \"hidden\");\n    }\n    _addEventListeners() {\n        this._config.keyboard && d.on(this._element, ia, (t)=>this._keydown(t)), this._config.pause === \"hover\" && (d.on(this._element, sa, (t)=>this.pause(t)), d.on(this._element, na, (t)=>this._enableCycle(t))), this._config.touch && this._touchSupported && this._addTouchEventListeners(), this._applyInitialClasses();\n    }\n    _addTouchEventListeners() {\n        const t = (r)=>this._pointerEvent && (r.pointerType === wa || r.pointerType === ba), e = (r)=>{\n            t(r) ? this.touchStartX = r.clientX : this._pointerEvent || (this.touchStartX = r.touches[0].clientX);\n        }, s = (r)=>{\n            this.touchDeltaX = r.touches && r.touches.length > 1 ? 0 : r.touches[0].clientX - this.touchStartX;\n        }, n = (r)=>{\n            t(r) && (this.touchDeltaX = r.clientX - this.touchStartX), this._handleSwipe(), this._config.pause === \"hover\" && (this.pause(), this.touchTimeout && clearTimeout(this.touchTimeout), this.touchTimeout = setTimeout((o)=>this._enableCycle(o), Xo + this._config.interval));\n        };\n        h.find(ga, this._element).forEach((r)=>{\n            d.on(r, da, (o)=>o.preventDefault());\n        }), this._pointerEvent ? (d.on(this._element, la, (r)=>e(r)), d.on(this._element, ca, (r)=>n(r)), this._element.classList.add(this._classes.pointer), this._element.setAttribute(`${pa}`, \"\")) : (d.on(this._element, ra, (r)=>e(r)), d.on(this._element, oa, (r)=>s(r)), d.on(this._element, aa, (r)=>n(r)));\n    }\n    _keydown(t) {\n        if (/input|textarea/i.test(t.target.tagName)) return;\n        const e = ta[t.key];\n        e && (t.preventDefault(), this._slide(e));\n    }\n    _getItemIndex(t) {\n        return this._items = t && t.parentNode ? h.find(Ai, t.parentNode) : [], this._items.indexOf(t);\n    }\n    _getItemByOrder(t, e) {\n        const s = t === ht;\n        return Bs(this._items, e, s, this._config.wrap);\n    }\n    _triggerSlideEvent(t, e) {\n        const s = this._getItemIndex(t), n = this._getItemIndex(h.findOne(Tt, this._element));\n        return d.trigger(this._element, ea, {\n            relatedTarget: t,\n            direction: e,\n            from: n,\n            to: s\n        });\n    }\n    _setActiveIndicatorElement(t) {\n        if (this._indicatorsElement) {\n            const e = h.findOne(Dn, this._indicatorsElement);\n            e.removeAttribute(Wt), e.removeAttribute(\"aria-current\"), e.classList.remove(\"!opacity-100\");\n            const s = h.find(va, this._indicatorsElement);\n            for(let n = 0; n < s.length; n++)if (Number.parseInt(s[n].getAttribute(\"data-twe-slide-to\"), 10) === this._getItemIndex(t)) {\n                s[n].setAttribute(`${Wt}`, \"\"), s[n].setAttribute(\"aria-current\", \"true\"), s[n].classList.add(\"!opacity-100\");\n                break;\n            }\n        }\n    }\n    _updateInterval() {\n        const t = this._activeElement || h.findOne(Tt, this._element);\n        if (!t) return;\n        const e = Number.parseInt(t.getAttribute(\"data-twe-interval\"), 10);\n        e ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = e) : this._config.interval = this._config.defaultInterval || this._config.interval;\n    }\n    _slide(t, e) {\n        const s = this._directionToOrder(t), n = h.findOne(Tt, this._element), r = this._getItemIndex(n), o = e || this._getItemByOrder(s, n), a = this._getItemIndex(o), l = !!this._interval, u = s === ht, c = u ? Be : ua, f = u ? ha : fa, v = this._orderToDirection(s), g = c === Be ? this._classes.slideLeft : this._classes.slideRight, O = c !== Be ? this._classes.slideLeft : this._classes.slideRight;\n        if (o && o.hasAttribute(Wt)) {\n            this._isSliding = !1;\n            return;\n        }\n        if (this._isSliding || this._triggerSlideEvent(o, v).defaultPrevented || !n || !o) return;\n        this._isSliding = !0, l && this.pause(), this._setActiveIndicatorElement(o), this._activeElement = o;\n        const A = ()=>{\n            d.trigger(this._element, We, {\n                relatedTarget: o,\n                direction: v,\n                from: r,\n                to: a\n            });\n        };\n        o.setAttribute(`${f}`, \"\"), o.classList.add(this._classes.block, O), Xt(o), n.setAttribute(`${c}`, \"\"), n.classList.add(g, ...this._classes.invisible.split(\" \")), n.classList.remove(...this._classes.visible.split(\" \")), o.setAttribute(`${c}`, \"\"), o.classList.add(...this._classes.visible.split(\" \")), o.classList.remove(this._classes.slideRight, this._classes.slideLeft);\n        const D = ()=>{\n            o.removeAttribute(c), o.removeAttribute(f), o.setAttribute(`${Wt}`, \"\"), n.removeAttribute(Wt), n.classList.remove(g, ...this._classes.invisible.split(\" \"), this._classes.block), n.removeAttribute(f), n.removeAttribute(c), this._isSliding = !1, setTimeout(A, 0);\n        };\n        this._queueCallback(D, n, !0), (l || this._config.ride === !0) && this.cycle();\n    }\n    _directionToOrder(t) {\n        return [\n            Yt,\n            pt\n        ].includes(t) ? M() ? t === pt ? ft : ht : t === pt ? ht : ft : t;\n    }\n    _orderToDirection(t) {\n        return [\n            ht,\n            ft\n        ].includes(t) ? M() ? t === ft ? pt : Yt : t === ft ? Yt : pt : t;\n    }\n    // Static\n    static carouselInterface(t, e) {\n        const s = Z.getOrCreateInstance(t, e);\n        let { _config: n } = s;\n        typeof e == \"object\" && (n = {\n            ...n,\n            ...e\n        });\n        const r = typeof e == \"string\" ? e : e.slide;\n        if (typeof e == \"number\") {\n            s.to(e);\n            return;\n        }\n        if (typeof r == \"string\") {\n            if (typeof s[r] > \"u\") throw new TypeError(`No method named \"${r}\"`);\n            s[r]();\n        } else n.interval && n.ride === !0 && s.pause();\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            let e = Z.getOrCreateInstance(this);\n            if (typeof t == \"number\") {\n                e.to(t);\n                return;\n            }\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n    static dataApiClickHandler(t) {\n        const e = nt(this);\n        if (!e) return;\n        const s = {\n            ...E.getDataAttributes(e),\n            ...E.getDataAttributes(this)\n        }, n = this.getAttribute(\"data-twe-slide-to\");\n        n && (s.interval = !1), Z.carouselInterface(e, s), n && Z.getInstance(e).to(n), t.preventDefault();\n    }\n}\nconst Ta = /* @__PURE__ */ new Set([\n    \"background\",\n    \"cite\",\n    \"href\",\n    \"itemtype\",\n    \"longdesc\",\n    \"poster\",\n    \"src\",\n    \"xlink:href\"\n]), ya = /^aria-[\\w-]*$/i, Aa = /^data-twe-[\\w-]*$/i, Ca = /^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i, Oa = /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[\\d+/a-z]+=*$/i, Da = (i, t)=>{\n    const e = i.nodeName.toLowerCase();\n    if (t.includes(e)) return Ta.has(e) ? !!(Ca.test(i.nodeValue) || Oa.test(i.nodeValue)) : !0;\n    const s = t.filter((n)=>n instanceof RegExp);\n    for(let n = 0, r = s.length; n < r; n++)if (s[n].test(e)) return !0;\n    return !1;\n}, Na = {\n    // Global attributes allowed on any supplied element below.\n    \"*\": [\n        \"class\",\n        \"dir\",\n        \"id\",\n        \"lang\",\n        \"role\",\n        ya,\n        Aa\n    ],\n    a: [\n        \"target\",\n        \"href\",\n        \"title\",\n        \"rel\"\n    ],\n    area: [],\n    b: [],\n    br: [],\n    col: [],\n    code: [],\n    div: [],\n    em: [],\n    hr: [],\n    h1: [],\n    h2: [],\n    h3: [],\n    h4: [],\n    h5: [],\n    h6: [],\n    i: [],\n    img: [\n        \"src\",\n        \"srcset\",\n        \"alt\",\n        \"title\",\n        \"width\",\n        \"height\"\n    ],\n    li: [],\n    ol: [],\n    p: [],\n    pre: [],\n    s: [],\n    small: [],\n    span: [],\n    sub: [],\n    sup: [],\n    strong: [],\n    u: [],\n    ul: []\n};\nfunction ds(i, t, e) {\n    if (!i.length) return i;\n    if (e && typeof e == \"function\") return e(i);\n    const n = new window.DOMParser().parseFromString(i, \"text/html\"), r = [].concat(...n.body.querySelectorAll(\"*\"));\n    for(let o = 0, a = r.length; o < a; o++){\n        const l = r[o], u = l.nodeName.toLowerCase();\n        if (!Object.keys(t).includes(u)) {\n            l.remove();\n            continue;\n        }\n        const c = [].concat(...l.attributes), f = [].concat(t[\"*\"] || [], t[u] || []);\n        c.forEach((v)=>{\n            Da(v, f) || l.removeAttribute(v.nodeName);\n        });\n    }\n    return n.body.innerHTML;\n}\nconst us = \"tooltip\", Sa = \"twe.tooltip\", z = `.${Sa}`, La = \"te-tooltip\", $a = /* @__PURE__ */ new Set([\n    \"sanitize\",\n    \"allowList\",\n    \"sanitizeFn\"\n]), Ia = {\n    animation: \"boolean\",\n    template: \"string\",\n    title: \"(string|element|function)\",\n    trigger: \"string\",\n    delay: \"(number|object)\",\n    html: \"boolean\",\n    selector: \"(string|boolean)\",\n    placement: \"(string|function)\",\n    offset: \"(array|string|function)\",\n    container: \"(string|element|boolean)\",\n    fallbackPlacements: \"array\",\n    boundary: \"(string|element)\",\n    customClass: \"(string|function)\",\n    sanitize: \"boolean\",\n    sanitizeFn: \"(null|function)\",\n    allowList: \"object\",\n    popperConfig: \"(null|object|function)\"\n}, Ra = {\n    AUTO: \"auto\",\n    TOP: \"top\",\n    RIGHT: M() ? \"left\" : \"right\",\n    BOTTOM: \"bottom\",\n    LEFT: M() ? \"right\" : \"left\"\n}, xa = {\n    animation: !0,\n    template: `\n    <div class=\"opacity-0 transition-opacity duration-300 ease-in-out absolute z-[1080] block m-0 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal\" role=\"tooltip\">\n      <div data-twe-tooltip-inner-ref class=\"max-w-[200px] text-sm py-1.5 px-4 text-white text-center bg-[#6d6d6d] rounded\"></div>\n    </div>\n    `,\n    trigger: \"hover focus\",\n    title: \"\",\n    delay: 0,\n    html: !1,\n    selector: !1,\n    placement: \"top\",\n    offset: [\n        0,\n        0\n    ],\n    container: !1,\n    fallbackPlacements: [\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ],\n    boundary: \"clippingParents\",\n    customClass: \"\",\n    sanitize: !0,\n    sanitizeFn: null,\n    allowList: Na,\n    popperConfig: {\n        hide: !0\n    }\n}, ka = {\n    HIDE: `hide${z}`,\n    HIDDEN: `hidden${z}`,\n    SHOW: `show${z}`,\n    SHOWN: `shown${z}`,\n    INSERTED: `inserted${z}`,\n    CLICK: `click${z}`,\n    FOCUSIN: `focusin${z}`,\n    FOCUSOUT: `focusout${z}`,\n    MOUSEENTER: `mouseenter${z}`,\n    MOUSELEAVE: `mouseleave${z}`\n}, Pa = \"fade\", Ma = \"modal\", je = \"show\", Bt = \"show\", Ue = \"out\", hs = \"[data-twe-tooltip-inner-ref]\", fs = `.${Ma}`, ps = \"hide.twe.modal\", jt = \"hover\", Fe = \"focus\", Ha = \"click\", Va = \"manual\";\nclass Qt extends tt {\n    constructor(t, e){\n        if (typeof bn > \"u\") throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n        super(t), this._isEnabled = !0, this._timeout = 0, this._hoverState = \"\", this._activeTrigger = {}, this._popper = null, this._config = this._getConfig(e), this.tip = null, this._setListeners();\n    }\n    // Getters\n    static get Default() {\n        return xa;\n    }\n    static get NAME() {\n        return us;\n    }\n    static get Event() {\n        return ka;\n    }\n    static get DefaultType() {\n        return Ia;\n    }\n    // Public\n    enable() {\n        this._isEnabled = !0;\n    }\n    disable() {\n        this._isEnabled = !1;\n    }\n    toggleEnabled() {\n        this._isEnabled = !this._isEnabled;\n    }\n    toggle(t) {\n        if (this._isEnabled) if (t) {\n            const e = this._initializeOnDelegatedTarget(t);\n            e._activeTrigger.click = !e._activeTrigger.click, e._isWithActiveTrigger() ? e._enter(null, e) : e._leave(null, e);\n        } else {\n            if (this.getTipElement().classList.contains(je)) {\n                this._leave(null, this);\n                return;\n            }\n            this._enter(null, this);\n        }\n    }\n    dispose() {\n        clearTimeout(this._timeout), d.off(this._element.closest(fs), ps, this._hideModalHandler), this.tip && this.tip.remove(), this._disposePopper(), super.dispose();\n    }\n    show() {\n        if (this._element.style.display === \"none\") throw new Error(\"Please use show on visible elements\");\n        if (!(this.isWithContent() && this._isEnabled)) return;\n        const t = d.trigger(this._element, this.constructor.Event.SHOW), e = Ms(this._element), s = e === null ? this._element.ownerDocument.documentElement.contains(this._element) : e.contains(this._element);\n        if (t.defaultPrevented || !s) return;\n        this.constructor.NAME === \"tooltip\" && this.tip && this.getTitle() !== this.tip.querySelector(hs).innerHTML && (this._disposePopper(), this.tip.remove(), this.tip = null);\n        const n = this.getTipElement(), r = Gn(this.constructor.NAME);\n        n.setAttribute(\"id\", r), this._element.setAttribute(\"aria-describedby\", r), this._config.animation && setTimeout(()=>{\n            this.tip.classList.add(\"opacity-100\"), this.tip.classList.remove(\"opacity-0\");\n        }, 100);\n        const o = typeof this._config.placement == \"function\" ? this._config.placement.call(this, n, this._element) : this._config.placement, a = this._getAttachment(o);\n        this._addAttachmentClass(a);\n        const { container: l } = this._config;\n        if (V.setData(n, this.constructor.DATA_KEY, this), this._element.ownerDocument.documentElement.contains(this.tip) || (l.append(n), d.trigger(this._element, this.constructor.Event.INSERTED)), this._popper ? this._popper.update() : this._popper = Ti(this._element, n, this._getPopperConfig(a)), n.getAttribute(\"id\").includes(\"tooltip\")) switch(o){\n            case \"bottom\":\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n            case \"left\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            case \"right\":\n                n.classList.add(\"px-[0.4rem]\");\n                break;\n            default:\n                n.classList.add(\"py-[0.4rem]\");\n                break;\n        }\n        const c = this._resolvePossibleFunction(this._config.customClass);\n        c && n.classList.add(...c.split(\" \")), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((g)=>{\n            d.on(g, \"mouseover\", me);\n        });\n        const f = ()=>{\n            const g = this._hoverState;\n            this._hoverState = null, d.trigger(this._element, this.constructor.Event.SHOWN), g === Ue && this._leave(null, this);\n        }, v = this.tip.classList.contains(\"transition-opacity\");\n        this._queueCallback(f, this.tip, v);\n    }\n    hide() {\n        if (!this._popper) return;\n        const t = this.getTipElement(), e = ()=>{\n            this._isWithActiveTrigger() || (this._hoverState !== Bt && t.remove(), this._cleanTipClass(), this._element.removeAttribute(\"aria-describedby\"), d.trigger(this._element, this.constructor.Event.HIDDEN), this._disposePopper());\n        };\n        if (d.trigger(this._element, this.constructor.Event.HIDE).defaultPrevented) return;\n        t.classList.add(\"opacity-0\"), t.classList.remove(\"opacity-100\"), \"ontouchstart\" in document.documentElement && [].concat(...document.body.children).forEach((r)=>d.off(r, \"mouseover\", me)), this._activeTrigger[Ha] = !1, this._activeTrigger[Fe] = !1, this._activeTrigger[jt] = !1;\n        const n = this.tip.classList.contains(\"opacity-0\");\n        this._queueCallback(e, this.tip, n), this._hoverState = \"\";\n    }\n    update() {\n        this._popper !== null && this._popper.update();\n    }\n    // Protected\n    isWithContent() {\n        return !!this.getTitle();\n    }\n    getTipElement() {\n        if (this.tip) return this.tip;\n        const t = document.createElement(\"div\");\n        t.innerHTML = this._config.template;\n        const e = t.children[0];\n        return this.setContent(e), e.classList.remove(Pa, je), this.tip = e, this.tip;\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), hs);\n    }\n    _sanitizeAndSetContent(t, e, s) {\n        const n = h.findOne(s, t);\n        if (!e && n) {\n            n.remove();\n            return;\n        }\n        this.setElementContent(n, e);\n    }\n    setElementContent(t, e) {\n        if (t !== null) {\n            if (St(e)) {\n                e = rt(e), this._config.html ? e.parentNode !== t && (t.innerHTML = \"\", t.append(e)) : t.textContent = e.textContent;\n                return;\n            }\n            this._config.html ? (this._config.sanitize && (e = ds(e, this._config.allowList, this._config.sanitizeFn)), t.innerHTML = e) : t.textContent = e;\n        }\n    }\n    getTitle() {\n        const t = this._element.getAttribute(\"data-twe-original-title\") || this._config.title;\n        return this._resolvePossibleFunction(t);\n    }\n    updateAttachment(t) {\n        return t === \"right\" ? \"end\" : t === \"left\" ? \"start\" : t;\n    }\n    // Private\n    _initializeOnDelegatedTarget(t, e) {\n        return e || this.constructor.getOrCreateInstance(t.delegateTarget, this._getDelegateConfig());\n    }\n    _getOffset() {\n        const { offset: t } = this._config;\n        return typeof t == \"string\" ? t.split(\",\").map((e)=>Number.parseInt(e, 10)) : typeof t == \"function\" ? (e)=>t(e, this._element) : t;\n    }\n    _resolvePossibleFunction(t) {\n        return typeof t == \"function\" ? t.call(this._element) : t;\n    }\n    _getPopperConfig(t) {\n        const e = {\n            placement: t,\n            modifiers: [\n                {\n                    name: \"flip\",\n                    options: {\n                        fallbackPlacements: this._config.fallbackPlacements\n                    }\n                },\n                {\n                    name: \"offset\",\n                    options: {\n                        offset: this._getOffset()\n                    }\n                },\n                {\n                    name: \"preventOverflow\",\n                    options: {\n                        boundary: this._config.boundary\n                    }\n                },\n                {\n                    name: \"arrow\",\n                    options: {\n                        element: `.${this.constructor.NAME}-arrow`\n                    }\n                },\n                {\n                    name: \"onChange\",\n                    enabled: !0,\n                    phase: \"afterWrite\",\n                    fn: (s)=>this._handlePopperPlacementChange(s)\n                }\n            ],\n            onFirstUpdate: (s)=>{\n                s.options.placement !== s.placement && this._handlePopperPlacementChange(s);\n            }\n        };\n        return {\n            ...e,\n            ...typeof this._config.popperConfig == \"function\" ? this._config.popperConfig(e) : this._config.popperConfig\n        };\n    }\n    _addAttachmentClass(t) {\n        this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`);\n    }\n    _getAttachment(t) {\n        return Ra[t.toUpperCase()];\n    }\n    _setListeners() {\n        this._config.trigger.split(\" \").forEach((e)=>{\n            if (e === \"click\") d.on(this._element, this.constructor.Event.CLICK, this._config.selector, (s)=>this.toggle(s));\n            else if (e !== Va) {\n                const s = e === jt ? this.constructor.Event.MOUSEENTER : this.constructor.Event.FOCUSIN, n = e === jt ? this.constructor.Event.MOUSELEAVE : this.constructor.Event.FOCUSOUT;\n                d.on(this._element, s, this._config.selector, (r)=>this._enter(r)), d.on(this._element, n, this._config.selector, (r)=>this._leave(r));\n            }\n        }), this._hideModalHandler = ()=>{\n            this._element && this.hide();\n        }, d.on(this._element.closest(fs), ps, this._hideModalHandler), this._config.selector ? this._config = {\n            ...this._config,\n            trigger: \"manual\",\n            selector: \"\"\n        } : this._fixTitle();\n    }\n    _fixTitle() {\n        const t = this._element.getAttribute(\"title\"), e = typeof this._element.getAttribute(\"data-twe-original-title\");\n        (t || e !== \"string\") && (this._element.setAttribute(\"data-twe-original-title\", t || \"\"), t && !this._element.getAttribute(\"aria-label\") && !this._element.textContent && this._element.setAttribute(\"aria-label\", t), this._element.setAttribute(\"title\", \"\"));\n    }\n    _enter(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusin\" ? Fe : jt] = !0), e.getTipElement().classList.contains(je) || e._hoverState === Bt) {\n            e._hoverState = Bt;\n            return;\n        }\n        if (clearTimeout(e._timeout), e._hoverState = Bt, !e._config.delay || !e._config.delay.show) {\n            e.show();\n            return;\n        }\n        e._timeout = setTimeout(()=>{\n            e._hoverState === Bt && e.show();\n        }, e._config.delay.show);\n    }\n    _leave(t, e) {\n        if (e = this._initializeOnDelegatedTarget(t, e), t && (e._activeTrigger[t.type === \"focusout\" ? Fe : jt] = e._element.contains(t.relatedTarget)), !e._isWithActiveTrigger()) {\n            if (clearTimeout(e._timeout), e._hoverState = Ue, !e._config.delay || !e._config.delay.hide) {\n                e.hide();\n                return;\n            }\n            e._timeout = setTimeout(()=>{\n                e._hoverState === Ue && e.hide();\n            }, e._config.delay.hide);\n        }\n    }\n    _isWithActiveTrigger() {\n        for(const t in this._activeTrigger)if (this._activeTrigger[t]) return !0;\n        return !1;\n    }\n    _getConfig(t) {\n        const e = E.getDataAttributes(this._element);\n        return Object.keys(e).forEach((s)=>{\n            $a.has(s) && delete e[s];\n        }), t = {\n            ...this.constructor.Default,\n            ...e,\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.container = t.container === !1 ? document.body : rt(t.container), typeof t.delay == \"number\" && (t.delay = {\n            show: t.delay,\n            hide: t.delay\n        }), typeof t.title == \"number\" && (t.title = t.title.toString()), typeof t.content == \"number\" && (t.content = t.content.toString()), R(us, t, this.constructor.DefaultType), t.sanitize && (t.template = ds(t.template, t.allowList, t.sanitizeFn)), t;\n    }\n    _getDelegateConfig() {\n        const t = {};\n        for(const e in this._config)this.constructor.Default[e] !== this._config[e] && (t[e] = this._config[e]);\n        return t;\n    }\n    _cleanTipClass() {\n        const t = this.getTipElement(), e = new RegExp(`(^|\\\\s)${this._getBasicClassPrefix()}\\\\S+`, \"g\"), s = t.getAttribute(\"class\").match(e);\n        s !== null && s.length > 0 && s.map((n)=>n.trim()).forEach((n)=>t.classList.remove(n));\n    }\n    _getBasicClassPrefix() {\n        return La;\n    }\n    _handlePopperPlacementChange(t) {\n        const { state: e } = t;\n        e && (this.tip = e.elements.popper, this._cleanTipClass(), this._addAttachmentClass(this._getAttachment(e.placement)));\n    }\n    _disposePopper() {\n        this._popper && (this._popper.destroy(), this._popper = null);\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Qt.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Wa = \"popover\", Ba = \"twe.popover\", q = `.${Ba}`, ja = \"te-popover\", Ua = {\n    ...Qt.Default,\n    placement: \"right\",\n    offset: [\n        0,\n        8\n    ],\n    trigger: \"click\",\n    content: \"\",\n    template: `\n    <div class=\"opacity-0 transition-opacity duration-150 ease-in-out absolute top-0 left-0 z-[1070] block max-w-[267px] break-words bg-white bg-clip-padding border border-neutral-100 rounded-lg shadow-2 text-sm not-italic font-normal text-left no-underline underline-offset-auto normal-case leading-6 tracking-normal break-normal whitespace-normal dark:border-white/10 dark:bg-surface-dark dark:text-white data-[popper-reference-hidden]:hidden\" role=\"tooltip\">\n      <h3 data-twe-popover-header-ref class=\"py-2 px-4 mb-0 border-b-2 border-neutral-100 rounded-t-lg font-medium empty:hidden dark:border-white/10\"></h3>\n      <div data-twe-popover-body-ref class=\"p-4 text-surface dark:text-white\"></div>\n    </div>\n    `\n}, Fa = {\n    ...Qt.DefaultType,\n    content: \"(string|element|function)\"\n}, Ya = {\n    HIDE: `hide${q}`,\n    HIDDEN: `hidden${q}`,\n    SHOW: `show${q}`,\n    SHOWN: `shown${q}`,\n    INSERTED: `inserted${q}`,\n    CLICK: `click${q}`,\n    FOCUSIN: `focusin${q}`,\n    FOCUSOUT: `focusout${q}`,\n    MOUSEENTER: `mouseenter${q}`,\n    MOUSELEAVE: `mouseleave${q}`\n}, Ka = \"[data-twe-popover-header-ref]\", za = \"[data-twe-popover-body-ref]\";\nclass Nn extends Qt {\n    // Getters\n    static get Default() {\n        return Ua;\n    }\n    static get NAME() {\n        return Wa;\n    }\n    static get Event() {\n        return Ya;\n    }\n    static get DefaultType() {\n        return Fa;\n    }\n    // Overrides\n    isWithContent() {\n        return this.getTitle() || this._getContent();\n    }\n    setContent(t) {\n        this._sanitizeAndSetContent(t, this.getTitle(), Ka), this._sanitizeAndSetContent(t, this._getContent(), za);\n    }\n    // Private\n    _getContent() {\n        return this._resolvePossibleFunction(this._config.content);\n    }\n    _getBasicClassPrefix() {\n        return ja;\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Nn.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Ye = \"scrollspy\", qa = \"twe.scrollspy\", Ci = `.${qa}`, _s = {\n    offset: 10,\n    method: \"auto\",\n    target: \"\"\n}, Xa = {\n    offset: \"number\",\n    method: \"string\",\n    target: \"(string|element)\"\n}, Ga = {\n    active: \"!text-primary font-semibold border-s-[0.125rem] border-solid border-primary\"\n}, Qa = {\n    active: \"string\"\n}, Ke = `activate${Ci}`, Za = `scroll${Ci}`, Kt = \"data-twe-nav-link-active\", Sn = \"data-twe-collapsible-scrollspy-ref\", Ln = \"[data-twe-dropdown-item-ref]\", Ja = \"[data-twe-nav-list-ref]\", oi = \"[data-twe-nav-link-ref]\", tl = \"[data-twe-nav-item-ref]\", $n = \"[data-twe-list-group-item-ref]\", ze = `${oi}, ${$n}, ${Ln}`, el = \"[data-twe-dropdown-ref]\", il = \"[data-twe-dropdown-toggle-ref]\", gs = `[${Sn}]`, sl = `[${Kt}]`, qe = \"ul\", nl = \"maxOffset\", ms = \"position\";\nclass In extends tt {\n    constructor(t, e, s){\n        super(t), this._scrollElement = this._element.tagName === \"BODY\" ? window : this._element, this._config = this._getConfig(e), this._classes = this._getClasses(s), this._offsets = [], this._targets = [], this._collapsibles = [], this._activeTarget = null, this._scrollHeight = 0, d.on(this._scrollElement, Za, ()=>this._process()), this.refresh(), this._process(), this._bindActivateEvent(), this._getCollapsibles(), this._collapsibles.length !== 0 && (this._showSubsection(), this._hideSubsection());\n    }\n    // Getters\n    static get Default() {\n        return _s;\n    }\n    static get NAME() {\n        return Ye;\n    }\n    // Public\n    refresh() {\n        const t = this._scrollElement === this._scrollElement.window ? nl : ms, e = this._config.method === \"auto\" ? t : this._config.method, s = e === ms ? this._getScrollTop() : 0;\n        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), h.find(ze, this._config.target).map((r)=>{\n            const o = ci(r), a = o ? h.findOne(o) : null;\n            if (a) {\n                const l = a.getBoundingClientRect();\n                if (l.width || l.height) return [\n                    E[e](a).top + s,\n                    o\n                ];\n            }\n            return null;\n        }).filter((r)=>r).sort((r, o)=>r[0] - o[0]).forEach((r)=>{\n            this._offsets.push(r[0]), this._targets.push(r[1]);\n        });\n    }\n    dispose() {\n        d.off(this._scrollElement, Ci), d.off(this._scrollElement, Ke), super.dispose();\n    }\n    // Private\n    _getConfig(t) {\n        return t = {\n            ..._s,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" && t ? t : {}\n        }, t.target = rt(t.target) || document.documentElement, R(Ye, t, Xa), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Ga,\n            ...e,\n            ...t\n        }, R(Ye, t, Qa), t;\n    }\n    _getScrollTop() {\n        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\n    }\n    _getScrollHeight() {\n        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\n    }\n    _getOffsetHeight() {\n        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;\n    }\n    _process() {\n        const t = this._getScrollTop() + this._config.offset, e = this._getScrollHeight(), s = this._config.offset + e - this._getOffsetHeight();\n        if (this._scrollHeight !== e && this.refresh(), t >= s) {\n            const n = this._targets[this._targets.length - 1];\n            this._activeTarget !== n && this._activate(n);\n            return;\n        }\n        if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) {\n            this._activeTarget = null, this._clear();\n            return;\n        }\n        for(let n = this._offsets.length; n--;)this._activeTarget !== this._targets[n] && t >= this._offsets[n] && (typeof this._offsets[n + 1] > \"u\" || t < this._offsets[n + 1]) && this._activate(this._targets[n]);\n    }\n    _activate(t) {\n        this._activeTarget = t, this._clear();\n        const e = ze.split(\",\").map((n)=>`${n}[data-twe-target=\"${t}\"],${n}[href=\"${t}\"]`), s = h.findOne(e.join(\",\"), this._config.target);\n        s.classList.add(...this._classes.active.split(\" \")), s.setAttribute(Kt, \"\"), s.getAttribute(Ln) ? h.findOne(il, s.closest(el)).classList.add(...this._classes.active.split(\" \")) : h.parents(s, Ja).forEach((n)=>{\n            h.prev(n, `${oi}, ${$n}`).forEach((r)=>{\n                r.classList.add(...this._classes.active.split(\" \")), r.setAttribute(Kt, \"\");\n            }), h.prev(n, tl).forEach((r)=>{\n                h.children(r, oi).forEach((o)=>o.classList.add(...this._classes.active.split(\" \")));\n            });\n        }), d.trigger(this._scrollElement, Ke, {\n            relatedTarget: t\n        });\n    }\n    _clear() {\n        h.find(ze, this._config.target).filter((t)=>t.classList.contains(...this._classes.active.split(\" \"))).forEach((t)=>{\n            t.classList.remove(...this._classes.active.split(\" \")), t.removeAttribute(Kt);\n        });\n    }\n    _hide(t) {\n        const e = h.findOne(qe, t.parentNode);\n        e.style.overflow = \"hidden\", e.style.height = \"0px\";\n    }\n    _show(t, e) {\n        t.style.height = e;\n    }\n    _getCollapsibles() {\n        const t = h.find(gs);\n        t && t.forEach((e)=>{\n            const s = e.parentNode, n = h.findOne(qe, s), r = n.offsetHeight || n.scrollHeight;\n            this._collapsibles.push({\n                element: n,\n                relatedTarget: e.getAttribute(\"href\"),\n                height: `${r}px`\n            });\n        });\n    }\n    _showSubsection() {\n        h.find(sl).filter((s)=>s.hasAttribute(Sn)).forEach((s)=>{\n            const n = h.findOne(qe, s.parentNode), r = this._collapsibles.find((o)=>o.relatedTarget = s.getAttribute(\"href\")).height;\n            this._show(n, r);\n        });\n    }\n    _hideSubsection() {\n        h.find(gs).filter((e)=>e.hasAttribute(Kt) === !1).forEach((e)=>{\n            this._hide(e);\n        });\n    }\n    _bindActivateEvent() {\n        d.on(this._element, Ke, ()=>{\n            this._showSubsection(), this._hideSubsection();\n        });\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = In.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\nconst Es = \"tab\", rl = \"twe.tab\", ye = `.${rl}`, ol = `hide${ye}`, al = `hidden${ye}`, ll = `show${ye}`, cl = `shown${ye}`, dl = \"data-twe-dropdown-menu-ref\", Ot = \"data-twe-tab-active\", ge = \"data-twe-nav-active\", ul = \"[data-twe-dropdown-ref]\", hl = \"[data-twe-nav-ref]\", vs = `[${Ot}]`, fl = `[${ge}]`, bs = \":scope > li > .active\", pl = \"[data-twe-dropdown-toggle-ref]\", _l = \":scope > [data-twe-dropdown-menu-ref] [data-twe-dropdown-show]\", gl = {\n    show: \"opacity-100\",\n    hide: \"opacity-0\"\n}, ml = {\n    show: \"string\",\n    hide: \"string\"\n};\nclass Rn extends tt {\n    constructor(t, e){\n        super(t), this._classes = this._getClasses(e);\n    }\n    // Getters\n    static get NAME() {\n        return Es;\n    }\n    // Public\n    show() {\n        if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && this._element.getAttribute(ge) === \"\") return;\n        let t;\n        const e = nt(this._element), s = this._element.closest(hl), n = h.findOne(fl, s);\n        if (s) {\n            const l = s.nodeName === \"UL\" || s.nodeName === \"OL\" ? bs : vs;\n            t = h.find(l, s), t = t[t.length - 1];\n        }\n        const r = t ? d.trigger(t, ol, {\n            relatedTarget: this._element\n        }) : null;\n        if (d.trigger(this._element, ll, {\n            relatedTarget: t\n        }).defaultPrevented || r !== null && r.defaultPrevented) return;\n        this._activate(this._element, s, null, n, this._element);\n        const a = ()=>{\n            d.trigger(t, al, {\n                relatedTarget: this._element\n            }), d.trigger(this._element, cl, {\n                relatedTarget: t\n            });\n        };\n        e ? this._activate(e, e.parentNode, a, n, this._element) : a();\n    }\n    // Private\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...gl,\n            ...e,\n            ...t\n        }, R(Es, t, ml), t;\n    }\n    _activate(t, e, s, n, r) {\n        const a = (e && (e.nodeName === \"UL\" || e.nodeName === \"OL\") ? h.find(bs, e) : h.children(e, vs))[0], l = s && a && a.hasAttribute(Ot), u = ()=>this._transitionComplete(t, a, s, n, r);\n        a && l ? (E.removeClass(a, this._classes.show), E.addClass(a, this._classes.hide), this._queueCallback(u, t, !0)) : u();\n    }\n    _transitionComplete(t, e, s, n, r) {\n        if (e && n) {\n            e.removeAttribute(Ot), n.removeAttribute(ge);\n            const a = h.findOne(_l, e.parentNode);\n            a && a.removeAttribute(Ot), e.getAttribute(\"role\") === \"tab\" && e.setAttribute(\"aria-selected\", !1);\n        }\n        t.setAttribute(Ot, \"\"), r.setAttribute(ge, \"\"), t.getAttribute(\"role\") === \"tab\" && t.setAttribute(\"aria-selected\", !0), Xt(t), t.classList.contains(this._classes.hide) && (E.removeClass(t, this._classes.hide), E.addClass(t, this._classes.show));\n        let o = t.parentNode;\n        if (o && o.nodeName === \"LI\" && (o = o.parentNode), o && o.hasAttribute(dl)) {\n            const a = t.closest(ul);\n            a && h.find(pl, a).forEach((l)=>l.setAttribute(Ot, \"\")), t.setAttribute(\"aria-expanded\", !0);\n        }\n        s && s();\n    }\n    // Static\n    static jQueryInterface(t) {\n        return this.each(function() {\n            const e = Rn.getOrCreateInstance(this);\n            if (typeof t == \"string\") {\n                if (typeof e[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                e[t]();\n            }\n        });\n    }\n}\n(()=>{\n    var i = {\n        454: (s, n, r)=>{\n            r.d(n, {\n                Z: ()=>l\n            });\n            var o = r(645), a = r.n(o)()(function(u) {\n                return u[1];\n            });\n            a.push([\n                s.id,\n                \"INPUT:-webkit-autofill,SELECT:-webkit-autofill,TEXTAREA:-webkit-autofill{animation-name:onautofillstart}INPUT:not(:-webkit-autofill),SELECT:not(:-webkit-autofill),TEXTAREA:not(:-webkit-autofill){animation-name:onautofillcancel}@keyframes onautofillstart{}@keyframes onautofillcancel{}\",\n                \"\"\n            ]);\n            const l = a;\n        },\n        645: (s)=>{\n            s.exports = function(n) {\n                var r = [];\n                return r.toString = function() {\n                    return this.map(function(o) {\n                        var a = n(o);\n                        return o[2] ? \"@media \".concat(o[2], \" {\").concat(a, \"}\") : a;\n                    }).join(\"\");\n                }, r.i = function(o, a, l) {\n                    typeof o == \"string\" && (o = [\n                        [\n                            null,\n                            o,\n                            \"\"\n                        ]\n                    ]);\n                    var u = {};\n                    if (l) for(var c = 0; c < this.length; c++){\n                        var f = this[c][0];\n                        f != null && (u[f] = !0);\n                    }\n                    for(var v = 0; v < o.length; v++){\n                        var g = [].concat(o[v]);\n                        l && u[g[0]] || (a && (g[2] ? g[2] = \"\".concat(a, \" and \").concat(g[2]) : g[2] = a), r.push(g));\n                    }\n                }, r;\n            };\n        },\n        810: ()=>{\n            (function() {\n                if (false) { var n, s; }\n            })();\n        },\n        379: (s, n, r)=>{\n            var o, a = function() {\n                var m = {};\n                return function(p) {\n                    if (m[p] === void 0) {\n                        var _ = document.querySelector(p);\n                        if (window.HTMLIFrameElement && _ instanceof window.HTMLIFrameElement) try {\n                            _ = _.contentDocument.head;\n                        } catch  {\n                            _ = null;\n                        }\n                        m[p] = _;\n                    }\n                    return m[p];\n                };\n            }(), l = [];\n            function u(m) {\n                for(var p = -1, _ = 0; _ < l.length; _++)if (l[_].identifier === m) {\n                    p = _;\n                    break;\n                }\n                return p;\n            }\n            function c(m, p) {\n                for(var _ = {}, b = [], w = 0; w < m.length; w++){\n                    var C = m[w], y = p.base ? C[0] + p.base : C[0], N = _[y] || 0, S = \"\".concat(y, \" \").concat(N);\n                    _[y] = N + 1;\n                    var x = u(S), I = {\n                        css: C[1],\n                        media: C[2],\n                        sourceMap: C[3]\n                    };\n                    x !== -1 ? (l[x].references++, l[x].updater(I)) : l.push({\n                        identifier: S,\n                        updater: L(I, p),\n                        references: 1\n                    }), b.push(S);\n                }\n                return b;\n            }\n            function f(m) {\n                var p = document.createElement(\"style\"), _ = m.attributes || {};\n                if (_.nonce === void 0) {\n                    var b = r.nc;\n                    b && (_.nonce = b);\n                }\n                if (Object.keys(_).forEach(function(C) {\n                    p.setAttribute(C, _[C]);\n                }), typeof m.insert == \"function\") m.insert(p);\n                else {\n                    var w = a(m.insert || \"head\");\n                    if (!w) throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n                    w.appendChild(p);\n                }\n                return p;\n            }\n            var v, g = (v = [], function(m, p) {\n                return v[m] = p, v.filter(Boolean).join(`\n`);\n            });\n            function O(m, p, _, b) {\n                var w = _ ? \"\" : b.media ? \"@media \".concat(b.media, \" {\").concat(b.css, \"}\") : b.css;\n                if (m.styleSheet) m.styleSheet.cssText = g(p, w);\n                else {\n                    var C = document.createTextNode(w), y = m.childNodes;\n                    y[p] && m.removeChild(y[p]), y.length ? m.insertBefore(C, y[p]) : m.appendChild(C);\n                }\n            }\n            function T(m, p, _) {\n                var b = _.css, w = _.media, C = _.sourceMap;\n                if (w ? m.setAttribute(\"media\", w) : m.removeAttribute(\"media\"), C && typeof btoa < \"u\" && (b += `\n/*# sourceMappingURL=data:application/json;base64,`.concat(btoa(unescape(encodeURIComponent(JSON.stringify(C)))), \" */\")), m.styleSheet) m.styleSheet.cssText = b;\n                else {\n                    for(; m.firstChild;)m.removeChild(m.firstChild);\n                    m.appendChild(document.createTextNode(b));\n                }\n            }\n            var A = null, D = 0;\n            function L(m, p) {\n                var _, b, w;\n                if (p.singleton) {\n                    var C = D++;\n                    _ = A || (A = f(p)), b = O.bind(null, _, C, !1), w = O.bind(null, _, C, !0);\n                } else _ = f(p), b = T.bind(null, _, p), w = function() {\n                    (function(y) {\n                        if (y.parentNode === null) return !1;\n                        y.parentNode.removeChild(y);\n                    })(_);\n                };\n                return b(m), function(y) {\n                    if (y) {\n                        if (y.css === m.css && y.media === m.media && y.sourceMap === m.sourceMap) return;\n                        b(m = y);\n                    } else w();\n                };\n            }\n            s.exports = function(m, p) {\n                (p = p || {}).singleton || typeof p.singleton == \"boolean\" || (p.singleton = (o === void 0 && (o = !!(window && document && document.all && !window.atob)), o));\n                var _ = c(m = m || [], p);\n                return function(b) {\n                    if (b = b || [], Object.prototype.toString.call(b) === \"[object Array]\") {\n                        for(var w = 0; w < _.length; w++){\n                            var C = u(_[w]);\n                            l[C].references--;\n                        }\n                        for(var y = c(b, p), N = 0; N < _.length; N++){\n                            var S = u(_[N]);\n                            l[S].references === 0 && (l[S].updater(), l.splice(S, 1));\n                        }\n                        _ = y;\n                    }\n                };\n            };\n        }\n    }, t = {};\n    function e(s) {\n        var n = t[s];\n        if (n !== void 0) return n.exports;\n        var r = t[s] = {\n            id: s,\n            exports: {}\n        };\n        return i[s](r, r.exports, e), r.exports;\n    }\n    e.n = (s)=>{\n        var n = s && s.__esModule ? ()=>s.default : ()=>s;\n        return e.d(n, {\n            a: n\n        }), n;\n    }, e.d = (s, n)=>{\n        for(var r in n)e.o(n, r) && !e.o(s, r) && Object.defineProperty(s, r, {\n            enumerable: !0,\n            get: n[r]\n        });\n    }, e.o = (s, n)=>Object.prototype.hasOwnProperty.call(s, n), (()=>{\n        var s = e(379), n = e.n(s), r = e(454);\n        function o(l) {\n            if (!l.hasAttribute(\"autocompleted\")) {\n                l.setAttribute(\"autocompleted\", \"\");\n                var u = new window.CustomEvent(\"onautocomplete\", {\n                    bubbles: !0,\n                    cancelable: !0,\n                    detail: null\n                });\n                l.dispatchEvent(u) || (l.value = \"\");\n            }\n        }\n        function a(l) {\n            l.hasAttribute(\"autocompleted\") && (l.removeAttribute(\"autocompleted\"), l.dispatchEvent(new window.CustomEvent(\"onautocomplete\", {\n                bubbles: !0,\n                cancelable: !1,\n                detail: null\n            })));\n        }\n        n()(r.Z, {\n            insert: \"head\",\n            singleton: !1\n        }), r.Z.locals, e(810), document.addEventListener(\"animationstart\", function(l) {\n            l.animationName === \"onautofillstart\" ? o(l.target) : a(l.target);\n        }, !0), document.addEventListener(\"input\", function(l) {\n            l.inputType !== \"insertReplacementText\" && \"data\" in l ? a(l.target) : o(l.target);\n        }, !0);\n    })();\n})();\nconst Xe = \"input\", oe = \"twe.input\", xn = \"data-twe-input-wrapper-init\", kn = \"data-twe-input-notch-ref\", Pn = \"data-twe-input-notch-leading-ref\", Mn = \"data-twe-input-notch-middle-ref\", El = \"data-twe-input-notch-trailing-ref\", vl = \"data-twe-input-helper-ref\", bl = \"data-twe-input-placeholder-active\", st = \"data-twe-input-state-active\", ws = \"data-twe-input-focused\", Ts = \"data-twe-input-form-counter\", ae = `[${xn}] input`, le = `[${xn}] textarea`, yt = `[${kn}]`, ys = `[${Pn}]`, As = `[${Mn}]`, wl = `[${vl}]`, Tl = {\n    inputFormWhite: !1\n}, yl = {\n    inputFormWhite: \"(boolean)\"\n}, Al = {\n    notch: \"group flex absolute left-0 top-0 w-full max-w-full h-full text-left pointer-events-none\",\n    notchLeading: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none left-0 top-0 h-full w-2 border-e-0 rounded-s-[0.25rem] group-data-[twe-input-focused]:border-e-0 group-data-[twe-input-state-active]:border-e-0\",\n    notchLeadingNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-1 group-data-[twe-input-focused]:border-primary\",\n    notchLeadingWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-1 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    notchMiddle: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow-0 shrink-0 basis-auto w-auto max-w-[calc(100%-1rem)] h-full border-e-0 border-s-0 group-data-[twe-input-focused]:border-x-0 group-data-[twe-input-state-active]:border-x-0 group-data-[twe-input-focused]:border-t group-data-[twe-input-state-active]:border-t group-data-[twe-input-focused]:border-solid group-data-[twe-input-state-active]:border-solid group-data-[twe-input-focused]:border-t-transparent group-data-[twe-input-state-active]:border-t-transparent\",\n    notchMiddleNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-2 group-data-[twe-input-focused]:border-primary\",\n    notchMiddleWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-2 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    notchTrailing: \"pointer-events-none border border-solid box-border bg-transparent transition-all duration-200 ease-linear motion-reduce:transition-none grow h-full border-s-0 rounded-e-[0.25rem] group-data-[twe-input-focused]:border-s-0 group-data-[twe-input-state-active]:border-s-0\",\n    notchTrailingNormal: \"border-secondary-500 dark:border-neutral-400 group-data-[twe-input-focused]:shadow-notch-3 group-data-[twe-input-focused]:border-primary\",\n    notchTrailingWhite: \"border-neutral-200 group-data-[twe-input-focused]:shadow-notch-3 group-data-[twe-input-focused]:shadow-white group-data-[twe-input-focused]:border-white\",\n    counter: \"text-right leading-[1.6]\"\n}, Cl = {\n    notch: \"string\",\n    notchLeading: \"string\",\n    notchLeadingNormal: \"string\",\n    notchLeadingWhite: \"string\",\n    notchMiddle: \"string\",\n    notchMiddleNormal: \"string\",\n    notchMiddleWhite: \"string\",\n    notchTrailing: \"string\",\n    notchTrailingNormal: \"string\",\n    notchTrailingWhite: \"string\",\n    counter: \"string\"\n};\nclass $ {\n    constructor(t, e, s){\n        this._config = this._getConfig(e, t), this._element = t, this._classes = this._getClasses(s), this._label = null, this._labelWidth = 0, this._labelMarginLeft = 0, this._notchLeading = null, this._notchMiddle = null, this._notchTrailing = null, this._initiated = !1, this._helper = null, this._counter = !1, this._counterElement = null, this._maxLength = 0, this._leadingIcon = null, this._element && (V.setData(t, oe, this), this.init());\n    }\n    // Getters\n    static get NAME() {\n        return Xe;\n    }\n    get input() {\n        return h.findOne(\"input\", this._element) || h.findOne(\"textarea\", this._element);\n    }\n    // Public\n    init() {\n        this._initiated || (this._getLabelData(), this._applyDivs(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter(), this._getEvents(), this._initiated = !0);\n    }\n    update() {\n        this._getLabelData(), this._getNotchData(), this._applyNotch(), this._activate(), this._getHelper(), this._getCounter();\n    }\n    forceActive() {\n        this.input.setAttribute(st, \"\"), h.findOne(yt, this.input.parentNode).setAttribute(st, \"\");\n    }\n    forceInactive() {\n        this.input.removeAttribute(st), h.findOne(yt, this.input.parentNode).removeAttribute(st);\n    }\n    dispose() {\n        this._removeBorder(), V.removeData(this._element, oe), this._element = null;\n    }\n    // Private\n    _getConfig(t, e) {\n        return t = {\n            ...Tl,\n            ...E.getDataAttributes(e),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Xe, t, yl), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Al,\n            ...e,\n            ...t\n        }, R(Xe, t, Cl), t;\n    }\n    _getLabelData() {\n        this._label = h.findOne(\"label\", this._element), this._label === null ? this._showPlaceholder() : (this._getLabelWidth(), this._getLabelPositionInInputGroup(), this._toggleDefaultDatePlaceholder());\n    }\n    _getHelper() {\n        this._helper = h.findOne(wl, this._element);\n    }\n    _getCounter() {\n        this._counter = E.getDataAttribute(this.input, \"inputShowcounter\"), this._counter && (this._maxLength = this.input.maxLength, this._showCounter());\n    }\n    _getEvents() {\n        d.on(this._element, \"focus\", \"input\", $.activate(new $())), d.on(this._element, \"input\", \"input\", $.activate(new $())), d.on(this._element, \"blur\", \"input\", $.deactivate(new $())), d.on(this._element, \"focus\", \"textarea\", $.activate(new $())), d.on(this._element, \"input\", \"textarea\", $.activate(new $())), d.on(this._element, \"blur\", \"textarea\", $.deactivate(new $())), d.on(window, \"shown.twe.modal\", (t)=>{\n            h.find(ae, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.update();\n            }), h.find(le, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.update();\n            });\n        }), d.on(window, \"shown.twe.dropdown\", (t)=>{\n            const e = t.target.parentNode.querySelector(\"[data-twe-dropdown-menu-ref]\");\n            e && (h.find(ae, e).forEach((s)=>{\n                const n = $.getInstance(s.parentNode);\n                n && n.update();\n            }), h.find(le, e).forEach((s)=>{\n                const n = $.getInstance(s.parentNode);\n                n && n.update();\n            }));\n        }), d.on(window, \"shown.twe.tab\", (t)=>{\n            let e;\n            t.target.href ? e = t.target.href.split(\"#\")[1] : e = E.getDataAttribute(t.target, \"target\").split(\"#\")[1];\n            const s = h.findOne(`#${e}`);\n            h.find(ae, s).forEach((n)=>{\n                const r = $.getInstance(n.parentNode);\n                r && r.update();\n            }), h.find(le, s).forEach((n)=>{\n                const r = $.getInstance(n.parentNode);\n                r && r.update();\n            });\n        }), d.on(window, \"reset\", (t)=>{\n            h.find(ae, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.forceInactive();\n            }), h.find(le, t.target).forEach((e)=>{\n                const s = $.getInstance(e.parentNode);\n                s && s.forceInactive();\n            });\n        }), d.on(window, \"onautocomplete\", (t)=>{\n            const e = $.getInstance(t.target.parentNode);\n            !e || !t.cancelable || e.forceActive();\n        });\n    }\n    _showCounter() {\n        if (h.find(`[${Ts}]`, this._element).length > 0) return;\n        this._counterElement = document.createElement(\"div\"), E.addClass(this._counterElement, this._classes.counter), this._counterElement.setAttribute(Ts, \"\");\n        const e = this.input.value.length;\n        this._counterElement.innerHTML = `${e} / ${this._maxLength}`, this._helper.appendChild(this._counterElement), this._bindCounter();\n    }\n    _bindCounter() {\n        d.on(this.input, \"input\", ()=>{\n            const t = this.input.value.length;\n            this._counterElement.innerHTML = `${t} / ${this._maxLength}`;\n        });\n    }\n    _toggleDefaultDatePlaceholder(t = this.input) {\n        if (!(t.getAttribute(\"type\") === \"date\")) return;\n        !(document.activeElement === t) && !t.value ? t.style.opacity = 0 : t.style.opacity = 1;\n    }\n    _showPlaceholder() {\n        this.input.setAttribute(bl, \"\");\n    }\n    _getNotchData() {\n        this._notchMiddle = h.findOne(As, this._element), this._notchLeading = h.findOne(ys, this._element);\n    }\n    _getLabelWidth() {\n        this._labelWidth = this._label.clientWidth * 0.8 + 8;\n    }\n    _getLabelPositionInInputGroup() {\n        if (this._labelMarginLeft = 0, !this._element.hasAttribute(\"data-twe-input-group-ref\")) return;\n        const t = this.input, e = h.prev(t, \"[data-twe-input-group-text-ref]\")[0];\n        e === void 0 ? this._labelMarginLeft = 0 : this._labelMarginLeft = e.offsetWidth - 1;\n    }\n    _applyDivs() {\n        const t = this._config.inputFormWhite ? this._classes.notchLeadingWhite : this._classes.notchLeadingNormal, e = this._config.inputFormWhite ? this._classes.notchMiddleWhite : this._classes.notchMiddleNormal, s = this._config.inputFormWhite ? this._classes.notchTrailingWhite : this._classes.notchTrailingNormal, n = h.find(yt, this._element), r = Ft(\"div\");\n        E.addClass(r, this._classes.notch), r.setAttribute(kn, \"\"), this._notchLeading = Ft(\"div\"), E.addClass(this._notchLeading, `${this._classes.notchLeading} ${t}`), this._notchLeading.setAttribute(Pn, \"\"), this._notchMiddle = Ft(\"div\"), E.addClass(this._notchMiddle, `${this._classes.notchMiddle} ${e}`), this._notchMiddle.setAttribute(Mn, \"\"), this._notchTrailing = Ft(\"div\"), E.addClass(this._notchTrailing, `${this._classes.notchTrailing} ${s}`), this._notchTrailing.setAttribute(El, \"\"), !(n.length >= 1) && (r.append(this._notchLeading), r.append(this._notchMiddle), r.append(this._notchTrailing), this._element.append(r), r.dir = \"ltr\");\n    }\n    _applyNotch() {\n        this._notchMiddle.style.width = `${this._labelWidth}px`, this._notchLeading.style.width = `${this._labelMarginLeft + 9}px`, this._label !== null && (this._label.style.marginLeft = `${this._labelMarginLeft}px`);\n    }\n    _removeBorder() {\n        const t = h.findOne(yt, this._element);\n        t && t.remove();\n    }\n    _activate(t) {\n        Vs(()=>{\n            this._getElements(t);\n            const e = t ? t.target : this.input, s = h.findOne(yt, this._element);\n            t && t.type === \"focus\" && s && s.setAttribute(ws, \"\"), e.value !== \"\" && (e.setAttribute(st, \"\"), s && s.setAttribute(st, \"\")), this._toggleDefaultDatePlaceholder(e);\n        });\n    }\n    _getElements(t) {\n        if (t && (this._element = t.target.parentNode, this._label = h.findOne(\"label\", this._element)), t && this._label) {\n            const e = this._labelWidth;\n            this._getLabelData(), e !== this._labelWidth && (this._notchMiddle = h.findOne(As, t.target.parentNode), this._notchLeading = h.findOne(ys, t.target.parentNode), this._applyNotch());\n        }\n    }\n    _deactivate(t) {\n        const e = t ? t.target : this.input;\n        if (e.getAttribute(\"aria-expanded\") === \"true\") return;\n        const s = h.findOne(yt, e.parentNode);\n        s.removeAttribute(ws), e.value === \"\" && (e.removeAttribute(st), s.removeAttribute(st)), this._toggleDefaultDatePlaceholder(e);\n    }\n    static activate(t) {\n        return function(e) {\n            t._activate(e);\n        };\n    }\n    static deactivate(t) {\n        return function(e) {\n            t._deactivate(e);\n        };\n    }\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            let s = V.getData(this, oe);\n            const n = typeof t == \"object\" && t;\n            if (!(!s && /dispose/.test(t)) && (s || (s = new $(this, n)), typeof t == \"string\")) {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t](e);\n            }\n        });\n    }\n    static getInstance(t) {\n        return V.getData(t, oe);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Ol = {\n    property: \"color\",\n    defaultValue: null,\n    inherit: !0\n}, At = (i, t)=>{\n    const { property: e, defaultValue: s, inherit: n } = {\n        ...Ol,\n        ...t\n    }, r = document.createElement(\"div\");\n    r.classList.add(i), document.body.appendChild(r);\n    const a = window.getComputedStyle(r)[e] || s, u = window.getComputedStyle(r.parentElement)[e];\n    return document.body.removeChild(r), !n && u && a === u ? s : a || s;\n}, Ge = \"ripple\", ce = \"twe.ripple\", Dl = \"rgba({{color}}, 0.2) 0, rgba({{color}}, 0.3) 40%, rgba({{color}}, 0.4) 50%, rgba({{color}}, 0.5) 60%, rgba({{color}}, 0) 70%\", Nl = [\n    \"[data-twe-ripple-init]\"\n], de = [\n    0,\n    0,\n    0\n], Sl = [\n    {\n        name: \"primary\",\n        gradientColor: At(\"text-primary\", {\n            defaultValue: \"#3B71CA\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"secondary\",\n        gradientColor: At(\"text-primary-100\", {\n            defaultValue: \"#9FA6B2\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"success\",\n        gradientColor: At(\"text-success\", {\n            defaultValue: \"#14A44D\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"danger\",\n        gradientColor: At(\"text-danger\", {\n            defaultValue: \"#DC4C64\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"warning\",\n        gradientColor: At(\"text-warning\", {\n            defaultValue: \"#E4A11B\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"info\",\n        gradientColor: At(\"text-info\", {\n            defaultValue: \"#54B4D3\",\n            inherit: !1\n        })\n    },\n    {\n        name: \"light\",\n        gradientColor: \"#fbfbfb\"\n    },\n    {\n        name: \"dark\",\n        gradientColor: \"#262626\"\n    }\n], Cs = 0.5, Ll = {\n    rippleCentered: !1,\n    rippleColor: \"\",\n    rippleColorDark: \"\",\n    rippleDuration: \"500ms\",\n    rippleRadius: 0,\n    rippleUnbound: !1\n}, $l = {\n    rippleCentered: \"boolean\",\n    rippleColor: \"string\",\n    rippleColorDark: \"string\",\n    rippleDuration: \"string\",\n    rippleRadius: \"number\",\n    rippleUnbound: \"boolean\"\n}, Il = {\n    ripple: \"relative overflow-hidden inline-block align-bottom\",\n    rippleWave: \"rounded-[50%] opacity-50 pointer-events-none absolute touch-none scale-0 transition-[transform,_opacity] ease-[cubic-bezier(0,0,0.15,1),_cubic-bezier(0,0,0.15,1)] z-[999]\",\n    unbound: \"overflow-visible\"\n}, Rl = {\n    ripple: \"string\",\n    rippleWave: \"string\",\n    unbound: \"string\"\n};\nclass Hn {\n    constructor(t, e, s){\n        this._element = t, this._options = this._getConfig(e), this._classes = this._getClasses(s), this._currentColor = this._options.rippleColor, this._element && (V.setData(t, ce, this), E.addClass(this._element, this._classes.ripple)), this._clickHandler = this._createRipple.bind(this), this._rippleTimer = null, this._isMinWidthSet = !1, this._initialClasses = null, this.init();\n    }\n    // Getters\n    static get NAME() {\n        return Ge;\n    }\n    // Public\n    init() {\n        this._addClickEvent(this._element);\n    }\n    dispose() {\n        V.removeData(this._element, ce), d.off(this._element, \"mousedown\", this._clickHandler), this._element = null, this._options = null;\n    }\n    // Private\n    _autoInit(t) {\n        Nl.forEach((e)=>{\n            h.closest(t.target, e) && (this._element = h.closest(t.target, e));\n        }), this._element.style.minWidth || (E.style(this._element, {\n            \"min-width\": getComputedStyle(this._element).width\n        }), this._isMinWidthSet = !0), this._options = this._getConfig(), this._classes = this._getClasses(), this._initialClasses = [\n            ...this._element.classList\n        ], E.addClass(this._element, this._classes.ripple), this._createRipple(t);\n    }\n    _addClickEvent(t) {\n        d.on(t, \"mousedown\", this._clickHandler);\n    }\n    _createRipple(t) {\n        this._element.className.indexOf(this._classes.ripple) < 0 && E.addClass(this._element, this._classes.ripple);\n        const { layerX: e, layerY: s } = t, n = t.offsetX || e, r = t.offsetY || s, o = this._element.offsetHeight, a = this._element.offsetWidth, l = this._durationToMsNumber(this._options.rippleDuration), u = {\n            offsetX: this._options.rippleCentered ? o / 2 : n,\n            offsetY: this._options.rippleCentered ? a / 2 : r,\n            height: o,\n            width: a\n        }, c = this._getDiameter(u), f = this._options.rippleRadius || c / 2, v = {\n            delay: l * Cs,\n            duration: l - l * Cs\n        }, g = {\n            left: this._options.rippleCentered ? `${a / 2 - f}px` : `${n - f}px`,\n            top: this._options.rippleCentered ? `${o / 2 - f}px` : `${r - f}px`,\n            height: `${this._options.rippleRadius * 2 || c}px`,\n            width: `${this._options.rippleRadius * 2 || c}px`,\n            transitionDelay: `0s, ${v.delay}ms`,\n            transitionDuration: `${l}ms, ${v.duration}ms`\n        }, O = Ft(\"div\");\n        this._createHTMLRipple({\n            wrapper: this._element,\n            ripple: O,\n            styles: g\n        }), this._removeHTMLRipple({\n            ripple: O,\n            duration: l\n        });\n    }\n    _createHTMLRipple({ wrapper: t, ripple: e, styles: s }) {\n        Object.keys(s).forEach((n)=>e.style[n] = s[n]), E.addClass(e, this._classes.rippleWave), e.setAttribute(\"data-twe-ripple-ref\", \"\"), this._addColor(e, t), this._toggleUnbound(t), this._appendRipple(e, t);\n    }\n    _removeHTMLRipple({ ripple: t, duration: e }) {\n        this._rippleTimer && (clearTimeout(this._rippleTimer), this._rippleTimer = null), t && setTimeout(()=>{\n            t.classList.add(\"!opacity-0\");\n        }, 10), this._rippleTimer = setTimeout(()=>{\n            if (t && (t.remove(), this._element)) {\n                h.find(\"[data-twe-ripple-ref]\", this._element).forEach((n)=>{\n                    n.remove();\n                }), this._isMinWidthSet && (E.style(this._element, {\n                    \"min-width\": \"\"\n                }), this._isMinWidthSet = !1);\n                const s = this._initialClasses ? this._addedNewRippleClasses(this._classes.ripple, this._initialClasses) : this._classes.ripple.split(\" \");\n                E.removeClass(this._element, s);\n            }\n        }, e);\n    }\n    _addedNewRippleClasses(t, e) {\n        return t.split(\" \").filter((s)=>e.findIndex((n)=>s === n) === -1);\n    }\n    _durationToMsNumber(t) {\n        return Number(t.replace(\"ms\", \"\").replace(\"s\", \"000\"));\n    }\n    _getConfig(t = {}) {\n        const e = E.getDataAttributes(this._element);\n        return t = {\n            ...Ll,\n            ...e,\n            ...t\n        }, R(Ge, t, $l), t;\n    }\n    _getClasses(t = {}) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...Il,\n            ...e,\n            ...t\n        }, R(Ge, t, Rl), t;\n    }\n    _getDiameter({ offsetX: t, offsetY: e, height: s, width: n }) {\n        const r = e <= s / 2, o = t <= n / 2, a = (v, g)=>Math.sqrt(v ** 2 + g ** 2), l = e === s / 2 && t === n / 2, u = {\n            first: r === !0 && o === !1,\n            second: r === !0 && o === !0,\n            third: r === !1 && o === !0,\n            fourth: r === !1 && o === !1\n        }, c = {\n            topLeft: a(t, e),\n            topRight: a(n - t, e),\n            bottomLeft: a(t, s - e),\n            bottomRight: a(n - t, s - e)\n        };\n        let f = 0;\n        return l || u.fourth ? f = c.topLeft : u.third ? f = c.topRight : u.second ? f = c.bottomRight : u.first && (f = c.bottomLeft), f * 2;\n    }\n    _appendRipple(t, e) {\n        e.appendChild(t), setTimeout(()=>{\n            E.addClass(t, \"opacity-0 scale-100\");\n        }, 50);\n    }\n    _toggleUnbound(t) {\n        this._options.rippleUnbound === !0 ? E.addClass(t, this._classes.unbound) : E.removeClass(t, this._classes.unbound);\n    }\n    _addColor(t) {\n        let e = this._options.rippleColor || \"rgb(0,0,0)\";\n        (localStorage.theme === \"dark\" || !(\"theme\" in localStorage) && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) && (e = this._options.rippleColorDark || this._options.rippleColor);\n        const s = Sl.find((o)=>o.name === e.toLowerCase()), n = s ? this._colorToRGB(s.gradientColor).join(\",\") : this._colorToRGB(e).join(\",\"), r = Dl.split(\"{{color}}\").join(`${n}`);\n        t.style.backgroundImage = `radial-gradient(circle, ${r})`;\n    }\n    _colorToRGB(t) {\n        function e(r) {\n            return r.length < 7 && (r = `#${r[1]}${r[1]}${r[2]}${r[2]}${r[3]}${r[3]}`), [\n                parseInt(r.substr(1, 2), 16),\n                parseInt(r.substr(3, 2), 16),\n                parseInt(r.substr(5, 2), 16)\n            ];\n        }\n        function s(r) {\n            const o = document.body.appendChild(document.createElement(\"fictum\")), a = \"rgb(1, 2, 3)\";\n            return o.style.color = a, o.style.color !== a || (o.style.color = r, o.style.color === a || o.style.color === \"\") ? de : (r = getComputedStyle(o).color, document.body.removeChild(o), r);\n        }\n        function n(r) {\n            return r = r.match(/[.\\d]+/g).map((o)=>+Number(o)), r.length = 3, r;\n        }\n        return t.toLowerCase() === \"transparent\" ? de : t[0] === \"#\" ? e(t) : (t.indexOf(\"rgb\") === -1 && (t = s(t)), t.indexOf(\"rgb\") === 0 ? n(t) : de);\n    }\n    // Static\n    static autoInitial(t) {\n        return function(e) {\n            t._autoInit(e);\n        };\n    }\n    static jQueryInterface(t) {\n        return this.each(function() {\n            return V.getData(this, ce) ? null : new Hn(this, t);\n        });\n    }\n    static getInstance(t) {\n        return V.getData(t, ce);\n    }\n    static getOrCreateInstance(t, e = {}) {\n        return this.getInstance(t) || new this(t, typeof e == \"object\" ? e : null);\n    }\n}\nconst Qe = \"modal\", xl = \"twe.modal\", K = `.${xl}`, Os = \"Escape\", Ds = {\n    backdrop: !0,\n    keyboard: !0,\n    focus: !0\n}, Ns = {\n    backdrop: \"(boolean|string)\",\n    keyboard: \"boolean\",\n    focus: \"boolean\"\n}, kl = {\n    show: \"transform-none\",\n    static: \"scale-[1.02]\",\n    staticProperties: \"transition-scale duration-300 ease-in-out\",\n    backdrop: \"opacity-50 transition-all duration-300 ease-in-out fixed top-0 left-0 z-[1040] bg-black w-screen h-screen\"\n}, Pl = {\n    show: \"string\",\n    static: \"string\",\n    staticProperties: \"string\",\n    backdrop: \"string\"\n}, Ml = `hide${K}`, Hl = `hidePrevented${K}`, Vl = `hidden${K}`, Wl = `show${K}`, Bl = `shown${K}`, Ss = `resize${K}`, Ls = `click.dismiss${K}`, $s = `keydown.dismiss${K}`, jl = `mouseup.dismiss${K}`, Is = `mousedown.dismiss${K}`, Rs = \"data-twe-modal-open\", xs = \"data-twe-open\", Ut = \"[data-twe-modal-dialog-ref]\", Ul = \"[data-twe-modal-body-ref]\";\nclass ai extends tt {\n    constructor(t, e, s){\n        super(t), this._config = this._getConfig(e), this._classes = this._getClasses(s), this._backdrop = this._initializeBackDrop(), this._focustrap = this._initializeFocusTrap(), this._scrollBar = new ri(), this._dialog = h.findOne(Ut, this._element), this._isShown = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._didInit = !1, this._init();\n    }\n    // Getters\n    static get NAME() {\n        return Qe;\n    }\n    static get Default() {\n        return Ds;\n    }\n    static get getDefaultType() {\n        return Ns;\n    }\n    // Public\n    toggle(t) {\n        return this._isShown ? this.hide() : this.show(t);\n    }\n    show(t) {\n        this._isShown || this._isTransitioning || d.trigger(this._element, Wl, {\n            relatedTarget: t\n        }).defaultPrevented || (this._isShown = !0, this._isAnimated() && (this._isTransitioning = !0), this._scrollBar.hide(), document.body.setAttribute(Rs, \"true\"), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), d.on(this._dialog, Is, ()=>{\n            d.one(this._element, jl, (s)=>{\n                s.target === this._element && (this._ignoreBackdropClick = !0);\n            });\n        }), this._showElement(t), this._showBackdrop());\n    }\n    hide() {\n        if (!this._isShown || this._isTransitioning || d.trigger(this._element, Ml).defaultPrevented) return;\n        this._isShown = !1;\n        const e = this._isAnimated();\n        e && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), this._focustrap.disable(), h.findOne(Ut, this._element).classList.remove(this._classes.show), d.off(this._element, Ls), d.off(this._dialog, Is), this._queueCallback(()=>this._hideModal(), this._element, e), this._element.removeAttribute(xs);\n    }\n    dispose() {\n        [\n            window,\n            document,\n            this._dialog\n        ].forEach((t)=>d.off(t, K)), this._backdrop.dispose(), this._focustrap.disable(), super.dispose();\n    }\n    handleUpdate() {\n        this._adjustDialog();\n    }\n    // Private\n    _init() {\n        this._didInit || (Cn(ai), this._didInit = !0);\n    }\n    _initializeBackDrop() {\n        return new yn({\n            isVisible: !!this._config.backdrop,\n            // 'static' option will be translated to true, and booleans will keep their value\n            isAnimated: this._isAnimated(),\n            backdropClasses: this._classes.backdrop\n        });\n    }\n    _initializeFocusTrap() {\n        return new An(this._element, {\n            event: \"keydown\",\n            condition: (t)=>t.key === \"Tab\"\n        });\n    }\n    _showElement(t) {\n        const e = this._isAnimated(), s = h.findOne(Ul, this._dialog);\n        (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) && document.body.append(this._element), this._element.style.display = \"block\", this._element.classList.remove(\"hidden\"), this._element.removeAttribute(\"aria-hidden\"), this._element.setAttribute(\"aria-modal\", !0), this._element.setAttribute(\"role\", \"dialog\"), this._element.setAttribute(`${xs}`, \"true\"), this._element.scrollTop = 0;\n        const n = h.findOne(Ut, this._element);\n        n.classList.add(this._classes.show), n.classList.remove(\"opacity-0\"), n.classList.add(\"opacity-100\"), s && (s.scrollTop = 0), e && Xt(this._element);\n        const r = ()=>{\n            this._config.focus && this._focustrap.trap(), this._isTransitioning = !1, d.trigger(this._element, Bl, {\n                relatedTarget: t\n            });\n        };\n        this._queueCallback(r, this._dialog, e);\n    }\n    _setEscapeEvent() {\n        this._isShown ? d.on(document, $s, (t)=>{\n            this._config.keyboard && t.key === Os ? (t.preventDefault(), this.hide()) : !this._config.keyboard && t.key === Os && this._triggerBackdropTransition();\n        }) : d.off(this._element, $s);\n    }\n    _setResizeEvent() {\n        this._isShown ? d.on(window, Ss, ()=>this._adjustDialog()) : d.off(window, Ss);\n    }\n    _hideModal() {\n        const t = h.findOne(Ut, this._element);\n        t.classList.remove(this._classes.show), t.classList.remove(\"opacity-100\"), t.classList.add(\"opacity-0\");\n        const e = Je(t);\n        setTimeout(()=>{\n            this._element.style.display = \"none\";\n        }, e), this._element.setAttribute(\"aria-hidden\", !0), this._element.removeAttribute(\"aria-modal\"), this._element.removeAttribute(\"role\"), this._isTransitioning = !1, this._backdrop.hide(()=>{\n            document.body.removeAttribute(Rs), this._resetAdjustments(), this._scrollBar.reset(), d.trigger(this._element, Vl);\n        });\n    }\n    _showBackdrop(t) {\n        d.on(this._element, Ls, (e)=>{\n            if (this._ignoreBackdropClick) {\n                this._ignoreBackdropClick = !1;\n                return;\n            }\n            e.target === e.currentTarget && (this._config.backdrop === !0 ? this.hide() : this._config.backdrop === \"static\" && this._triggerBackdropTransition());\n        }), this._backdrop.show(t);\n    }\n    _isAnimated() {\n        return !!h.findOne(Ut, this._element);\n    }\n    _triggerBackdropTransition() {\n        if (d.trigger(this._element, Hl).defaultPrevented) return;\n        const { classList: e, scrollHeight: s, style: n } = this._element, r = s > document.documentElement.clientHeight;\n        if (!r && n.overflowY === \"hidden\" || e.contains(this._classes.static)) return;\n        r || (n.overflowY = \"hidden\"), e.add(...this._classes.static.split(\" \")), e.add(...this._classes.staticProperties.split(\" \"));\n        const o = Je(this._element);\n        this._queueCallback(()=>{\n            e.remove(this._classes.static), setTimeout(()=>{\n                e.remove(...this._classes.staticProperties.split(\" \"));\n            }, o), r || this._queueCallback(()=>{\n                n.overflowY = \"\";\n            }, this._dialog);\n        }, this._dialog), this._element.focus();\n    }\n    _getConfig(t) {\n        return t = {\n            ...Ds,\n            ...E.getDataAttributes(this._element),\n            ...typeof t == \"object\" ? t : {}\n        }, R(Qe, t, Ns), t;\n    }\n    _getClasses(t) {\n        const e = E.getDataClassAttributes(this._element);\n        return t = {\n            ...kl,\n            ...e,\n            ...t\n        }, R(Qe, t, Pl), t;\n    }\n    // ----------------------------------------------------------------------\n    // the following methods are used to handle overflowing modals\n    // ----------------------------------------------------------------------\n    _adjustDialog() {\n        const t = this._element.scrollHeight > document.documentElement.clientHeight, e = this._scrollBar.getWidth(), s = e > 0;\n        (!s && t && !M() || s && !t && M()) && (this._element.style.paddingLeft = `${e}px`), (s && !t && !M() || !s && t && M()) && (this._element.style.paddingRight = `${e}px`);\n    }\n    _resetAdjustments() {\n        this._element.style.paddingLeft = \"\", this._element.style.paddingRight = \"\";\n    }\n    // Static\n    static jQueryInterface(t, e) {\n        return this.each(function() {\n            const s = ai.getOrCreateInstance(this, t);\n            if (typeof t == \"string\") {\n                if (typeof s[t] > \"u\") throw new TypeError(`No method named \"${t}\"`);\n                s[t](e);\n            }\n        });\n    }\n}\nconst Fl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, function(e) {\n        e.preventDefault(), i.getOrCreateInstance(this).toggle();\n    });\n}, Yl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), gt(this)) return;\n        i.getOrCreateInstance(this).show();\n    });\n}, Kl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        const s = nt(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), gt(this)) return;\n        d.one(s, i.EVENT_HIDDEN, ()=>{\n            kt(this) && this.focus();\n        });\n        const n = h.findOne(i.OPEN_SELECTOR);\n        n && n !== s && i.getInstance(n).hide(), i.getOrCreateInstance(s).toggle(this);\n    });\n}, zl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, (e)=>{\n        e.preventDefault();\n        const s = e.target.closest(t);\n        i.getOrCreateInstance(s).toggle();\n    });\n}, ql = (i, t)=>{\n    d.one(document, \"mousedown\", t, i.autoInitial(new i()));\n}, Xl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}.data-api`, t, function(e) {\n        (e.target.tagName === \"A\" || e.delegateTarget && e.delegateTarget.tagName === \"A\") && e.preventDefault();\n        const s = ci(this);\n        h.find(s).forEach((r)=>{\n            i.getOrCreateInstance(r, {\n                toggle: !1\n            }).toggle();\n        });\n    });\n}, Gl = (i, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(s) {\n        return new i(s);\n    });\n}, Ql = (i, t)=>{\n    [].slice.call(document.querySelectorAll(t)).map(function(s) {\n        return new i(s);\n    });\n}, Zl = (i, t)=>{\n    d.on(document, `click.twe.${i.NAME}`, t, function(e) {\n        const s = nt(this);\n        [\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName) && e.preventDefault(), d.one(s, i.EVENT_SHOW, (o)=>{\n            o.defaultPrevented || d.one(s, i.EVENT_HIDDEN, ()=>{\n                kt(this) && this.focus();\n            });\n        });\n        const n = h.findOne(`[${i.OPEN_SELECTOR}=\"true\"]`);\n        n && i.getInstance(n).hide(), i.getOrCreateInstance(s).toggle(this);\n    });\n}, Jl = {\n    carousel: {\n        name: \"Carousel\",\n        selector: \"[data-twe-carousel-init]\",\n        isToggler: !1\n    },\n    input: {\n        name: \"Input\",\n        selector: \"[data-twe-input-wrapper-init]\",\n        isToggler: !1\n    },\n    scrollspy: {\n        name: \"ScrollSpy\",\n        selector: \"[data-twe-spy='scroll']\",\n        isToggler: !1\n    },\n    // togglers\n    button: {\n        name: \"Button\",\n        selector: \"[data-twe-toggle='button']\",\n        isToggler: !0,\n        callback: zl\n    },\n    collapse: {\n        name: \"Collapse\",\n        selector: \"[data-twe-collapse-init]\",\n        isToggler: !0,\n        callback: Xl\n    },\n    dropdown: {\n        name: \"Dropdown\",\n        selector: \"[data-twe-dropdown-toggle-ref]\",\n        isToggler: !0,\n        callback: Fl\n    },\n    ripple: {\n        name: \"Ripple\",\n        selector: \"[data-twe-ripple-init]\",\n        isToggler: !0,\n        callback: ql\n    },\n    offcanvas: {\n        name: \"Offcanvas\",\n        selector: \"[data-twe-offcanvas-toggle]\",\n        isToggler: !0,\n        callback: Kl\n    },\n    tab: {\n        name: \"Tab\",\n        selector: \"[data-twe-toggle='tab'], [data-twe-toggle='pill'], [data-twe-toggle='list']\",\n        isToggler: !0,\n        callback: Yl\n    },\n    tooltip: {\n        name: \"Tooltip\",\n        selector: \"[data-twe-toggle='tooltip']\",\n        isToggler: !1,\n        callback: Gl\n    },\n    popover: {\n        name: \"Popover\",\n        selector: \"[data-twe-toggle='popover']\",\n        isToggler: !0,\n        callback: Ql\n    },\n    modal: {\n        name: \"Modal\",\n        selector: \"[data-twe-toggle='modal']\",\n        isToggler: !0,\n        callback: Zl\n    }\n}, tc = (i)=>{\n    Vs(()=>{\n        const t = Hs();\n        if (t) {\n            const e = i.NAME, s = t.fn[e];\n            t.fn[e] = i.jQueryInterface, t.fn[e].Constructor = i, t.fn[e].noConflict = ()=>(t.fn[e] = s, i.jQueryInterface);\n        }\n    });\n};\nclass ec {\n    constructor(){\n        this.inits = [];\n    }\n    get initialized() {\n        return this.inits;\n    }\n    isInited(t) {\n        return this.inits.includes(t);\n    }\n    add(t) {\n        this.isInited(t) || this.inits.push(t);\n    }\n}\nconst li = new ec();\nlet Dt;\nconst ic = (i)=>Dt[i.NAME] || null, sc = (i, t)=>{\n    if (!i || !t.allowReinits && li.isInited(i.NAME)) return;\n    li.add(i.NAME);\n    const e = ic(i), s = (e == null ? void 0 : e.isToggler) || !1;\n    if (tc(i), e != null && e.advanced) {\n        e == null || e.advanced(i, e == null ? void 0 : e.selector);\n        return;\n    }\n    if (s) {\n        e == null || e.callback(i, e == null ? void 0 : e.selector);\n        return;\n    }\n    h.find(e == null ? void 0 : e.selector).forEach((n)=>{\n        let r = i.getInstance(n);\n        r || (r = new i(n), e != null && e.onInit && r[e.onInit]());\n    });\n}, nc = {\n    allowReinits: !1,\n    checkOtherImports: !1\n};\nclass rc {\n    constructor(t){\n        Ne(this, \"init\", (t, e)=>{\n            t.forEach((s)=>sc(s, e));\n        });\n        Ne(this, \"initTWE\", (t, e)=>{\n            const s = {\n                ...nc,\n                ...e\n            }, n = Object.keys(Dt).map((r)=>{\n                if (!!document.querySelector(Dt[r].selector)) {\n                    const a = t[Dt[r].name];\n                    return !a && !li.isInited(r) && s.checkOtherImports && console.warn(`Please import ${Dt[r].name} from \"tw-elements\" package and add it to a object parameter inside \"initTWE\" function`), a;\n                }\n            });\n            this.init(n, s);\n        });\n        Dt = t;\n    }\n}\nconst oc = new rc(Jl), lc = oc.initTWE;\n //# sourceMappingURL=tw-elements.es.min.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHctZWxlbWVudHMvanMvdHctZWxlbWVudHMuZXMubWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FNQSxNQUFNQSxLQUFBQSxDQUFXO0lBQ2YsTUFBTUMsSUFBWTtJQUNsQixJQUFJQyxJQUFLO0lBQ1QsT0FBTztRQUNMQyxLQUFJQyxDQUFBQSxFQUFTQyxDQUFBQSxFQUFLQyxDQUFBQTtZQUNaLE9BQU9GLENBQUFBLENBQVFDLEVBQUcsR0FBTSxPQUMxQkQsQ0FBQUEsQ0FBQUEsQ0FBUUMsRUFBRyxHQUFJO2dCQUNiQSxLQUFBQTtnQkFDQUgsSUFBQUE7WUFDVixHQUNRQSxHQUFBQSxHQUdGRCxDQUFBQSxDQUFVRyxDQUFBQSxDQUFRQyxFQUFHLENBQUVILEVBQUUsSUFBSUk7UUFDOUI7UUFDREMsS0FBSUgsQ0FBQUEsRUFBU0MsQ0FBQUE7WUFDWCxJQUFJLENBQUNELEtBQVcsT0FBT0EsQ0FBQUEsQ0FBUUMsRUFBRyxHQUFNLEtBQ3RDLE9BQU87WUFHVCxNQUFNRyxJQUFnQkosQ0FBQUEsQ0FBUUMsRUFBRztZQUNqQyxPQUFJRyxFQUFjSCxHQUFBLEtBQVFBLElBQ2pCSixDQUFBQSxDQUFVTyxFQUFjTixFQUFFLElBRzVCO1FBQ1I7UUFDRE8sUUFBT0wsQ0FBQUEsRUFBU0MsQ0FBQUE7WUFDZCxJQUFJLE9BQU9ELENBQUFBLENBQVFDLEVBQUcsR0FBTSxLQUMxQjtZQUdGLE1BQU1HLElBQWdCSixDQUFBQSxDQUFRQyxFQUFHO1lBQzdCRyxFQUFjSCxHQUFBLEtBQVFBLEtBQ3hCLFFBQU9KLENBQUFBLENBQVVPLEVBQWNOLEVBQUUsR0FDakMsT0FBT0UsQ0FBQUEsQ0FBUUMsRUFBRztRQUVyQjtJQUNMO0FBQ0EsTUFFTUssSUFBTztJQUNYQyxTQUFRQyxDQUFBQSxFQUFVUCxDQUFBQSxFQUFLQyxDQUFBQTtRQUNyQk4sR0FBUUcsR0FBQSxDQUFJUyxHQUFVUCxH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QSIsInNvdXJjZXMiOlsid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2RvbS9kYXRhLmpzP2MyNzEiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvdXRpbC9pbmRleC5qcz8xNjEyIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2RvbS9ldmVudC1oYW5kbGVyLmpzP2VlMmMiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvYmFzZS1jb21wb25lbnQuanM/N2YyOSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy9mcmVlL2NvbXBvbmVudHMvYnV0dG9uLmpzPzA2YmMiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzP2FiMDEiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcz9jNDQ5Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93LmpzP2U2NzIiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzPzkxZTYiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcz8zNWFmIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzPzI3OTkiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanM/OWM1NCIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdXNlckFnZW50LmpzPzUyYWYiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc0xheW91dFZpZXdwb3J0LmpzPzMxZmYiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanM/YTQwNiIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanM/MTFmZSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzP2NjYTYiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzPzRhMWUiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcz84Y2U3Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzPzNkNjQiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzP2M2OTMiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanM/YWRjMiIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzP2VjOWMiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcz8yOWVlIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanM/YjViNSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzP2JhZTMiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcz9mYjVlIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXJyb3cuanM/NzFiNCIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzPzg2YzEiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzPzI1MjciLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcz84ZTVjIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcz81NGI3Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcz8zYzdjIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzP2Q2NmIiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzPzA1MzIiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanM/MzI0OSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcz82ZDExIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanM/Mjc3OSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcz83MzM3Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanM/MDA2NiIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcz8yNzcwIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzP2U2YjkiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzP2M4N2MiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzPzU3MjkiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzPzRkOTgiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzP2UyOGYiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzPzRjYzIiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanM/OGQwZSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanM/YzJkMCIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcz9iNmEyIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzPzVjY2YiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcz8yOGU4Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZVNjcm9sbC5qcz9kOTZiIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcz8xZDI4Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9vcmRlck1vZGlmaWVycy5qcz82YzJhIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9kZWJvdW5jZS5qcz8wY2M3Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcz9lMGY2Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanM/ZWVlMiIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLWxpdGUuanM/OTZkMCIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzP2ViY2IiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvZG9tL21hbmlwdWxhdG9yLmpzPzI1M2UiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvZG9tL3NlbGVjdG9yLWVuZ2luZS5qcz80NDllIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvY29tcG9uZW50cy9kcm9wZG93bi5qcz9kMGNlIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvY29tcG9uZW50cy9jb2xsYXBzZS5qcz81MTM1Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL3V0aWwvc2Nyb2xsYmFyLmpzP2JiN2IiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvdXRpbC9iYWNrZHJvcC5qcz8zODQ1Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL3V0aWwvZm9jdXNUcmFwLmpzP2UxMzkiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzP2E1NTIiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvdXRpbC9rZXljb2Rlcy5qcz9mZmEzIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvY29tcG9uZW50cy9vZmZjYW52YXMuanM/NjlhYSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy9mcmVlL2NvbXBvbmVudHMvY2Fyb3VzZWwuanM/MmQ1MSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy91dGlsL3Nhbml0aXplci5qcz81NTI4Iiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvY29tcG9uZW50cy90b29sdGlwLmpzP2U0NDQiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvZnJlZS9jb21wb25lbnRzL3BvcG92ZXIuanM/MDAxZSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy9mcmVlL25hdmlnYXRpb24vc2Nyb2xsc3B5LmpzPzE2YzgiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvZnJlZS9uYXZpZ2F0aW9uL3RhYi5qcz9kMDgwIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2RldGVjdC1hdXRvZmlsbC9kaXN0L2RldGVjdC1hdXRvZmlsbC5qcz8xNzRiIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvZm9ybXMvaW5wdXQuanM/NzI4YiIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy91dGlsL2dldFN0eWxlLmpzPzY3M2UiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvZnJlZS9tZXRob2RzL3JpcHBsZS5qcz9hODBkIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2ZyZWUvY29tcG9uZW50cy9tb2RhbC5qcz8xYWEzIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2F1dG9pbml0L2NhbGxiYWNrcy9mcmVlLmpzPzg0OTQiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvYXV0b2luaXQvaW5pdFNlbGVjdG9ycy9mcmVlLmpzPzYwNGUiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvYXV0b2luaXQvanF1ZXJ5SW5pdC5qcz80MDUxIiwid2VicGFjazovL21pY2hhZWwtY29ya2VyLWFydHdvcmsvLi4vLi4vLi4vc3JjL3R3LWVsZW1lbnRzL2pzL2F1dG9pbml0L1JlZ2lzdGVyLmpzPzQwNWUiLCJ3ZWJwYWNrOi8vbWljaGFlbC1jb3JrZXItYXJ0d29yay8uLi8uLi8uLi9zcmMvdHctZWxlbWVudHMvanMvYXV0b2luaXQvaW5kZXguanM/OGUyZSIsIndlYnBhY2s6Ly9taWNoYWVsLWNvcmtlci1hcnR3b3JrLy4uLy4uLy4uL3NyYy90dy1lbGVtZW50cy9qcy9hdXRvaW5pdC9pbmRleC5mcmVlLmpzPzNjZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNvbnN0YW50c1xyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNvbnN0IG1hcERhdGEgPSAoKCkgPT4ge1xyXG4gIGNvbnN0IHN0b3JlRGF0YSA9IHt9O1xyXG4gIGxldCBpZCA9IDE7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNldChlbGVtZW50LCBrZXksIGRhdGEpIHtcclxuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50W2tleV0gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBlbGVtZW50W2tleV0gPSB7XHJcbiAgICAgICAgICBrZXksXHJcbiAgICAgICAgICBpZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlkKys7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0b3JlRGF0YVtlbGVtZW50W2tleV0uaWRdID0gZGF0YTtcclxuICAgIH0sXHJcbiAgICBnZXQoZWxlbWVudCwga2V5KSB7XHJcbiAgICAgIGlmICghZWxlbWVudCB8fCB0eXBlb2YgZWxlbWVudFtrZXldID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGtleVByb3BlcnRpZXMgPSBlbGVtZW50W2tleV07XHJcbiAgICAgIGlmIChrZXlQcm9wZXJ0aWVzLmtleSA9PT0ga2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlRGF0YVtrZXlQcm9wZXJ0aWVzLmlkXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9LFxyXG4gICAgZGVsZXRlKGVsZW1lbnQsIGtleSkge1xyXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnRba2V5XSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qga2V5UHJvcGVydGllcyA9IGVsZW1lbnRba2V5XTtcclxuICAgICAgaWYgKGtleVByb3BlcnRpZXMua2V5ID09PSBrZXkpIHtcclxuICAgICAgICBkZWxldGUgc3RvcmVEYXRhW2tleVByb3BlcnRpZXMuaWRdO1xyXG4gICAgICAgIGRlbGV0ZSBlbGVtZW50W2tleV07XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgfTtcclxufSkoKTtcclxuXHJcbmNvbnN0IERhdGEgPSB7XHJcbiAgc2V0RGF0YShpbnN0YW5jZSwga2V5LCBkYXRhKSB7XHJcbiAgICBtYXBEYXRhLnNldChpbnN0YW5jZSwga2V5LCBkYXRhKTtcclxuICB9LFxyXG4gIGdldERhdGEoaW5zdGFuY2UsIGtleSkge1xyXG4gICAgcmV0dXJuIG1hcERhdGEuZ2V0KGluc3RhbmNlLCBrZXkpO1xyXG4gIH0sXHJcbiAgcmVtb3ZlRGF0YShpbnN0YW5jZSwga2V5KSB7XHJcbiAgICBtYXBEYXRhLmRlbGV0ZShpbnN0YW5jZSwga2V5KTtcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGF0YTtcclxuIiwiY29uc3QgTUFYX1VJRCA9IDEwMDAwMDA7XHJcbmNvbnN0IE1JTExJU0VDT05EU19NVUxUSVBMSUVSID0gMTAwMDtcclxuY29uc3QgVFJBTlNJVElPTl9FTkQgPSBcInRyYW5zaXRpb25lbmRcIjtcclxuXHJcbi8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcclxuY29uc3QgdG9UeXBlID0gKG9iaikgPT4ge1xyXG4gIGlmIChvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiBgJHtvYmp9YDtcclxuICB9XHJcblxyXG4gIHJldHVybiB7fS50b1N0cmluZ1xyXG4gICAgLmNhbGwob2JqKVxyXG4gICAgLm1hdGNoKC9cXHMoW2Etel0rKS9pKVsxXVxyXG4gICAgLnRvTG93ZXJDYXNlKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUHVibGljIFV0aWwgQXBpXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuY29uc3QgZ2V0VUlEID0gKHByZWZpeCkgPT4ge1xyXG4gIGRvIHtcclxuICAgIHByZWZpeCArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTtcclxuICB9IHdoaWxlIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwcmVmaXgpKTtcclxuXHJcbiAgcmV0dXJuIHByZWZpeDtcclxufTtcclxuXHJcbmNvbnN0IGdldFNlbGVjdG9yID0gKGVsZW1lbnQpID0+IHtcclxuICBsZXQgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHdlLXRhcmdldFwiKTtcclxuXHJcbiAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gXCIjXCIpIHtcclxuICAgIGxldCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcclxuXHJcbiAgICAvLyBUaGUgb25seSB2YWxpZCBjb250ZW50IHRoYXQgY291bGQgZG91YmxlIGFzIGEgc2VsZWN0b3IgYXJlIElEcyBvciBjbGFzc2VzLFxyXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxyXG4gICAgLy8gYGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JgIHdpbGwgcmlnaHRmdWxseSBjb21wbGFpbiBpdCBpcyBpbnZhbGlkLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMzIyNzNcclxuICAgIGlmICghaHJlZkF0dHIgfHwgKCFocmVmQXR0ci5pbmNsdWRlcyhcIiNcIikgJiYgIWhyZWZBdHRyLnN0YXJ0c1dpdGgoXCIuXCIpKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBKdXN0IGluIGNhc2Ugc29tZSBDTVMgcHV0cyBvdXQgYSBmdWxsIFVSTCB3aXRoIHRoZSBhbmNob3IgYXBwZW5kZWRcclxuICAgIGlmIChocmVmQXR0ci5pbmNsdWRlcyhcIiNcIikgJiYgIWhyZWZBdHRyLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XHJcbiAgICAgIGhyZWZBdHRyID0gYCMke2hyZWZBdHRyLnNwbGl0KFwiI1wiKVsxXX1gO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09IFwiI1wiID8gaHJlZkF0dHIudHJpbSgpIDogbnVsbDtcclxuICB9XHJcblxyXG4gIHJldHVybiBzZWxlY3RvcjtcclxufTtcclxuXHJcbmNvbnN0IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQgPSAoZWxlbWVudCkgPT4ge1xyXG4gIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3IoZWxlbWVudCk7XHJcblxyXG4gIGlmIChzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpID8gc2VsZWN0b3IgOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5jb25zdCBnZXRFbGVtZW50RnJvbVNlbGVjdG9yID0gKGVsZW1lbnQpID0+IHtcclxuICBjb25zdCBzZWxlY3RvciA9IGdldFNlbGVjdG9yKGVsZW1lbnQpO1xyXG5cclxuICByZXR1cm4gc2VsZWN0b3IgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IG51bGw7XHJcbn07XHJcblxyXG5jb25zdCBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCA9IChlbGVtZW50KSA9PiB7XHJcbiAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XHJcbiAgbGV0IHsgdHJhbnNpdGlvbkR1cmF0aW9uLCB0cmFuc2l0aW9uRGVsYXkgfSA9XHJcbiAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuXHJcbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkRlbGF5ID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KTtcclxuXHJcbiAgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxyXG4gIGlmICghZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24gJiYgIWZsb2F0VHJhbnNpdGlvbkRlbGF5KSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcblxyXG4gIC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcclxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoXCIsXCIpWzBdO1xyXG4gIHRyYW5zaXRpb25EZWxheSA9IHRyYW5zaXRpb25EZWxheS5zcGxpdChcIixcIilbMF07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArXHJcbiAgICAgIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICpcclxuICAgIE1JTExJU0VDT05EU19NVUxUSVBMSUVSXHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IHRyaWdnZXJUcmFuc2l0aW9uRW5kID0gKGVsZW1lbnQpID0+IHtcclxuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFRSQU5TSVRJT05fRU5EKSk7XHJcbn07XHJcblxyXG5jb25zdCBpc0VsZW1lbnQgPSAob2JqKSA9PiB7XHJcbiAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBvYmouanF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICBvYmogPSBvYmpbMF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJ1bmRlZmluZWRcIjtcclxufTtcclxuXHJcbmNvbnN0IGdldEVsZW1lbnQgPSAob2JqKSA9PiB7XHJcbiAgaWYgKGlzRWxlbWVudChvYmopKSB7XHJcbiAgICAvLyBpdCdzIGEgalF1ZXJ5IG9iamVjdCBvciBhIG5vZGUgZWxlbWVudFxyXG4gICAgcmV0dXJuIG9iai5qcXVlcnkgPyBvYmpbMF0gOiBvYmo7XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIiAmJiBvYmoubGVuZ3RoID4gMCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iob2JqKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuY29uc3QgZW11bGF0ZVRyYW5zaXRpb25FbmQgPSAoZWxlbWVudCwgZHVyYXRpb24pID0+IHtcclxuICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNTtcclxuICBjb25zdCBlbXVsYXRlZER1cmF0aW9uID0gZHVyYXRpb24gKyBkdXJhdGlvblBhZGRpbmc7XHJcblxyXG4gIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xyXG4gICAgY2FsbGVkID0gdHJ1ZTtcclxuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihUUkFOU0lUSU9OX0VORCwgbGlzdGVuZXIpO1xyXG4gIH1cclxuXHJcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBsaXN0ZW5lcik7XHJcbiAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICBpZiAoIWNhbGxlZCkge1xyXG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KTtcclxuICAgIH1cclxuICB9LCBlbXVsYXRlZER1cmF0aW9uKTtcclxufTtcclxuXHJcbmNvbnN0IHR5cGVDaGVja0NvbmZpZyA9IChjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSA9PiB7XHJcbiAgT2JqZWN0LmtleXMoY29uZmlnVHlwZXMpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xyXG4gICAgY29uc3QgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xyXG4gICAgY29uc3QgdmFsdWVUeXBlID0gdmFsdWUgJiYgaXNFbGVtZW50KHZhbHVlKSA/IFwiZWxlbWVudFwiIDogdG9UeXBlKHZhbHVlKTtcclxuXHJcbiAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICBgJHtjb21wb25lbnROYW1lLnRvVXBwZXJDYXNlKCl9OiBgICtcclxuICAgICAgICAgIGBPcHRpb24gXCIke3Byb3BlcnR5fVwiIHByb3ZpZGVkIHR5cGUgXCIke3ZhbHVlVHlwZX1cIiBgICtcclxuICAgICAgICAgIGBidXQgZXhwZWN0ZWQgdHlwZSBcIiR7ZXhwZWN0ZWRUeXBlc31cIi5gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBpc1Zpc2libGUgPSAoZWxlbWVudCkgPT4ge1xyXG4gIGlmICghZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGVsZW1lbnQuc3R5bGUgJiYgZWxlbWVudC5wYXJlbnROb2RlICYmIGVsZW1lbnQucGFyZW50Tm9kZS5zdHlsZSkge1xyXG4gICAgY29uc3QgZWxlbWVudFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcclxuICAgIGNvbnN0IHBhcmVudE5vZGVTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBlbGVtZW50U3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIgJiZcclxuICAgICAgcGFyZW50Tm9kZVN0eWxlLmRpc3BsYXkgIT09IFwibm9uZVwiICYmXHJcbiAgICAgIGVsZW1lbnRTdHlsZS52aXNpYmlsaXR5ICE9PSBcImhpZGRlblwiXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuY29uc3QgaXNEaXNhYmxlZCA9IChlbGVtZW50KSA9PiB7XHJcbiAgaWYgKCFlbGVtZW50IHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImRpc2FibGVkXCIpKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2YgZWxlbWVudC5kaXNhYmxlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQuZGlzYWJsZWQ7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKFxyXG4gICAgZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSAmJlxyXG4gICAgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSAhPT0gXCJmYWxzZVwiXHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IGZpbmRTaGFkb3dSb290ID0gKGVsZW1lbnQpID0+IHtcclxuICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FuIGZpbmQgdGhlIHNoYWRvdyByb290IG90aGVyd2lzZSBpdCdsbCByZXR1cm4gdGhlIGRvY3VtZW50XHJcbiAgaWYgKHR5cGVvZiBlbGVtZW50LmdldFJvb3ROb2RlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIGNvbnN0IHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XHJcbiAgICByZXR1cm4gcm9vdCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QgPyByb290IDogbnVsbDtcclxuICB9XHJcblxyXG4gIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxyXG4gIGlmICghZWxlbWVudC5wYXJlbnROb2RlKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIHJldHVybiBmaW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xyXG59O1xyXG5cclxuY29uc3Qgbm9vcCA9ICgpID0+IGZ1bmN0aW9uICgpIHt9O1xyXG5cclxuLyoqXHJcbiAqIFRyaWNrIHRvIHJlc3RhcnQgYW4gZWxlbWVudCdzIGFuaW1hdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vd3d3LmNoYXJpc3RoZW8uaW8vYmxvZy8yMDIxLzAyL3Jlc3RhcnQtYS1jc3MtYW5pbWF0aW9uLXdpdGgtamF2YXNjcmlwdC8jcmVzdGFydGluZy1hLWNzcy1hbmltYXRpb25cclxuICovXHJcbmNvbnN0IHJlZmxvdyA9IChlbGVtZW50KSA9PiB7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xyXG4gIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG59O1xyXG5cclxuY29uc3QgZ2V0alF1ZXJ5ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHsgalF1ZXJ5IH0gPSB3aW5kb3c7XHJcblxyXG4gIGlmIChqUXVlcnkgJiYgIWRvY3VtZW50LmJvZHkuaGFzQXR0cmlidXRlKFwiZGF0YS10d2Utbm8tanF1ZXJ5XCIpKSB7XHJcbiAgICByZXR1cm4galF1ZXJ5O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5jb25zdCBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzID0gW107XHJcblxyXG5jb25zdCBvbkRPTUNvbnRlbnRMb2FkZWQgPSAoY2FsbGJhY2spID0+IHtcclxuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcclxuICAgIC8vIGFkZCBsaXN0ZW5lciBvbiB0aGUgZmlyc3QgY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBpcyBpbiBsb2FkaW5nIHN0YXRlXHJcbiAgICBpZiAoIURPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcclxuICAgICAgICBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjaygpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY2FsbGJhY2soKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBpc1JUTCA9ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgPT09IFwicnRsXCI7XHJcblxyXG5jb25zdCBhcnJheSA9IChjb2xsZWN0aW9uKSA9PiB7XHJcbiAgcmV0dXJuIEFycmF5LmZyb20oY29sbGVjdGlvbik7XHJcbn07XHJcblxyXG5jb25zdCBlbGVtZW50ID0gKHRhZykgPT4ge1xyXG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XHJcbn07XHJcblxyXG5jb25zdCBkZWZpbmVKUXVlcnlQbHVnaW4gPSAocGx1Z2luKSA9PiB7XHJcbiAgb25ET01Db250ZW50TG9hZGVkKCgpID0+IHtcclxuICAgIGNvbnN0ICQgPSBnZXRqUXVlcnkoKTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKCQpIHtcclxuICAgICAgY29uc3QgbmFtZSA9IHBsdWdpbi5OQU1FO1xyXG4gICAgICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW25hbWVdO1xyXG4gICAgICAkLmZuW25hbWVdID0gcGx1Z2luLmpRdWVyeUludGVyZmFjZTtcclxuICAgICAgJC5mbltuYW1lXS5Db25zdHJ1Y3RvciA9IHBsdWdpbjtcclxuICAgICAgJC5mbltuYW1lXS5ub0NvbmZsaWN0ID0gKCkgPT4ge1xyXG4gICAgICAgICQuZm5bbmFtZV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XHJcbiAgICAgICAgcmV0dXJuIHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBleGVjdXRlID0gKGNhbGxiYWNrKSA9PiB7XHJcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICBjYWxsYmFjaygpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGV4ZWN1dGVBZnRlclRyYW5zaXRpb24gPSAoXHJcbiAgY2FsbGJhY2ssXHJcbiAgdHJhbnNpdGlvbkVsZW1lbnQsXHJcbiAgd2FpdEZvclRyYW5zaXRpb24gPSB0cnVlXHJcbikgPT4ge1xyXG4gIGlmICghd2FpdEZvclRyYW5zaXRpb24pIHtcclxuICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZHVyYXRpb25QYWRkaW5nID0gNTtcclxuICBjb25zdCBlbXVsYXRlZER1cmF0aW9uID1cclxuICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRyYW5zaXRpb25FbGVtZW50KSArIGR1cmF0aW9uUGFkZGluZztcclxuXHJcbiAgbGV0IGNhbGxlZCA9IGZhbHNlO1xyXG5cclxuICBjb25zdCBoYW5kbGVyID0gKHsgdGFyZ2V0IH0pID0+IHtcclxuICAgIGlmICh0YXJnZXQgIT09IHRyYW5zaXRpb25FbGVtZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsZWQgPSB0cnVlO1xyXG4gICAgdHJhbnNpdGlvbkVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihUUkFOU0lUSU9OX0VORCwgaGFuZGxlcik7XHJcbiAgICBleGVjdXRlKGNhbGxiYWNrKTtcclxuICB9O1xyXG5cclxuICB0cmFuc2l0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKTtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25FbGVtZW50KTtcclxuICAgIH1cclxuICB9LCBlbXVsYXRlZER1cmF0aW9uKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHByZXZpb3VzL25leHQgZWxlbWVudCBvZiBhIGxpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7YXJyYXl9IGxpc3QgICAgVGhlIGxpc3Qgb2YgZWxlbWVudHNcclxuICogQHBhcmFtIGFjdGl2ZUVsZW1lbnQgICBUaGUgYWN0aXZlIGVsZW1lbnRcclxuICogQHBhcmFtIHNob3VsZEdldE5leHQgICBDaG9vc2UgdG8gZ2V0IG5leHQgb3IgcHJldmlvdXMgZWxlbWVudFxyXG4gKiBAcGFyYW0gaXNDeWNsZUFsbG93ZWRcclxuICogQHJldHVybiB7RWxlbWVudHxlbGVtfSBUaGUgcHJvcGVyIGVsZW1lbnRcclxuICovXHJcbmNvbnN0IGdldE5leHRBY3RpdmVFbGVtZW50ID0gKFxyXG4gIGxpc3QsXHJcbiAgYWN0aXZlRWxlbWVudCxcclxuICBzaG91bGRHZXROZXh0LFxyXG4gIGlzQ3ljbGVBbGxvd2VkXHJcbikgPT4ge1xyXG4gIGxldCBpbmRleCA9IGxpc3QuaW5kZXhPZihhY3RpdmVFbGVtZW50KTtcclxuXHJcbiAgLy8gaWYgdGhlIGVsZW1lbnQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGxpc3QgcmV0dXJuIGFuIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb24gYW5kIGlmIGN5Y2xlIGlzIGFsbG93ZWRcclxuICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICByZXR1cm4gbGlzdFshc2hvdWxkR2V0TmV4dCAmJiBpc0N5Y2xlQWxsb3dlZCA/IGxpc3QubGVuZ3RoIC0gMSA6IDBdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbGlzdExlbmd0aCA9IGxpc3QubGVuZ3RoO1xyXG5cclxuICBpbmRleCArPSBzaG91bGRHZXROZXh0ID8gMSA6IC0xO1xyXG5cclxuICBpZiAoaXNDeWNsZUFsbG93ZWQpIHtcclxuICAgIGluZGV4ID0gKGluZGV4ICsgbGlzdExlbmd0aCkgJSBsaXN0TGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGxpc3RbTWF0aC5tYXgoMCwgTWF0aC5taW4oaW5kZXgsIGxpc3RMZW5ndGggLSAxKSldO1xyXG59O1xyXG5cclxuZXhwb3J0IHtcclxuICBnZXRqUXVlcnksXHJcbiAgVFJBTlNJVElPTl9FTkQsXHJcbiAgZ2V0VUlELFxyXG4gIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQsXHJcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcclxuICBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCxcclxuICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCxcclxuICBpc0VsZW1lbnQsXHJcbiAgZW11bGF0ZVRyYW5zaXRpb25FbmQsXHJcbiAgdHlwZUNoZWNrQ29uZmlnLFxyXG4gIGlzVmlzaWJsZSxcclxuICBmaW5kU2hhZG93Um9vdCxcclxuICBub29wLFxyXG4gIHJlZmxvdyxcclxuICBhcnJheSxcclxuICBlbGVtZW50LFxyXG4gIG9uRE9NQ29udGVudExvYWRlZCxcclxuICBpc1JUTCxcclxuICBkZWZpbmVKUXVlcnlQbHVnaW4sXHJcbiAgZ2V0RWxlbWVudCxcclxuICBpc0Rpc2FibGVkLFxyXG4gIGV4ZWN1dGUsXHJcbiAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbixcclxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcclxufTtcclxuIiwiaW1wb3J0IHsgZ2V0alF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWwvaW5kZXhcIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5Db25zdGFudHNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jb25zdCBuYW1lc3BhY2VSZWdleCA9IC9bXi5dKig/PVxcLi4qKVxcLnwuKi87XHJcbmNvbnN0IHN0cmlwTmFtZVJlZ2V4ID0gL1xcLi4qLztcclxuY29uc3Qgc3RyaXBVaWRSZWdleCA9IC86OlxcZCskLztcclxuY29uc3QgZXZlbnRSZWdpc3RyeSA9IHt9OyAvLyBFdmVudHMgc3RvcmFnZVxyXG5sZXQgdWlkRXZlbnQgPSAxO1xyXG5jb25zdCBjdXN0b21FdmVudHMgPSB7XHJcbiAgbW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcclxuICBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXHJcbn07XHJcbmNvbnN0IGN1c3RvbUV2ZW50c1JlZ2V4ID0gL14obW91c2VlbnRlcnxtb3VzZWxlYXZlKS9pO1xyXG5jb25zdCBuYXRpdmVFdmVudHMgPSBuZXcgU2V0KFtcclxuICBcImNsaWNrXCIsXHJcbiAgXCJkYmxjbGlja1wiLFxyXG4gIFwibW91c2V1cFwiLFxyXG4gIFwibW91c2Vkb3duXCIsXHJcbiAgXCJjb250ZXh0bWVudVwiLFxyXG4gIFwibW91c2V3aGVlbFwiLFxyXG4gIFwiRE9NTW91c2VTY3JvbGxcIixcclxuICBcIm1vdXNlb3ZlclwiLFxyXG4gIFwibW91c2VvdXRcIixcclxuICBcIm1vdXNlbW92ZVwiLFxyXG4gIFwic2VsZWN0c3RhcnRcIixcclxuICBcInNlbGVjdGVuZFwiLFxyXG4gIFwia2V5ZG93blwiLFxyXG4gIFwia2V5cHJlc3NcIixcclxuICBcImtleXVwXCIsXHJcbiAgXCJvcmllbnRhdGlvbmNoYW5nZVwiLFxyXG4gIFwidG91Y2hzdGFydFwiLFxyXG4gIFwidG91Y2htb3ZlXCIsXHJcbiAgXCJ0b3VjaGVuZFwiLFxyXG4gIFwidG91Y2hjYW5jZWxcIixcclxuICBcInBvaW50ZXJkb3duXCIsXHJcbiAgXCJwb2ludGVybW92ZVwiLFxyXG4gIFwicG9pbnRlcnVwXCIsXHJcbiAgXCJwb2ludGVybGVhdmVcIixcclxuICBcInBvaW50ZXJjYW5jZWxcIixcclxuICBcImdlc3R1cmVzdGFydFwiLFxyXG4gIFwiZ2VzdHVyZWNoYW5nZVwiLFxyXG4gIFwiZ2VzdHVyZWVuZFwiLFxyXG4gIFwiZm9jdXNcIixcclxuICBcImJsdXJcIixcclxuICBcImNoYW5nZVwiLFxyXG4gIFwicmVzZXRcIixcclxuICBcInNlbGVjdFwiLFxyXG4gIFwic3VibWl0XCIsXHJcbiAgXCJmb2N1c2luXCIsXHJcbiAgXCJmb2N1c291dFwiLFxyXG4gIFwibG9hZFwiLFxyXG4gIFwidW5sb2FkXCIsXHJcbiAgXCJiZWZvcmV1bmxvYWRcIixcclxuICBcInJlc2l6ZVwiLFxyXG4gIFwibW92ZVwiLFxyXG4gIFwiRE9NQ29udGVudExvYWRlZFwiLFxyXG4gIFwicmVhZHlzdGF0ZWNoYW5nZVwiLFxyXG4gIFwiZXJyb3JcIixcclxuICBcImFib3J0XCIsXHJcbiAgXCJzY3JvbGxcIixcclxuXSk7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFByaXZhdGUgbWV0aG9kc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5mdW5jdGlvbiBnZXRVaWRFdmVudChlbGVtZW50LCB1aWQpIHtcclxuICByZXR1cm4gKHVpZCAmJiBgJHt1aWR9Ojoke3VpZEV2ZW50Kyt9YCkgfHwgZWxlbWVudC51aWRFdmVudCB8fCB1aWRFdmVudCsrO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFdmVudChlbGVtZW50KSB7XHJcbiAgY29uc3QgdWlkID0gZ2V0VWlkRXZlbnQoZWxlbWVudCk7XHJcblxyXG4gIGVsZW1lbnQudWlkRXZlbnQgPSB1aWQ7XHJcbiAgZXZlbnRSZWdpc3RyeVt1aWRdID0gZXZlbnRSZWdpc3RyeVt1aWRdIHx8IHt9O1xyXG5cclxuICByZXR1cm4gZXZlbnRSZWdpc3RyeVt1aWRdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGZuKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcclxuICAgIGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gZWxlbWVudDtcclxuXHJcbiAgICBpZiAoaGFuZGxlci5vbmVPZmYpIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBmbik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZuLmFwcGx5KGVsZW1lbnQsIFtldmVudF0pO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJvb3RzdHJhcERlbGVnYXRpb25IYW5kbGVyKGVsZW1lbnQsIHNlbGVjdG9yLCBmbikge1xyXG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XHJcbiAgICBjb25zdCBkb21FbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcblxyXG4gICAgZm9yIChcclxuICAgICAgbGV0IHsgdGFyZ2V0IH0gPSBldmVudDtcclxuICAgICAgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpcztcclxuICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGVcclxuICAgICkge1xyXG4gICAgICBmb3IgKGxldCBpID0gZG9tRWxlbWVudHMubGVuZ3RoOyBpLS07IFwiXCIpIHtcclxuICAgICAgICBpZiAoZG9tRWxlbWVudHNbaV0gPT09IHRhcmdldCkge1xyXG4gICAgICAgICAgZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0YXJnZXQ7XHJcblxyXG4gICAgICAgICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XHJcbiAgICAgICAgICAgIEV2ZW50SGFuZGxlci5vZmYoZWxlbWVudCwgZXZlbnQudHlwZSwgZm4pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0YXJnZXQsIFtldmVudF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFRvIHBsZWFzZSBFU0xpbnRcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRIYW5kbGVyKGV2ZW50cywgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yID0gbnVsbCkge1xyXG4gIGNvbnN0IHVpZEV2ZW50TGlzdCA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB1aWRFdmVudExpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgIGNvbnN0IGV2ZW50ID0gZXZlbnRzW3VpZEV2ZW50TGlzdFtpXV07XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBldmVudC5vcmlnaW5hbEhhbmRsZXIgPT09IGhhbmRsZXIgJiZcclxuICAgICAgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yID09PSBkZWxlZ2F0aW9uU2VsZWN0b3JcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcclxuICBjb25zdCBkZWxlZ2F0aW9uID0gdHlwZW9mIGhhbmRsZXIgPT09IFwic3RyaW5nXCI7XHJcbiAgY29uc3Qgb3JpZ2luYWxIYW5kbGVyID0gZGVsZWdhdGlvbiA/IGRlbGVnYXRpb25GbiA6IGhhbmRsZXI7XHJcblxyXG4gIGxldCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQob3JpZ2luYWxUeXBlRXZlbnQpO1xyXG4gIGNvbnN0IGlzTmF0aXZlID0gbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpO1xyXG5cclxuICBpZiAoIWlzTmF0aXZlKSB7XHJcbiAgICB0eXBlRXZlbnQgPSBvcmlnaW5hbFR5cGVFdmVudDtcclxuICB9XHJcblxyXG4gIHJldHVybiBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRIYW5kbGVyKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIG9uZU9mZikge1xyXG4gIGlmICh0eXBlb2Ygb3JpZ2luYWxUeXBlRXZlbnQgIT09IFwic3RyaW5nXCIgfHwgIWVsZW1lbnQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICghaGFuZGxlcikge1xyXG4gICAgaGFuZGxlciA9IGRlbGVnYXRpb25GbjtcclxuICAgIGRlbGVnYXRpb25GbiA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyBpbiBjYXNlIG9mIG1vdXNlZW50ZXIgb3IgbW91c2VsZWF2ZSB3cmFwIHRoZSBoYW5kbGVyIHdpdGhpbiBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGZvciBpdHMgRE9NIHBvc2l0aW9uXHJcbiAgLy8gdGhpcyBwcmV2ZW50cyB0aGUgaGFuZGxlciBmcm9tIGJlaW5nIGRpc3BhdGNoZWQgdGhlIHNhbWUgd2F5IGFzIG1vdXNlb3ZlciBvciBtb3VzZW91dCBkb2VzXHJcbiAgaWYgKGN1c3RvbUV2ZW50c1JlZ2V4LnRlc3Qob3JpZ2luYWxUeXBlRXZlbnQpKSB7XHJcbiAgICBjb25zdCB3cmFwRm4gPSAoZm4pID0+IHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICFldmVudC5yZWxhdGVkVGFyZ2V0IHx8XHJcbiAgICAgICAgICAoZXZlbnQucmVsYXRlZFRhcmdldCAhPT0gZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiZcclxuICAgICAgICAgICAgIWV2ZW50LmRlbGVnYXRlVGFyZ2V0LmNvbnRhaW5zKGV2ZW50LnJlbGF0ZWRUYXJnZXQpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGRlbGVnYXRpb25Gbikge1xyXG4gICAgICBkZWxlZ2F0aW9uRm4gPSB3cmFwRm4oZGVsZWdhdGlvbkZuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGhhbmRsZXIgPSB3cmFwRm4oaGFuZGxlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1zKFxyXG4gICAgb3JpZ2luYWxUeXBlRXZlbnQsXHJcbiAgICBoYW5kbGVyLFxyXG4gICAgZGVsZWdhdGlvbkZuXHJcbiAgKTtcclxuICBjb25zdCBldmVudHMgPSBnZXRFdmVudChlbGVtZW50KTtcclxuICBjb25zdCBoYW5kbGVycyA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IChldmVudHNbdHlwZUV2ZW50XSA9IHt9KTtcclxuICBjb25zdCBwcmV2aW91c0ZuID0gZmluZEhhbmRsZXIoXHJcbiAgICBoYW5kbGVycyxcclxuICAgIG9yaWdpbmFsSGFuZGxlcixcclxuICAgIGRlbGVnYXRpb24gPyBoYW5kbGVyIDogbnVsbFxyXG4gICk7XHJcblxyXG4gIGlmIChwcmV2aW91c0ZuKSB7XHJcbiAgICBwcmV2aW91c0ZuLm9uZU9mZiA9IHByZXZpb3VzRm4ub25lT2ZmICYmIG9uZU9mZjtcclxuXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCB1aWQgPSBnZXRVaWRFdmVudChcclxuICAgIG9yaWdpbmFsSGFuZGxlcixcclxuICAgIG9yaWdpbmFsVHlwZUV2ZW50LnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsIFwiXCIpXHJcbiAgKTtcclxuICBjb25zdCBmbiA9IGRlbGVnYXRpb25cclxuICAgID8gYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKVxyXG4gICAgOiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGhhbmRsZXIpO1xyXG5cclxuICBmbi5kZWxlZ2F0aW9uU2VsZWN0b3IgPSBkZWxlZ2F0aW9uID8gaGFuZGxlciA6IG51bGw7XHJcbiAgZm4ub3JpZ2luYWxIYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyO1xyXG4gIGZuLm9uZU9mZiA9IG9uZU9mZjtcclxuICBmbi51aWRFdmVudCA9IHVpZDtcclxuICBoYW5kbGVyc1t1aWRdID0gZm47XHJcblxyXG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlRXZlbnQsIGZuLCBkZWxlZ2F0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihcclxuICBlbGVtZW50LFxyXG4gIGV2ZW50cyxcclxuICB0eXBlRXZlbnQsXHJcbiAgaGFuZGxlcixcclxuICBkZWxlZ2F0aW9uU2VsZWN0b3JcclxuKSB7XHJcbiAgY29uc3QgZm4gPSBmaW5kSGFuZGxlcihldmVudHNbdHlwZUV2ZW50XSwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKTtcclxuXHJcbiAgaWYgKCFmbikge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGVFdmVudCwgZm4sIEJvb2xlYW4oZGVsZWdhdGlvblNlbGVjdG9yKSk7XHJcbiAgZGVsZXRlIGV2ZW50c1t0eXBlRXZlbnRdW2ZuLnVpZEV2ZW50XTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBuYW1lc3BhY2UpIHtcclxuICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xyXG5cclxuICBPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkuZm9yRWFjaCgoaGFuZGxlcktleSkgPT4ge1xyXG4gICAgaWYgKGhhbmRsZXJLZXkuaW5jbHVkZXMobmFtZXNwYWNlKSkge1xyXG4gICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2hhbmRsZXJLZXldO1xyXG5cclxuICAgICAgcmVtb3ZlSGFuZGxlcihcclxuICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgIGV2ZW50cyxcclxuICAgICAgICB0eXBlRXZlbnQsXHJcbiAgICAgICAgZXZlbnQub3JpZ2luYWxIYW5kbGVyLFxyXG4gICAgICAgIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvclxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUeXBlRXZlbnQoZXZlbnQpIHtcclxuICAvLyBhbGxvdyB0byBnZXQgdGhlIG5hdGl2ZSBldmVudHMgZnJvbSBuYW1lc3BhY2VkIGV2ZW50cyAoJ2NsaWNrLnR3ZS5idXR0b24nIC0tPiAnY2xpY2snKVxyXG4gIGV2ZW50ID0gZXZlbnQucmVwbGFjZShzdHJpcE5hbWVSZWdleCwgXCJcIik7XHJcbiAgcmV0dXJuIGN1c3RvbUV2ZW50c1tldmVudF0gfHwgZXZlbnQ7XHJcbn1cclxuXHJcbmNvbnN0IEV2ZW50SGFuZGxlciA9IHtcclxuICBvbihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XHJcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIGZhbHNlKTtcclxuICB9LFxyXG5cclxuICBvbmUoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xyXG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCB0cnVlKTtcclxuICB9LFxyXG5cclxuICBvZmYoZWxlbWVudCwgb3JpZ2luYWxUeXBlRXZlbnQsIGhhbmRsZXIsIGRlbGVnYXRpb25Gbikge1xyXG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gXCJzdHJpbmdcIiB8fCAhZWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgW2RlbGVnYXRpb24sIG9yaWdpbmFsSGFuZGxlciwgdHlwZUV2ZW50XSA9IG5vcm1hbGl6ZVBhcmFtcyhcclxuICAgICAgb3JpZ2luYWxUeXBlRXZlbnQsXHJcbiAgICAgIGhhbmRsZXIsXHJcbiAgICAgIGRlbGVnYXRpb25GblxyXG4gICAgKTtcclxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gdHlwZUV2ZW50ICE9PSBvcmlnaW5hbFR5cGVFdmVudDtcclxuICAgIGNvbnN0IGV2ZW50cyA9IGdldEV2ZW50KGVsZW1lbnQpO1xyXG4gICAgY29uc3QgaXNOYW1lc3BhY2UgPSBvcmlnaW5hbFR5cGVFdmVudC5zdGFydHNXaXRoKFwiLlwiKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIG9yaWdpbmFsSGFuZGxlciAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAvLyBTaW1wbGVzdCBjYXNlOiBoYW5kbGVyIGlzIHBhc3NlZCwgcmVtb3ZlIHRoYXQgbGlzdGVuZXIgT05MWS5cclxuICAgICAgaWYgKCFldmVudHMgfHwgIWV2ZW50c1t0eXBlRXZlbnRdKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZW1vdmVIYW5kbGVyKFxyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgZXZlbnRzLFxyXG4gICAgICAgIHR5cGVFdmVudCxcclxuICAgICAgICBvcmlnaW5hbEhhbmRsZXIsXHJcbiAgICAgICAgZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNOYW1lc3BhY2UpIHtcclxuICAgICAgT2JqZWN0LmtleXMoZXZlbnRzKS5mb3JFYWNoKChlbGVtZW50RXZlbnQpID0+IHtcclxuICAgICAgICByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoXHJcbiAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgZXZlbnRzLFxyXG4gICAgICAgICAgZWxlbWVudEV2ZW50LFxyXG4gICAgICAgICAgb3JpZ2luYWxUeXBlRXZlbnQuc2xpY2UoMSlcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xyXG4gICAgT2JqZWN0LmtleXMoc3RvcmVFbGVtZW50RXZlbnQpLmZvckVhY2goKGtleUhhbmRsZXJzKSA9PiB7XHJcbiAgICAgIGNvbnN0IGhhbmRsZXJLZXkgPSBrZXlIYW5kbGVycy5yZXBsYWNlKHN0cmlwVWlkUmVnZXgsIFwiXCIpO1xyXG5cclxuICAgICAgaWYgKCFpbk5hbWVzcGFjZSB8fCBvcmlnaW5hbFR5cGVFdmVudC5pbmNsdWRlcyhoYW5kbGVyS2V5KSkge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gc3RvcmVFbGVtZW50RXZlbnRba2V5SGFuZGxlcnNdO1xyXG5cclxuICAgICAgICByZW1vdmVIYW5kbGVyKFxyXG4gICAgICAgICAgZWxlbWVudCxcclxuICAgICAgICAgIGV2ZW50cyxcclxuICAgICAgICAgIHR5cGVFdmVudCxcclxuICAgICAgICAgIGV2ZW50Lm9yaWdpbmFsSGFuZGxlcixcclxuICAgICAgICAgIGV2ZW50LmRlbGVnYXRpb25TZWxlY3RvclxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIHRyaWdnZXIoZWxlbWVudCwgZXZlbnQsIGFyZ3MpIHtcclxuICAgIGlmICh0eXBlb2YgZXZlbnQgIT09IFwic3RyaW5nXCIgfHwgIWVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpO1xyXG4gICAgY29uc3QgdHlwZUV2ZW50ID0gZ2V0VHlwZUV2ZW50KGV2ZW50KTtcclxuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gZXZlbnQgIT09IHR5cGVFdmVudDtcclxuICAgIGNvbnN0IGlzTmF0aXZlID0gbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpO1xyXG5cclxuICAgIGxldCBqUXVlcnlFdmVudDtcclxuICAgIGxldCBidWJibGVzID0gdHJ1ZTtcclxuICAgIGxldCBuYXRpdmVEaXNwYXRjaCA9IHRydWU7XHJcbiAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG4gICAgbGV0IGV2dCA9IG51bGw7XHJcblxyXG4gICAgaWYgKGluTmFtZXNwYWNlICYmICQpIHtcclxuICAgICAgalF1ZXJ5RXZlbnQgPSAkLkV2ZW50KGV2ZW50LCBhcmdzKTtcclxuXHJcbiAgICAgICQoZWxlbWVudCkudHJpZ2dlcihqUXVlcnlFdmVudCk7XHJcbiAgICAgIGJ1YmJsZXMgPSAhalF1ZXJ5RXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtcclxuICAgICAgbmF0aXZlRGlzcGF0Y2ggPSAhalF1ZXJ5RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTtcclxuICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGpRdWVyeUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc05hdGl2ZSkge1xyXG4gICAgICBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkhUTUxFdmVudHNcIik7XHJcbiAgICAgIGV2dC5pbml0RXZlbnQodHlwZUV2ZW50LCBidWJibGVzLCB0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChldmVudCwge1xyXG4gICAgICAgIGJ1YmJsZXMsXHJcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbWVyZ2UgY3VzdG9tIGluZm9ybWF0aW9uIGluIG91ciBldmVudFxyXG4gICAgaWYgKHR5cGVvZiBhcmdzICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKGFyZ3MpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShldnQsIGtleSwge1xyXG4gICAgICAgICAgZ2V0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJnc1trZXldO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5hdGl2ZURpc3BhdGNoKSB7XHJcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCAmJiB0eXBlb2YgalF1ZXJ5RXZlbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgalF1ZXJ5RXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXZ0O1xyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgRXZlbnRIYW5kbGVyTXVsdGkgPSB7XHJcbiAgb24oZWxlbWVudCwgZXZlbnRzTmFtZSwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XHJcbiAgICBjb25zdCBldmVudHMgPSBldmVudHNOYW1lLnNwbGl0KFwiIFwiKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgZXZlbnRzW2ldLCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgb2ZmKGVsZW1lbnQsIG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcclxuICAgIGNvbnN0IGV2ZW50cyA9IG9yaWdpbmFsVHlwZUV2ZW50LnNwbGl0KFwiIFwiKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsIGV2ZW50c1tpXSwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKTtcclxuICAgIH1cclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXZlbnRIYW5kbGVyO1xyXG4iLCJpbXBvcnQgRGF0YSBmcm9tIFwiLi9kb20vZGF0YVwiO1xyXG5pbXBvcnQgeyBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uLCBnZXRFbGVtZW50IH0gZnJvbSBcIi4vdXRpbC9pbmRleFwiO1xyXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuL2RvbS9ldmVudC1oYW5kbGVyXCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgVkVSU0lPTiA9IFwiNS4xLjNcIjtcclxuXHJcbmNsYXNzIEJhc2VDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgIGVsZW1lbnQgPSBnZXRFbGVtZW50KGVsZW1lbnQpO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICBEYXRhLnNldERhdGEodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgRGF0YS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xyXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XHJcblxyXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaCgocHJvcGVydHlOYW1lKSA9PiB7XHJcbiAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IG51bGw7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9xdWV1ZUNhbGxiYWNrKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkID0gdHJ1ZSkge1xyXG4gICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihjYWxsYmFjaywgZWxlbWVudCwgaXNBbmltYXRlZCk7XHJcbiAgfVxyXG5cclxuICAvKiogU3RhdGljICovXHJcblxyXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gRGF0YS5nZXREYXRhKGdldEVsZW1lbnQoZWxlbWVudCksIHRoaXMuREFUQV9LRVkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuZ2V0SW5zdGFuY2UoZWxlbWVudCkgfHxcclxuICAgICAgbmV3IHRoaXMoZWxlbWVudCwgdHlwZW9mIGNvbmZpZyA9PT0gXCJvYmplY3RcIiA/IGNvbmZpZyA6IG51bGwpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBWRVJTSU9OKCkge1xyXG4gICAgcmV0dXJuIFZFUlNJT047XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICdZb3UgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHN0YXRpYyBtZXRob2QgXCJOQU1FXCIsIGZvciBlYWNoIGNvbXBvbmVudCEnXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcclxuICAgIHJldHVybiBgdHdlLiR7dGhpcy5OQU1FfWA7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHtcclxuICAgIHJldHVybiBgLiR7dGhpcy5EQVRBX0tFWX1gO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmFzZUNvbXBvbmVudDtcclxuIiwiaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgTkFNRSA9IFwiYnV0dG9uXCI7XHJcblxyXG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSA9IFwiYWN0aXZlXCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ2xhc3MgRGVmaW5pdGlvblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNsYXNzIEJ1dHRvbiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWNcclxuXHJcbiAgdG9nZ2xlKCkge1xyXG4gICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFxyXG4gICAgICBcImFyaWEtcHJlc3NlZFwiLFxyXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoQ0xBU1NfTkFNRV9BQ1RJVkUpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljXHJcblxyXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IEJ1dHRvbi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xyXG5cclxuICAgICAgaWYgKGNvbmZpZyA9PT0gXCJ0b2dnbGVcIikge1xyXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcclxuIiwiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlTmFtZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50ID8gKGVsZW1lbnQubm9kZU5hbWUgfHwgJycpLnRvTG93ZXJDYXNlKCkgOiBudWxsO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gVGhpcyBtb2RpZmllciB0YWtlcyB0aGUgc3R5bGVzIHByZXBhcmVkIGJ5IHRoZSBgY29tcHV0ZVN0eWxlc2AgbW9kaWZpZXJcbi8vIGFuZCBhcHBsaWVzIHRoZW0gdG8gdGhlIEhUTUxFbGVtZW50cyBzdWNoIGFzIHBvcHBlciBhbmQgYXJyb3dcblxuZnVuY3Rpb24gYXBwbHlTdHlsZXMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBzdHlsZSA9IHN0YXRlLnN0eWxlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0byBleHRlbmQgdGhpcyBwcm9wZXJ0eSwgYnV0IGl0J3MgdGhlIG1vc3RcbiAgICAvLyBlZmZlY3RpdmUgd2F5IHRvIGFwcGx5IHN0eWxlcyB0byBhbiBIVE1MRWxlbWVudFxuICAgIC8vICRGbG93Rml4TWVbY2Fubm90LXdyaXRlXVxuXG5cbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuXG4gICAgICBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUgPT09IHRydWUgPyAnJyA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZTtcbiAgdmFyIGluaXRpYWxTdHlsZXMgPSB7XG4gICAgcG9wcGVyOiB7XG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGxlZnQ6ICcwJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbWFyZ2luOiAnMCdcbiAgICB9LFxuICAgIGFycm93OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgcmVmZXJlbmNlOiB7fVxuICB9O1xuICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLnBvcHBlci5zdHlsZSwgaW5pdGlhbFN0eWxlcy5wb3BwZXIpO1xuICBzdGF0ZS5zdHlsZXMgPSBpbml0aWFsU3R5bGVzO1xuXG4gIGlmIChzdGF0ZS5lbGVtZW50cy5hcnJvdykge1xuICAgIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMuYXJyb3cuc3R5bGUsIGluaXRpYWxTdHlsZXMuYXJyb3cpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBPYmplY3Qua2V5cyhzdGF0ZS5lbGVtZW50cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1tuYW1lXTtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICAgIHZhciBzdHlsZVByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhzdGF0ZS5zdHlsZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBzdGF0ZS5zdHlsZXNbbmFtZV0gOiBpbml0aWFsU3R5bGVzW25hbWVdKTsgLy8gU2V0IGFsbCB2YWx1ZXMgdG8gYW4gZW1wdHkgc3RyaW5nIHRvIHVuc2V0IHRoZW1cblxuICAgICAgdmFyIHN0eWxlID0gc3R5bGVQcm9wZXJ0aWVzLnJlZHVjZShmdW5jdGlvbiAoc3R5bGUsIHByb3BlcnR5KSB7XG4gICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9ICcnO1xuICAgICAgICByZXR1cm4gc3R5bGU7XG4gICAgICB9LCB7fSk7IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgIWdldE5vZGVOYW1lKGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGFwcGx5U3R5bGVzLFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsnY29tcHV0ZVN0eWxlcyddXG59OyIsImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCJleHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgcm91bmQgPSBNYXRoLnJvdW5kOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVBU3RyaW5nKCkge1xuICB2YXIgdWFEYXRhID0gbmF2aWdhdG9yLnVzZXJBZ2VudERhdGE7XG5cbiAgaWYgKHVhRGF0YSAhPSBudWxsICYmIHVhRGF0YS5icmFuZHMgJiYgQXJyYXkuaXNBcnJheSh1YURhdGEuYnJhbmRzKSkge1xuICAgIHJldHVybiB1YURhdGEuYnJhbmRzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uYnJhbmQgKyBcIi9cIiArIGl0ZW0udmVyc2lvbjtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbn0iLCJpbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXlvdXRWaWV3cG9ydCgpIHtcbiAgcmV0dXJuICEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xufSIsImltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgaW5jbHVkZVNjYWxlLCBpc0ZpeGVkU3RyYXRlZ3kpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNGaXhlZFN0cmF0ZWd5ID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkU3RyYXRlZ3kgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciBjbGllbnRSZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHNjYWxlWCA9IDE7XG4gIHZhciBzY2FsZVkgPSAxO1xuXG4gIGlmIChpbmNsdWRlU2NhbGUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIHNjYWxlWCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggPiAwID8gcm91bmQoY2xpZW50UmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDEgOiAxO1xuICAgIHNjYWxlWSA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0ID4gMCA/IHJvdW5kKGNsaWVudFJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDEgOiAxO1xuICB9XG5cbiAgdmFyIF9yZWYgPSBpc0VsZW1lbnQoZWxlbWVudCkgPyBnZXRXaW5kb3coZWxlbWVudCkgOiB3aW5kb3csXG4gICAgICB2aXN1YWxWaWV3cG9ydCA9IF9yZWYudmlzdWFsVmlld3BvcnQ7XG5cbiAgdmFyIGFkZFZpc3VhbE9mZnNldHMgPSAhaXNMYXlvdXRWaWV3cG9ydCgpICYmIGlzRml4ZWRTdHJhdGVneTtcbiAgdmFyIHggPSAoY2xpZW50UmVjdC5sZWZ0ICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0IDogMCkpIC8gc2NhbGVYO1xuICB2YXIgeSA9IChjbGllbnRSZWN0LnRvcCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0VG9wIDogMCkpIC8gc2NhbGVZO1xuICB2YXIgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoIC8gc2NhbGVYO1xuICB2YXIgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQgLyBzY2FsZVk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHRvcDogeSxcbiAgICByaWdodDogeCArIHdpZHRoLFxuICAgIGJvdHRvbTogeSArIGhlaWdodCxcbiAgICBsZWZ0OiB4LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSAvZmlyZWZveC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG4gIHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgaWYgKGlzU2hhZG93Um9vdChjdXJyZW50Tm9kZSkpIHtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmhvc3Q7XG4gIH1cblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsImltcG9ydCB7IG1heCBhcyBtYXRoTWF4LCBtaW4gYXMgbWF0aE1pbiB9IGZyb20gXCIuL21hdGguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KSB7XG4gIHJldHVybiBtYXRoTWF4KG1pbiwgbWF0aE1pbih2YWx1ZSwgbWF4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluTWF4Q2xhbXAobWluLCB2YWx1ZSwgbWF4KSB7XG4gIHZhciB2ID0gd2l0aGluKG1pbiwgdmFsdWUsIG1heCk7XG4gIHJldHVybiB2ID4gbWF4ID8gbWF4IDogdjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhwYW5kVG9IYXNoTWFwKHZhbHVlLCBrZXlzKSB7XG4gIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAoaGFzaE1hcCwga2V5KSB7XG4gICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIGhhc2hNYXA7XG4gIH0sIHt9KTtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xufSIsImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYsIHdpbikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogcm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzLFxuICAgICAgaXNGaXhlZCA9IF9yZWYyLmlzRml4ZWQ7XG4gIHZhciBfb2Zmc2V0cyR4ID0gb2Zmc2V0cy54LFxuICAgICAgeCA9IF9vZmZzZXRzJHggPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR4LFxuICAgICAgX29mZnNldHMkeSA9IG9mZnNldHMueSxcbiAgICAgIHkgPSBfb2Zmc2V0cyR5ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeTtcblxuICB2YXIgX3JlZjMgPSB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWYzLng7XG4gIHkgPSBfcmVmMy55O1xuICB2YXIgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgdmFyIGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG4gIHZhciBzaWRlWCA9IGxlZnQ7XG4gIHZhciBzaWRlWSA9IHRvcDtcbiAgdmFyIHdpbiA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgdmFyIGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICB2YXIgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiYgcG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cblxuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCB8fCAocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIHZhciBvZmZzZXRZID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQuaGVpZ2h0IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF07XG4gICAgICB5IC09IG9mZnNldFkgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQgfHwgKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIHZhciBvZmZzZXRYID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFt3aWR0aFByb3BdO1xuICAgICAgeCAtPSBvZmZzZXRYIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgdmFyIF9yZWY0ID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9LCBnZXRXaW5kb3cocG9wcGVyKSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWY0Lng7XG4gIHkgPSBfcmVmNC55O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY1KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY1LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY1Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCJ2YXIgaGFzaCA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgYm90dG9tOiAndG9wJyxcbiAgdG9wOiAnYm90dG9tJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL2xlZnR8cmlnaHR8Ym90dG9tfHRvcC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpIHtcbiAgLy8gSWYgPGh0bWw+IGhhcyBhIENTUyB3aWR0aCBncmVhdGVyIHRoYW4gdGhlIHZpZXdwb3J0LCB0aGVuIHRoaXMgd2lsbCBiZVxuICAvLyBpbmNvcnJlY3QgZm9yIFJUTC5cbiAgLy8gUG9wcGVyIDEgaXMgYnJva2VuIGluIHRoaXMgY2FzZSBhbmQgbmV2ZXIgaGFkIGEgYnVnIHJlcG9ydCBzbyBsZXQncyBhc3N1bWVcbiAgLy8gaXQncyBub3QgYW4gaXNzdWUuIEkgZG9uJ3QgdGhpbmsgYW55b25lIGV2ZXIgc3BlY2lmaWVzIHdpZHRoIG9uIDxodG1sPlxuICAvLyBhbnl3YXkuXG4gIC8vIEJyb3dzZXJzIHdoZXJlIHRoZSBsZWZ0IHNjcm9sbGJhciBkb2Vzbid0IGNhdXNlIGFuIGlzc3VlIHJlcG9ydCBgMGAgZm9yXG4gIC8vIHRoaXMgKGUuZy4gRWRnZSAyMDE5LCBJRTExLCBTYWZhcmkpXG4gIHJldHVybiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKS5sZWZ0ICsgZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpLnNjcm9sbExlZnQ7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICB2YXIgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keTtcbiAgdmFyIHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTY3JvbGxQYXJlbnQoZWxlbWVudCkge1xuICAvLyBGaXJlZm94IHdhbnRzIHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG4gIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCksXG4gICAgICBvdmVyZmxvdyA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dYLFxuICAgICAgb3ZlcmZsb3dZID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3dZO1xuXG4gIHJldHVybiAvYXV0b3xzY3JvbGx8b3ZlcmxheXxoaWRkZW4vLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpO1xufSIsImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0NsaWVudFJlY3QocmVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcmVjdCwge1xuICAgIGxlZnQ6IHJlY3QueCxcbiAgICB0b3A6IHJlY3QueSxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRzdHJhdGVneSA9IF9vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgc3RyYXRlZ3kgPSBfb3B0aW9ucyRzdHJhdGVneSA9PT0gdm9pZCAwID8gc3RhdGUuc3RyYXRlZ3kgOiBfb3B0aW9ucyRzdHJhdGVneSxcbiAgICAgIF9vcHRpb25zJGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zJGJvdW5kYXJ5ID09PSB2b2lkIDAgPyBjbGlwcGluZ1BhcmVudHMgOiBfb3B0aW9ucyRib3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zJHJvb3RCb3VuZGFyeSA9PT0gdm9pZCAwID8gdmlld3BvcnQgOiBfb3B0aW9ucyRyb290Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRlbGVtZW50Q29udGUgPSBfb3B0aW9ucy5lbGVtZW50Q29udGV4dCxcbiAgICAgIGVsZW1lbnRDb250ZXh0ID0gX29wdGlvbnMkZWxlbWVudENvbnRlID09PSB2b2lkIDAgPyBwb3BwZXIgOiBfb3B0aW9ucyRlbGVtZW50Q29udGUsXG4gICAgICBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9IF9vcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBfb3B0aW9ucyRhbHRCb3VuZGFyeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zJHBhZGRpbmcgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRwYWRkaW5nO1xuICB2YXIgcGFkZGluZ09iamVjdCA9IG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG4gIHZhciBhbHRDb250ZXh0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHJlZmVyZW5jZSA6IHBvcHBlcjtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICB2YXIgY2xpcHBpbmdDbGllbnRSZWN0ID0gZ2V0Q2xpcHBpbmdSZWN0KGlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQgOiBlbGVtZW50LmNvbnRleHRFbGVtZW50IHx8IGdldERvY3VtZW50RWxlbWVudChzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbHRBeGlzKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09ICd4JyA/ICd5JyA6ICd4Jztcbn0iLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkLCBpc0ZpeGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZuKSB7XG4gIHZhciBwZW5kaW5nO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghcGVuZGluZykge1xuICAgICAgcGVuZGluZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHBlbmRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVuZGluZztcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZywgY3VycmVudCwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucywgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIGN1cnJlbnQuZGF0YSlcbiAgICB9KSA6IGN1cnJlbnQ7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pOyAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhtZXJnZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFtrZXldO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IG9yZGVyTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4vdXRpbHMvZGVib3VuY2UuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbW9kaWZpZXJzOiBbXSxcbiAgc3RyYXRlZ3k6ICdhYnNvbHV0ZSdcbn07XG5cbmZ1bmN0aW9uIGFyZVZhbGlkRWxlbWVudHMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gIWFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiAhKGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pO1xuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIOKAkyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUg4oCTIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgICAgIF9yZWYkb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZi5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlc107XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyIsImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwiZnVuY3Rpb24gbm9ybWFsaXplRGF0YSh2YWwpIHtcclxuICBpZiAodmFsID09PSBcInRydWVcIikge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpZiAodmFsID09PSBcImZhbHNlXCIpIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGlmICh2YWwgPT09IE51bWJlcih2YWwpLnRvU3RyaW5nKCkpIHtcclxuICAgIHJldHVybiBOdW1iZXIodmFsKTtcclxuICB9XHJcblxyXG4gIGlmICh2YWwgPT09IFwiXCIgfHwgdmFsID09PSBcIm51bGxcIikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBub3JtYWxpemVEYXRhS2V5KGtleSkge1xyXG4gIHJldHVybiBrZXkucmVwbGFjZSgvW0EtWl0vZywgKGNocikgPT4gYC0ke2Noci50b0xvd2VyQ2FzZSgpfWApO1xyXG59XHJcblxyXG5jb25zdCBNYW5pcHVsYXRvciA9IHtcclxuICBzZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIGtleSwgdmFsdWUpIHtcclxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLXR3ZS0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gLCB2YWx1ZSk7XHJcbiAgfSxcclxuXHJcbiAgcmVtb3ZlRGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcclxuICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLXR3ZS0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKTtcclxuICB9LFxyXG5cclxuICBnZXREYXRhQXR0cmlidXRlcyhlbGVtZW50KSB7XHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpXHJcbiAgICAgIC5maWx0ZXIoKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoXCJ0d2VcIikpXHJcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJ0d2VDbGFzc1wiKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHB1cmVLZXkgPSBrZXkucmVwbGFjZSgvXnR3ZS8sIFwiXCIpO1xyXG4gICAgICAgIHB1cmVLZXkgPVxyXG4gICAgICAgICAgcHVyZUtleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHB1cmVLZXkuc2xpY2UoMSwgcHVyZUtleS5sZW5ndGgpO1xyXG4gICAgICAgIGF0dHJpYnV0ZXNbcHVyZUtleV0gPSBub3JtYWxpemVEYXRhKGVsZW1lbnQuZGF0YXNldFtrZXldKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XHJcbiAgfSxcclxuXHJcbiAgZ2V0RGF0YUNsYXNzQXR0cmlidXRlcyhlbGVtZW50KSB7XHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7XHJcbiAgICAgIC4uLmVsZW1lbnQuZGF0YXNldCxcclxuICAgIH07XHJcblxyXG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcylcclxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBrZXkuc3RhcnRzV2l0aChcInR3ZUNsYXNzXCIpKVxyXG4gICAgICAuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgbGV0IHB1cmVLZXkgPSBrZXkucmVwbGFjZSgvXnR3ZUNsYXNzLywgXCJcIik7XHJcbiAgICAgICAgcHVyZUtleSA9XHJcbiAgICAgICAgICBwdXJlS2V5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHVyZUtleS5zbGljZSgxLCBwdXJlS2V5Lmxlbmd0aCk7XHJcbiAgICAgICAgYXR0cmlidXRlc1twdXJlS2V5XSA9IG5vcm1hbGl6ZURhdGEoYXR0cmlidXRlc1trZXldKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XHJcbiAgfSxcclxuXHJcbiAgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcclxuICAgIHJldHVybiBub3JtYWxpemVEYXRhKFxyXG4gICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS10d2UtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YClcclxuICAgICk7XHJcbiAgfSxcclxuXHJcbiAgb2Zmc2V0KGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvcDogcmVjdC50b3AgKyBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcclxuICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBwb3NpdGlvbihlbGVtZW50KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IGVsZW1lbnQub2Zmc2V0VG9wLFxyXG4gICAgICBsZWZ0OiBlbGVtZW50Lm9mZnNldExlZnQsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHN0eWxlKGVsZW1lbnQsIHN0eWxlKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcclxuICB9LFxyXG5cclxuICB0b2dnbGVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWVPckxpc3QpIHtcclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgX2NsYXNzTmFtZU9yTGlzdFRvQXJyYXkoY2xhc3NOYW1lT3JMaXN0KS5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcclxuICAgICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lT3JMaXN0KSB7XHJcbiAgICBfY2xhc3NOYW1lT3JMaXN0VG9BcnJheShjbGFzc05hbWVPckxpc3QpLmZvckVhY2goXHJcbiAgICAgIChjbGFzc05hbWUpID0+XHJcbiAgICAgICAgIWVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgJiZcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICBhZGRTdHlsZShlbGVtZW50LCBzdHlsZSkge1xyXG4gICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goKHByb3BlcnR5KSA9PiB7XHJcbiAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gc3R5bGVbcHJvcGVydHldO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lT3JMaXN0KSB7XHJcbiAgICBfY2xhc3NOYW1lT3JMaXN0VG9BcnJheShjbGFzc05hbWVPckxpc3QpLmZvckVhY2goXHJcbiAgICAgIChjbGFzc05hbWUpID0+XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJlxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpXHJcbiAgICApO1xyXG4gIH0sXHJcblxyXG4gIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XHJcbiAgfSxcclxuXHJcbiAgbWF4T2Zmc2V0KGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvcDpcclxuICAgICAgICByZWN0LnRvcCArXHJcbiAgICAgICAgTWF0aC5tYXgoXHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCxcclxuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsXHJcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsWVxyXG4gICAgICAgICksXHJcbiAgICAgIGxlZnQ6XHJcbiAgICAgICAgcmVjdC5sZWZ0ICtcclxuICAgICAgICBNYXRoLm1heChcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCxcclxuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxyXG4gICAgICAgICAgd2luZG93LnNjcm9sbFhcclxuICAgICAgICApLFxyXG4gICAgfTtcclxuICB9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gX2NsYXNzTmFtZU9yTGlzdFRvQXJyYXkoY2xhc3NOYW1lT3JMaXN0KSB7XHJcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVPckxpc3QgPT09IFwic3RyaW5nXCIpIHtcclxuICAgIHJldHVybiBjbGFzc05hbWVPckxpc3Quc3BsaXQoXCIgXCIpO1xyXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjbGFzc05hbWVPckxpc3QpKSB7XHJcbiAgICByZXR1cm4gY2xhc3NOYW1lT3JMaXN0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNYW5pcHVsYXRvcjtcclxuIiwiLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNvbnN0YW50c1xyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmltcG9ydCB7IGlzRGlzYWJsZWQsIGlzVmlzaWJsZSB9IGZyb20gXCIuLi91dGlsL2luZGV4XCI7XHJcblxyXG5jb25zdCBOT0RFX1RFWFQgPSAzO1xyXG5cclxuY29uc3QgU2VsZWN0b3JFbmdpbmUgPSB7XHJcbiAgY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQuY2xvc2VzdChzZWxlY3Rvcik7XHJcbiAgfSxcclxuXHJcbiAgbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQubWF0Y2hlcyhzZWxlY3Rvcik7XHJcbiAgfSxcclxuXHJcbiAgZmluZChzZWxlY3RvciwgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgcmV0dXJuIFtdLmNvbmNhdChcclxuICAgICAgLi4uRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3RvckFsbC5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKVxyXG4gICAgKTtcclxuICB9LFxyXG5cclxuICBmaW5kT25lKHNlbGVjdG9yLCBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICByZXR1cm4gRWxlbWVudC5wcm90b3R5cGUucXVlcnlTZWxlY3Rvci5jYWxsKGVsZW1lbnQsIHNlbGVjdG9yKTtcclxuICB9LFxyXG5cclxuICBjaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xyXG4gICAgY29uc3QgY2hpbGRyZW4gPSBbXS5jb25jYXQoLi4uZWxlbWVudC5jaGlsZHJlbik7XHJcblxyXG4gICAgcmV0dXJuIGNoaWxkcmVuLmZpbHRlcigoY2hpbGQpID0+IGNoaWxkLm1hdGNoZXMoc2VsZWN0b3IpKTtcclxuICB9LFxyXG5cclxuICBwYXJlbnRzKGVsZW1lbnQsIHNlbGVjdG9yKSB7XHJcbiAgICBjb25zdCBwYXJlbnRzID0gW107XHJcblxyXG4gICAgbGV0IGFuY2VzdG9yID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG5cclxuICAgIHdoaWxlIChcclxuICAgICAgYW5jZXN0b3IgJiZcclxuICAgICAgYW5jZXN0b3Iubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXHJcbiAgICAgIGFuY2VzdG9yLm5vZGVUeXBlICE9PSBOT0RFX1RFWFRcclxuICAgICkge1xyXG4gICAgICBpZiAodGhpcy5tYXRjaGVzKGFuY2VzdG9yLCBzZWxlY3RvcikpIHtcclxuICAgICAgICBwYXJlbnRzLnB1c2goYW5jZXN0b3IpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBhcmVudHM7XHJcbiAgfSxcclxuXHJcbiAgcHJldihlbGVtZW50LCBzZWxlY3Rvcikge1xyXG4gICAgbGV0IHByZXZpb3VzID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG5cclxuICAgIHdoaWxlIChwcmV2aW91cykge1xyXG4gICAgICBpZiAocHJldmlvdXMubWF0Y2hlcyhzZWxlY3RvcikpIHtcclxuICAgICAgICByZXR1cm4gW3ByZXZpb3VzXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJldmlvdXMgPSBwcmV2aW91cy5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXTtcclxuICB9LFxyXG5cclxuICBuZXh0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XHJcbiAgICBsZXQgbmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG5cclxuICAgIHdoaWxlIChuZXh0KSB7XHJcbiAgICAgIGlmICh0aGlzLm1hdGNoZXMobmV4dCwgc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgcmV0dXJuIFtuZXh0XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbmV4dCA9IG5leHQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbXTtcclxuICB9LFxyXG5cclxuICBmb2N1c2FibGVDaGlsZHJlbihlbGVtZW50KSB7XHJcbiAgICBjb25zdCBmb2N1c2FibGVzID0gW1xyXG4gICAgICBcImFcIixcclxuICAgICAgXCJidXR0b25cIixcclxuICAgICAgXCJpbnB1dFwiLFxyXG4gICAgICBcInRleHRhcmVhXCIsXHJcbiAgICAgIFwic2VsZWN0XCIsXHJcbiAgICAgIFwiZGV0YWlsc1wiLFxyXG4gICAgICBcIlt0YWJpbmRleF1cIixcclxuICAgICAgJ1tjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJyxcclxuICAgIF1cclxuICAgICAgLm1hcCgoc2VsZWN0b3IpID0+IGAke3NlbGVjdG9yfTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pYClcclxuICAgICAgLmpvaW4oXCIsIFwiKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5maW5kKGZvY3VzYWJsZXMsIGVsZW1lbnQpLmZpbHRlcihcclxuICAgICAgKGVsKSA9PiAhaXNEaXNhYmxlZChlbCkgJiYgaXNWaXNpYmxlKGVsKVxyXG4gICAgKTtcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0b3JFbmdpbmU7XHJcbiIsImltcG9ydCAqIGFzIFBvcHBlciBmcm9tIFwiQHBvcHBlcmpzL2NvcmVcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgZ2V0RWxlbWVudCxcclxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxyXG4gIGdldE5leHRBY3RpdmVFbGVtZW50LFxyXG4gIGlzRGlzYWJsZWQsXHJcbiAgaXNFbGVtZW50LFxyXG4gIGlzUlRMLFxyXG4gIGlzVmlzaWJsZSxcclxuICBub29wLFxyXG4gIHR5cGVDaGVja0NvbmZpZyxcclxufSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleFwiO1xyXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuLi8uLi9kb20vZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uLy4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSBcIi4uLy4uL2RvbS9zZWxlY3Rvci1lbmdpbmVcIjtcclxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgTkFNRSA9IFwiZHJvcGRvd25cIjtcclxuY29uc3QgREFUQV9LRVkgPSBcInR3ZS5kcm9wZG93blwiO1xyXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcclxuY29uc3QgREFUQV9BUElfS0VZID0gXCIuZGF0YS1hcGlcIjtcclxuXHJcbmNvbnN0IEVTQ0FQRV9LRVkgPSBcIkVzY2FwZVwiO1xyXG5jb25zdCBTUEFDRV9LRVkgPSBcIlNwYWNlXCI7XHJcbmNvbnN0IFRBQl9LRVkgPSBcIlRhYlwiO1xyXG5jb25zdCBBUlJPV19VUF9LRVkgPSBcIkFycm93VXBcIjtcclxuY29uc3QgQVJST1dfRE9XTl9LRVkgPSBcIkFycm93RG93blwiO1xyXG5jb25zdCBSSUdIVF9NT1VTRV9CVVRUT04gPSAyOyAvLyBNb3VzZUV2ZW50LmJ1dHRvbiB2YWx1ZSBmb3IgdGhlIHNlY29uZGFyeSBidXR0b24sIHVzdWFsbHkgdGhlIHJpZ2h0IGJ1dHRvblxyXG5cclxuY29uc3QgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKFxyXG4gIGAke0FSUk9XX1VQX0tFWX18JHtBUlJPV19ET1dOX0tFWX18JHtFU0NBUEVfS0VZfWBcclxuKTtcclxuXHJcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YDtcclxuY29uc3QgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSA9IGBrZXlkb3duJHtFVkVOVF9LRVl9JHtEQVRBX0FQSV9LRVl9YDtcclxuY29uc3QgRVZFTlRfS0VZVVBfREFUQV9BUEkgPSBga2V5dXAke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gO1xyXG5cclxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gXCJzaG93XCI7XHJcbmNvbnN0IENMQVNTX05BTUVfRFJPUFVQID0gXCJkcm9wdXBcIjtcclxuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRU5EID0gXCJkcm9wZW5kXCI7XHJcbmNvbnN0IENMQVNTX05BTUVfRFJPUFNUQVJUID0gXCJkcm9wc3RhcnRcIjtcclxuXHJcbmNvbnN0IFNFTEVDVE9SX05BVkJBUiA9IFwiW2RhdGEtdHdlLW5hdmJhci1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gXCJbZGF0YS10d2UtZHJvcGRvd24tdG9nZ2xlLXJlZl1cIjtcclxuY29uc3QgU0VMRUNUT1JfTUVOVSA9IFwiW2RhdGEtdHdlLWRyb3Bkb3duLW1lbnUtcmVmXVwiO1xyXG5jb25zdCBTRUxFQ1RPUl9OQVZCQVJfTkFWID0gXCJbZGF0YS10d2UtbmF2YmFyLW5hdi1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMgPVxyXG4gIFwiW2RhdGEtdHdlLWRyb3Bkb3duLW1lbnUtcmVmXSBbZGF0YS10d2UtZHJvcGRvd24taXRlbS1yZWZdOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpXCI7XHJcblxyXG5jb25zdCBQTEFDRU1FTlRfVE9QID0gaXNSVEwoKSA/IFwidG9wLWVuZFwiIDogXCJ0b3Atc3RhcnRcIjtcclxuY29uc3QgUExBQ0VNRU5UX1RPUEVORCA9IGlzUlRMKCkgPyBcInRvcC1zdGFydFwiIDogXCJ0b3AtZW5kXCI7XHJcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT00gPSBpc1JUTCgpID8gXCJib3R0b20tZW5kXCIgOiBcImJvdHRvbS1zdGFydFwiO1xyXG5jb25zdCBQTEFDRU1FTlRfQk9UVE9NRU5EID0gaXNSVEwoKSA/IFwiYm90dG9tLXN0YXJ0XCIgOiBcImJvdHRvbS1lbmRcIjtcclxuY29uc3QgUExBQ0VNRU5UX1JJR0hUID0gaXNSVEwoKSA/IFwibGVmdC1zdGFydFwiIDogXCJyaWdodC1zdGFydFwiO1xyXG5jb25zdCBQTEFDRU1FTlRfTEVGVCA9IGlzUlRMKCkgPyBcInJpZ2h0LXN0YXJ0XCIgOiBcImxlZnQtc3RhcnRcIjtcclxuXHJcbmNvbnN0IEFOSU1BVElPTl9GQURFX0lOID0gW3sgb3BhY2l0eTogXCIwXCIgfSwgeyBvcGFjaXR5OiBcIjFcIiB9XTtcclxuY29uc3QgQU5JTUFUSU9OX0ZBREVfT1VUID0gW3sgb3BhY2l0eTogXCIxXCIgfSwgeyBvcGFjaXR5OiBcIjBcIiB9XTtcclxuXHJcbmNvbnN0IEFOSU1BVElPTl9USU1JTkcgPSB7XHJcbiAgaXRlcmF0aW9uczogMSxcclxuICBlYXNpbmc6IFwiZWFzZVwiLFxyXG4gIGZpbGw6IFwiYm90aFwiLFxyXG59O1xyXG5cclxuY29uc3QgRGVmYXVsdCA9IHtcclxuICBvZmZzZXQ6IFswLCAyXSxcclxuICBib3VuZGFyeTogXCJjbGlwcGluZ1BhcmVudHNcIixcclxuICByZWZlcmVuY2U6IFwidG9nZ2xlXCIsXHJcbiAgZGlzcGxheTogXCJkeW5hbWljXCIsXHJcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxyXG4gIGF1dG9DbG9zZTogdHJ1ZSxcclxuICBkcm9wZG93bkFuaW1hdGlvbjogXCJvblwiLFxyXG4gIGFuaW1hdGlvbkR1cmF0aW9uOiA1NTAsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcclxuICBvZmZzZXQ6IFwiKGFycmF5fHN0cmluZ3xmdW5jdGlvbilcIixcclxuICBib3VuZGFyeTogXCIoc3RyaW5nfGVsZW1lbnQpXCIsXHJcbiAgcmVmZXJlbmNlOiBcIihzdHJpbmd8ZWxlbWVudHxvYmplY3QpXCIsXHJcbiAgZGlzcGxheTogXCJzdHJpbmdcIixcclxuICBwb3BwZXJDb25maWc6IFwiKG51bGx8b2JqZWN0fGZ1bmN0aW9uKVwiLFxyXG4gIGF1dG9DbG9zZTogXCIoYm9vbGVhbnxzdHJpbmcpXCIsXHJcbiAgZHJvcGRvd25BbmltYXRpb246IFwic3RyaW5nXCIsXHJcbiAgYW5pbWF0aW9uRHVyYXRpb246IFwibnVtYmVyXCIsXHJcbn07XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ2xhc3MgRGVmaW5pdGlvblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNsYXNzIERyb3Bkb3duIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XHJcbiAgICBzdXBlcihlbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcclxuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XHJcbiAgICB0aGlzLl9mYWRlT3V0QW5pbWF0ZSA9IG51bGw7XHJcblxyXG4gICAgLy8qIHByZXZlbnRzIGRyb3Bkb3duIGNsb3NlIGlzc3VlIHdoZW4gc3lzdGVtIGFuaW1hdGlvbiBpcyB0dXJuZWQgb2ZmXHJcbiAgICBjb25zdCBpc1ByZWZlcnNSZWR1Y2VkTW90aW9uU2V0ID0gd2luZG93Lm1hdGNoTWVkaWEoXHJcbiAgICAgIFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSlcIlxyXG4gICAgKS5tYXRjaGVzO1xyXG4gICAgdGhpcy5fYW5pbWF0aW9uQ2FuUGxheSA9XHJcbiAgICAgIHRoaXMuX2NvbmZpZy5kcm9wZG93bkFuaW1hdGlvbiA9PT0gXCJvblwiICYmICFpc1ByZWZlcnNSZWR1Y2VkTW90aW9uU2V0O1xyXG5cclxuICAgIHRoaXMuX2RpZEluaXQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xyXG4gICAgcmV0dXJuIERlZmF1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xyXG4gICAgcmV0dXJuIERlZmF1bHRUeXBlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWNcclxuXHJcbiAgdG9nZ2xlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24oKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgdGhpcy5faXNTaG93bih0aGlzLl9tZW51KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcclxuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIoXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIEVWRU5UX1NIT1csXHJcbiAgICAgIHJlbGF0ZWRUYXJnZXRcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwYXJlbnQgPSBEcm9wZG93bi5nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcclxuICAgIC8vIFRvdGFsbHkgZGlzYWJsZSBQb3BwZXIgZm9yIERyb3Bkb3ducyBpbiBOYXZiYXJcclxuICAgIGlmICh0aGlzLl9pbk5hdmJhcikge1xyXG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsIFwicG9wcGVyXCIsIFwibm9uZVwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHBlcihwYXJlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcclxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XHJcbiAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xyXG4gICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXHJcbiAgICBpZiAoXHJcbiAgICAgIFwib250b3VjaHN0YXJ0XCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmXHJcbiAgICAgICFwYXJlbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZCQVJfTkFWKVxyXG4gICAgKSB7XHJcbiAgICAgIFtdXHJcbiAgICAgICAgLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKVxyXG4gICAgICAgIC5mb3JFYWNoKChlbGVtKSA9PiBFdmVudEhhbmRsZXIub24oZWxlbSwgXCJtb3VzZW92ZXJcIiwgbm9vcCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCB0cnVlKTtcclxuXHJcbiAgICB0aGlzLl9tZW51LnNldEF0dHJpYnV0ZShgZGF0YS10d2UtZHJvcGRvd24tJHtDTEFTU19OQU1FX1NIT1d9YCwgXCJcIik7XHJcbiAgICB0aGlzLl9hbmltYXRpb25DYW5QbGF5ICYmXHJcbiAgICAgIHRoaXMuX21lbnUuYW5pbWF0ZShBTklNQVRJT05fRkFERV9JTiwge1xyXG4gICAgICAgIC4uLkFOSU1BVElPTl9USU1JTkcsXHJcbiAgICAgICAgZHVyYXRpb246IHRoaXMuX2NvbmZpZy5hbmltYXRpb25EdXJhdGlvbixcclxuICAgICAgfSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShgZGF0YS10d2UtZHJvcGRvd24tJHtDTEFTU19OQU1FX1NIT1d9YCwgXCJcIik7XHJcblxyXG4gICAgc2V0VGltZW91dChcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOLCByZWxhdGVkVGFyZ2V0KTtcclxuICAgICAgfSxcclxuICAgICAgdGhpcy5fYW5pbWF0aW9uQ2FuUGxheSA/IHRoaXMuX2NvbmZpZy5hbmltYXRpb25EdXJhdGlvbiA6IDBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcy5fZWxlbWVudCkgfHwgIXRoaXMuX2lzU2hvd24odGhpcy5fbWVudSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSB7XHJcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnQsXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XHJcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcclxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcclxuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJpdmF0ZVxyXG4gIF9pbml0KCkge1xyXG4gICAgaWYgKHRoaXMuX2RpZEluaXQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbihcclxuICAgICAgZG9jdW1lbnQsXHJcbiAgICAgIEVWRU5UX0tFWURPV05fREFUQV9BUEksXHJcbiAgICAgIFNFTEVDVE9SX0RBVEFfVE9HR0xFLFxyXG4gICAgICBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXJcclxuICAgICk7XHJcbiAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgIGRvY3VtZW50LFxyXG4gICAgICBFVkVOVF9LRVlET1dOX0RBVEFfQVBJLFxyXG4gICAgICBTRUxFQ1RPUl9NRU5VLFxyXG4gICAgICBEcm9wZG93bi5kYXRhQXBpS2V5ZG93bkhhbmRsZXJcclxuICAgICk7XHJcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBEcm9wZG93bi5jbGVhck1lbnVzKTtcclxuICAgIEV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLmNsZWFyTWVudXMpO1xyXG5cclxuICAgIHRoaXMuX2RpZEluaXQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICBpZiAodGhpcy5fZmFkZU91dEFuaW1hdGUgJiYgdGhpcy5fZmFkZU91dEFuaW1hdGUucGxheVN0YXRlID09PSBcInJ1bm5pbmdcIikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIoXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIEVWRU5UX0hJREUsXHJcbiAgICAgIHJlbGF0ZWRUYXJnZXRcclxuICAgICk7XHJcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXHJcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxyXG4gICAgaWYgKFwib250b3VjaHN0YXJ0XCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XHJcbiAgICAgIFtdXHJcbiAgICAgICAgLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKVxyXG4gICAgICAgIC5mb3JFYWNoKChlbGVtKSA9PiBFdmVudEhhbmRsZXIub2ZmKGVsZW0sIFwibW91c2VvdmVyXCIsIG5vb3ApKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fYW5pbWF0aW9uQ2FuUGxheSkge1xyXG4gICAgICB0aGlzLl9mYWRlT3V0QW5pbWF0ZSA9IHRoaXMuX21lbnUuYW5pbWF0ZShBTklNQVRJT05fRkFERV9PVVQsIHtcclxuICAgICAgICAuLi5BTklNQVRJT05fVElNSU5HLFxyXG4gICAgICAgIGR1cmF0aW9uOiB0aGlzLl9jb25maWcuYW5pbWF0aW9uRHVyYXRpb24sXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRpbWVvdXQoXHJcbiAgICAgICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XHJcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbWVudS5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtdHdlLWRyb3Bkb3duLSR7Q0xBU1NfTkFNRV9TSE9XfWApO1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGBkYXRhLXR3ZS1kcm9wZG93bi0ke0NMQVNTX05BTUVfU0hPV31gKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIik7XHJcbiAgICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCBcInBvcHBlclwiKTtcclxuICAgICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4sIHJlbGF0ZWRUYXJnZXQpO1xyXG4gICAgICB9LFxyXG4gICAgICB0aGlzLl9hbmltYXRpb25DYW5QbGF5ID8gdGhpcy5fY29uZmlnLmFuaW1hdGlvbkR1cmF0aW9uIDogMFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XHJcbiAgICBjb25maWcgPSB7XHJcbiAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXHJcbiAgICAgIC4uLmNvbmZpZyxcclxuICAgIH07XHJcblxyXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICB0eXBlb2YgY29uZmlnLnJlZmVyZW5jZSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAhaXNFbGVtZW50KGNvbmZpZy5yZWZlcmVuY2UpICYmXHJcbiAgICAgIHR5cGVvZiBjb25maWcucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gXCJmdW5jdGlvblwiXHJcbiAgICApIHtcclxuICAgICAgLy8gUG9wcGVyIHZpcnR1YWwgZWxlbWVudHMgcmVxdWlyZSBhIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2RcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcclxuICAgICAgICBgJHtOQU1FLnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgX2NyZWF0ZVBvcHBlcihwYXJlbnQpIHtcclxuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgXCJCb290c3RyYXAncyBkcm9wZG93bnMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIlxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcclxuXHJcbiAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gXCJwYXJlbnRcIikge1xyXG4gICAgICByZWZlcmVuY2VFbGVtZW50ID0gcGFyZW50O1xyXG4gICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcclxuICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IGdldEVsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBvcHBlckNvbmZpZyA9IHRoaXMuX2dldFBvcHBlckNvbmZpZygpO1xyXG4gICAgY29uc3QgaXNEaXNwbGF5U3RhdGljID0gcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5maW5kKFxyXG4gICAgICAobW9kaWZpZXIpID0+XHJcbiAgICAgICAgbW9kaWZpZXIubmFtZSA9PT0gXCJhcHBseVN0eWxlc1wiICYmIG1vZGlmaWVyLmVuYWJsZWQgPT09IGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX3BvcHBlciA9IFBvcHBlci5jcmVhdGVQb3BwZXIoXHJcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQsXHJcbiAgICAgIHRoaXMuX21lbnUsXHJcbiAgICAgIHBvcHBlckNvbmZpZ1xyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoaXNEaXNwbGF5U3RhdGljKSB7XHJcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgXCJwb3BwZXJcIiwgXCJzdGF0aWNcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaXNTaG93bihlbGVtZW50ID0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgZWxlbWVudC5kYXRhc2V0W1xyXG4gICAgICAgIGB0d2VEcm9wZG93biR7XHJcbiAgICAgICAgICBDTEFTU19OQU1FX1NIT1cuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBDTEFTU19OQU1FX1NIT1cuc2xpY2UoMSlcclxuICAgICAgICB9YFxyXG4gICAgICBdID09PSBcIlwiXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2dldE1lbnVFbGVtZW50KCkge1xyXG4gICAgcmV0dXJuIFNlbGVjdG9yRW5naW5lLm5leHQodGhpcy5fZWxlbWVudCwgU0VMRUNUT1JfTUVOVSlbMF07XHJcbiAgfVxyXG5cclxuICBfZ2V0UGxhY2VtZW50KCkge1xyXG4gICAgY29uc3QgcGFyZW50RHJvcGRvd24gPSB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGU7XHJcblxyXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmRhdGFzZXQudHdlRHJvcGRvd25Qb3NpdGlvbiA9PT0gQ0xBU1NfTkFNRV9EUk9QRU5EKSB7XHJcbiAgICAgIHJldHVybiBQTEFDRU1FTlRfUklHSFQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHBhcmVudERyb3Bkb3duLmRhdGFzZXQudHdlRHJvcGRvd25Qb3NpdGlvbiA9PT0gQ0xBU1NfTkFNRV9EUk9QU1RBUlQpIHtcclxuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9MRUZUO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdlIG5lZWQgdG8gdHJpbSB0aGUgdmFsdWUgYmVjYXVzZSBjdXN0b20gcHJvcGVydGllcyBjYW4gYWxzbyBpbmNsdWRlIHNwYWNlc1xyXG4gICAgY29uc3QgaXNFbmQgPSBwYXJlbnREcm9wZG93bi5kYXRhc2V0LnR3ZURyb3Bkb3duQWxpZ25tZW50ID09PSBcImVuZFwiO1xyXG5cclxuICAgIGlmIChwYXJlbnREcm9wZG93bi5kYXRhc2V0LnR3ZURyb3Bkb3duUG9zaXRpb24gPT09IENMQVNTX05BTUVfRFJPUFVQKSB7XHJcbiAgICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9UT1BFTkQgOiBQTEFDRU1FTlRfVE9QO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpc0VuZCA/IFBMQUNFTUVOVF9CT1RUT01FTkQgOiBQTEFDRU1FTlRfQk9UVE9NO1xyXG4gIH1cclxuXHJcbiAgX2RldGVjdE5hdmJhcigpIHtcclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSKSAhPT0gbnVsbDtcclxuICB9XHJcblxyXG4gIF9nZXRPZmZzZXQoKSB7XHJcbiAgICBjb25zdCB7IG9mZnNldCB9ID0gdGhpcy5fY29uZmlnO1xyXG5cclxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoXCIsXCIpLm1hcCgodmFsKSA9PiBOdW1iZXIucGFyc2VJbnQodmFsLCAxMCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgcmV0dXJuIChwb3BwZXJEYXRhKSA9PiBvZmZzZXQocG9wcGVyRGF0YSwgdGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG9mZnNldDtcclxuICB9XHJcblxyXG4gIF9nZXRQb3BwZXJDb25maWcoKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XHJcbiAgICAgIHBsYWNlbWVudDogdGhpcy5fZ2V0UGxhY2VtZW50KCksXHJcbiAgICAgIG1vZGlmaWVyczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwicHJldmVudE92ZXJmbG93XCIsXHJcbiAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnksXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogXCJvZmZzZXRcIixcclxuICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgXSxcclxuICAgIH07XHJcblxyXG4gICAgLy8gRGlzYWJsZSBQb3BwZXIgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5XHJcbiAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09IFwic3RhdGljXCIpIHtcclxuICAgICAgZGVmYXVsdEJzUG9wcGVyQ29uZmlnLm1vZGlmaWVycyA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcImFwcGx5U3R5bGVzXCIsXHJcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcclxuICAgICAgLi4uKHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZGVmYXVsdEJzUG9wcGVyQ29uZmlnKVxyXG4gICAgICAgIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyksXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgX3NlbGVjdE1lbnVJdGVtKHsga2V5LCB0YXJnZXQgfSkge1xyXG4gICAgY29uc3QgaXRlbXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFxyXG4gICAgICBTRUxFQ1RPUl9WSVNJQkxFX0lURU1TLFxyXG4gICAgICB0aGlzLl9tZW51XHJcbiAgICApLmZpbHRlcihpc1Zpc2libGUpO1xyXG5cclxuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiB0YXJnZXQgaXNuJ3QgaW5jbHVkZWQgaW4gaXRlbXMgKGUuZy4gd2hlbiBleHBhbmRpbmcgdGhlIGRyb3Bkb3duKVxyXG4gICAgLy8gYWxsb3cgY3ljbGluZyB0byBnZXQgdGhlIGxhc3QgaXRlbSBpbiBjYXNlIGtleSBlcXVhbHMgQVJST1dfVVBfS0VZXHJcbiAgICBnZXROZXh0QWN0aXZlRWxlbWVudChcclxuICAgICAgaXRlbXMsXHJcbiAgICAgIHRhcmdldCxcclxuICAgICAga2V5ID09PSBBUlJPV19ET1dOX0tFWSxcclxuICAgICAgIWl0ZW1zLmluY2x1ZGVzKHRhcmdldClcclxuICAgICkuZm9jdXMoKTtcclxuICB9XHJcblxyXG4gIC8vIFN0YXRpY1xyXG5cclxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkYXRhW2NvbmZpZ10oKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsZWFyTWVudXMoZXZlbnQpIHtcclxuICAgIGlmIChcclxuICAgICAgZXZlbnQgJiZcclxuICAgICAgKGV2ZW50LmJ1dHRvbiA9PT0gUklHSFRfTU9VU0VfQlVUVE9OIHx8XHJcbiAgICAgICAgKGV2ZW50LnR5cGUgPT09IFwia2V5dXBcIiAmJiBldmVudC5rZXkgIT09IFRBQl9LRVkpKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0b2dnbGVzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZXNbaV0pO1xyXG4gICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjb250ZXh0Ll9pc1Nob3duKCkpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb250ZXh0Ll9lbGVtZW50LFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29tcG9zZWRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XHJcbiAgICAgICAgY29uc3QgaXNNZW51VGFyZ2V0ID0gY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX21lbnUpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9lbGVtZW50KSB8fFxyXG4gICAgICAgICAgKGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09IFwiaW5zaWRlXCIgJiYgIWlzTWVudVRhcmdldCkgfHxcclxuICAgICAgICAgIChjb250ZXh0Ll9jb25maWcuYXV0b0Nsb3NlID09PSBcIm91dHNpZGVcIiAmJiBpc01lbnVUYXJnZXQpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRhYiBuYXZpZ2F0aW9uIHRocm91Z2ggdGhlIGRyb3Bkb3duIG1lbnUgb3IgZXZlbnRzIGZyb20gY29udGFpbmVkIGlucHV0cyBzaG91bGRuJ3QgY2xvc2UgdGhlIG1lbnVcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBjb250ZXh0Ll9tZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiZcclxuICAgICAgICAgICgoZXZlbnQudHlwZSA9PT0gXCJrZXl1cFwiICYmIGV2ZW50LmtleSA9PT0gVEFCX0tFWSkgfHxcclxuICAgICAgICAgICAgL2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiKSB7XHJcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnRleHQuX2NvbXBsZXRlSGlkZShyZWxhdGVkVGFyZ2V0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICByZXR1cm4gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB8fCBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XHJcbiAgICAvLyBJZiBub3QgaW5wdXQvdGV4dGFyZWE6XHJcbiAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcclxuICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxyXG4gICAgLy8gIC0gSWYgc3BhY2Uga2V5ID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcclxuICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxyXG4gICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxyXG4gICAgLy8gICAgLSBJZiB0cmlnZ2VyIGluc2lkZSB0aGUgbWVudSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXHJcbiAgICBpZiAoXHJcbiAgICAgIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpXHJcbiAgICAgICAgPyBldmVudC5rZXkgPT09IFNQQUNFX0tFWSB8fFxyXG4gICAgICAgICAgKGV2ZW50LmtleSAhPT0gRVNDQVBFX0tFWSAmJlxyXG4gICAgICAgICAgICAoKGV2ZW50LmtleSAhPT0gQVJST1dfRE9XTl9LRVkgJiYgZXZlbnQua2V5ICE9PSBBUlJPV19VUF9LRVkpIHx8XHJcbiAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfTUVOVSkpKVxyXG4gICAgICAgIDogIVJFR0VYUF9LRVlET1dOLnRlc3QoZXZlbnQua2V5KVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9XHJcbiAgICAgIHRoaXMuZGF0YXNldFtcclxuICAgICAgICBgdHdlRHJvcGRvd24ke1xyXG4gICAgICAgICAgQ0xBU1NfTkFNRV9TSE9XLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgQ0xBU1NfTkFNRV9TSE9XLnNsaWNlKDEpXHJcbiAgICAgICAgfWBcclxuICAgICAgXSA9PT0gXCJcIjtcclxuXHJcbiAgICBpZiAoIWlzQWN0aXZlICYmIGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXRUb2dnbGVCdXR0b24gPSB0aGlzLm1hdGNoZXMoU0VMRUNUT1JfREFUQV9UT0dHTEUpXHJcbiAgICAgID8gdGhpc1xyXG4gICAgICA6IFNlbGVjdG9yRW5naW5lLnByZXYodGhpcywgU0VMRUNUT1JfREFUQV9UT0dHTEUpWzBdO1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBEcm9wZG93bi5nZXRPckNyZWF0ZUluc3RhbmNlKGdldFRvZ2dsZUJ1dHRvbik7XHJcblxyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gRVNDQVBFX0tFWSkge1xyXG4gICAgICBpbnN0YW5jZS5oaWRlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXZlbnQua2V5ID09PSBBUlJPV19VUF9LRVkgfHwgZXZlbnQua2V5ID09PSBBUlJPV19ET1dOX0tFWSkge1xyXG4gICAgICBpZiAoIWlzQWN0aXZlKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2hvdygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpbnN0YW5jZS5fc2VsZWN0TWVudUl0ZW0oZXZlbnQpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpc0FjdGl2ZSB8fCBldmVudC5rZXkgPT09IFNQQUNFX0tFWSkge1xyXG4gICAgICBEcm9wZG93bi5jbGVhck1lbnVzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEcm9wZG93bjtcclxuIiwiaW1wb3J0IHtcclxuICBnZXRFbGVtZW50LFxyXG4gIGdldFNlbGVjdG9yRnJvbUVsZW1lbnQsXHJcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcclxuICByZWZsb3csXHJcbiAgdHlwZUNoZWNrQ29uZmlnLFxyXG59IGZyb20gXCIuLi8uLi91dGlsL2luZGV4XCI7XHJcbmltcG9ydCBEYXRhIGZyb20gXCIuLi8uLi9kb20vZGF0YVwiO1xyXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuLi8uLi9kb20vZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uLy4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSBcIi4uLy4uL2RvbS9zZWxlY3Rvci1lbmdpbmVcIjtcclxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgTkFNRSA9IFwiY29sbGFwc2VcIjtcclxuY29uc3QgREFUQV9LRVkgPSBcInR3ZS5jb2xsYXBzZVwiO1xyXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcclxuXHJcbmNvbnN0IERlZmF1bHQgPSB7XHJcbiAgdG9nZ2xlOiB0cnVlLFxyXG4gIHBhcmVudDogbnVsbCxcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRUeXBlID0ge1xyXG4gIHRvZ2dsZTogXCJib29sZWFuXCIsXHJcbiAgcGFyZW50OiBcIihudWxsfGVsZW1lbnQpXCIsXHJcbn07XHJcblxyXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xyXG5cclxuY29uc3QgQVRUUl9TSE9XID0gXCJkYXRhLXR3ZS1jb2xsYXBzZS1zaG93XCI7XHJcbmNvbnN0IEFUVFJfQ09MTEFQU0VEID0gXCJkYXRhLXR3ZS1jb2xsYXBzZS1jb2xsYXBzZWRcIjtcclxuY29uc3QgQVRUUl9DT0xMQVBTSU5HID0gXCJkYXRhLXR3ZS1jb2xsYXBzZS1jb2xsYXBzaW5nXCI7XHJcbmNvbnN0IEFUVFJfSE9SSVpPTlRBTCA9IFwiZGF0YS10d2UtY29sbGFwc2UtaG9yaXpvbnRhbFwiO1xyXG5jb25zdCBBVFRSX0NPTExBUFNFX0lURU0gPSBcImRhdGEtdHdlLWNvbGxhcHNlLWl0ZW1cIjtcclxuY29uc3QgQVRUUl9DT0xMQVBTRV9ERUVQRVJfQ0hJTERSRU4gPSBgOnNjb3BlIFske0FUVFJfQ09MTEFQU0VfSVRFTX1dIFske0FUVFJfQ09MTEFQU0VfSVRFTX1dYDtcclxuXHJcbmNvbnN0IFdJRFRIID0gXCJ3aWR0aFwiO1xyXG5jb25zdCBIRUlHSFQgPSBcImhlaWdodFwiO1xyXG5cclxuY29uc3QgU0VMRUNUT1JfREFUQV9BQ1RJVkVTID1cclxuICBcIltkYXRhLXR3ZS1jb2xsYXBzZS1pdGVtXVtkYXRhLXR3ZS1jb2xsYXBzZS1zaG93XSwgW2RhdGEtdHdlLWNvbGxhcHNlLWl0ZW1dW2RhdGEtdHdlLWNvbGxhcHNlLWNvbGxhcHNpbmddXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RBVEFfQ09MTEFQU0VfSU5JVCA9IFwiW2RhdGEtdHdlLWNvbGxhcHNlLWluaXRdXCI7XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3NlcyA9IHtcclxuICB2aXNpYmxlOiBcIiF2aXNpYmxlXCIsXHJcbiAgaGlkZGVuOiBcImhpZGRlblwiLFxyXG4gIGJhc2VUcmFuc2l0aW9uOlxyXG4gICAgXCJvdmVyZmxvdy1oaWRkZW4gZHVyYXRpb24tWzM1MG1zXSBlYXNlLVtjdWJpYy1iZXppZXIoMC4yNSwwLjEsMC4yNSwxLjApXSBtb3Rpb24tcmVkdWNlOnRyYW5zaXRpb24tbm9uZVwiLFxyXG4gIGNvbGxhcHNpbmc6XHJcbiAgICBcImgtMCB0cmFuc2l0aW9uLVtoZWlnaHRdIG92ZXJmbG93LWhpZGRlbiBkdXJhdGlvbi1bMzUwbXNdIGVhc2UtW2N1YmljLWJlemllcigwLjI1LDAuMSwwLjI1LDEuMCldIG1vdGlvbi1yZWR1Y2U6dHJhbnNpdGlvbi1ub25lXCIsXHJcbiAgY29sbGFwc2luZ0hvcml6b250YWw6XHJcbiAgICBcInctMCBoLWF1dG8gdHJhbnNpdGlvbi1bd2lkdGhdIG92ZXJmbG93LWhpZGRlbiBkdXJhdGlvbi1bMzUwbXNdIGVhc2UtW2N1YmljLWJlemllcigwLjI1LDAuMSwwLjI1LDEuMCldIG1vdGlvbi1yZWR1Y2U6dHJhbnNpdGlvbi1ub25lXCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3Nlc1R5cGUgPSB7XHJcbiAgdmlzaWJsZTogXCJzdHJpbmdcIixcclxuICBoaWRkZW46IFwic3RyaW5nXCIsXHJcbiAgYmFzZVRyYW5zaXRpb246IFwic3RyaW5nXCIsXHJcbiAgY29sbGFwc2luZzogXCJzdHJpbmdcIixcclxuICBjb2xsYXBzaW5nSG9yaXpvbnRhbDogXCJzdHJpbmdcIixcclxufTtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5DbGFzcyBEZWZpbml0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY2xhc3MgQ29sbGFwc2UgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcsIGNsYXNzZXMpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLl9jbGFzc2VzID0gdGhpcy5fZ2V0Q2xhc3NlcyhjbGFzc2VzKTtcclxuICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9IFtdO1xyXG5cclxuICAgIGNvbnN0IHRvZ2dsZUxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfQ09MTEFQU0VfSU5JVCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRvZ2dsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgY29uc3QgZWxlbSA9IHRvZ2dsZUxpc3RbaV07XHJcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcclxuICAgICAgY29uc3QgZmlsdGVyRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpLmZpbHRlcihcclxuICAgICAgICAoZm91bmRFbGVtKSA9PiBmb3VuZEVsZW0gPT09IHRoaXMuX2VsZW1lbnRcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XHJcbiAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9pbml0aWFsaXplQ2hpbGRyZW4oKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcclxuICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSwgdGhpcy5faXNTaG93bigpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fY29uZmlnLnRvZ2dsZSkge1xyXG4gICAgICB0aGlzLnRvZ2dsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2V0dGVyc1xyXG5cclxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XHJcbiAgICByZXR1cm4gRGVmYXVsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcclxuICAgIHJldHVybiBOQU1FO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljXHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIGlmICh0aGlzLl9pc1Nob3duKCkpIHtcclxuICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNob3coKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8IHRoaXMuX2lzU2hvd24oKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGFjdGl2ZXMgPSBbXTtcclxuICAgIGxldCBhY3RpdmVzRGF0YTtcclxuXHJcbiAgICBpZiAodGhpcy5fY29uZmlnLnBhcmVudCkge1xyXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFNlbGVjdG9yRW5naW5lLmZpbmQoXHJcbiAgICAgICAgQVRUUl9DT0xMQVBTRV9ERUVQRVJfQ0hJTERSRU4sXHJcbiAgICAgICAgdGhpcy5fY29uZmlnLnBhcmVudFxyXG4gICAgICApO1xyXG4gICAgICBhY3RpdmVzID0gU2VsZWN0b3JFbmdpbmUuZmluZChcclxuICAgICAgICBTRUxFQ1RPUl9EQVRBX0FDVElWRVMsXHJcbiAgICAgICAgdGhpcy5fY29uZmlnLnBhcmVudFxyXG4gICAgICApLmZpbHRlcigoZWxlbSkgPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKTsgLy8gcmVtb3ZlIGNoaWxkcmVuIGlmIGdyZWF0ZXIgZGVwdGhcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250YWluZXIgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHRoaXMuX3NlbGVjdG9yKTtcclxuICAgIGlmIChhY3RpdmVzLmxlbmd0aCkge1xyXG4gICAgICBjb25zdCB0ZW1wQWN0aXZlRGF0YSA9IGFjdGl2ZXMuZmluZCgoZWxlbSkgPT4gY29udGFpbmVyICE9PSBlbGVtKTtcclxuICAgICAgYWN0aXZlc0RhdGEgPSB0ZW1wQWN0aXZlRGF0YVxyXG4gICAgICAgID8gQ29sbGFwc2UuZ2V0SW5zdGFuY2UodGVtcEFjdGl2ZURhdGEpXHJcbiAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgaWYgKGFjdGl2ZXNEYXRhICYmIGFjdGl2ZXNEYXRhLl9pc1RyYW5zaXRpb25pbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyk7XHJcbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmVzLmZvckVhY2goKGVsZW1BY3RpdmUpID0+IHtcclxuICAgICAgaWYgKGNvbnRhaW5lciAhPT0gZWxlbUFjdGl2ZSkge1xyXG4gICAgICAgIENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbUFjdGl2ZSwgeyB0b2dnbGU6IGZhbHNlIH0pLmhpZGUoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xyXG4gICAgICAgIERhdGEuc2V0RGF0YShlbGVtQWN0aXZlLCBEQVRBX0tFWSwgbnVsbCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xyXG4gICAgY29uc3QgQ0xBU1NfTkFNRV9UUkFOU0lUSU9OID1cclxuICAgICAgZGltZW5zaW9uID09PSBcImhlaWdodFwiXHJcbiAgICAgICAgPyB0aGlzLl9jbGFzc2VzLmNvbGxhcHNpbmdcclxuICAgICAgICA6IHRoaXMuX2NsYXNzZXMuY29sbGFwc2luZ0hvcml6b250YWw7XHJcblxyXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fY2xhc3Nlcy52aXNpYmxlKTtcclxuICAgIE1hbmlwdWxhdG9yLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMuaGlkZGVuKTtcclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQsIENMQVNTX05BTUVfVFJBTlNJVElPTik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShBVFRSX0NPTExBUFNFX0lURU0pO1xyXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoQVRUUl9DT0xMQVBTSU5HLCBcIlwiKTtcclxuXHJcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xyXG5cclxuICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyh0aGlzLl90cmlnZ2VyQXJyYXksIHRydWUpO1xyXG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBNYW5pcHVsYXRvci5yZW1vdmVDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl9jbGFzc2VzLmhpZGRlbik7XHJcbiAgICAgIE1hbmlwdWxhdG9yLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQsIENMQVNTX05BTUVfVFJBTlNJVElPTik7XHJcbiAgICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMudmlzaWJsZSk7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKEFUVFJfQ09MTEFQU0lORyk7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKEFUVFJfQ09MTEFQU0VfSVRFTSwgXCJcIik7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKEFUVFJfU0hPVywgXCJcIik7XHJcblxyXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBcIlwiO1xyXG5cclxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjYXBpdGFsaXplZERpbWVuc2lvbiA9XHJcbiAgICAgIGRpbWVuc2lvblswXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKDEpO1xyXG4gICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IGBzY3JvbGwke2NhcGl0YWxpemVkRGltZW5zaW9ufWA7XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSBgJHt0aGlzLl9lbGVtZW50W3Njcm9sbFNpemVdfXB4YDtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0YXJ0RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFKTtcclxuICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xyXG4gICAgY29uc3QgQ0xBU1NfTkFNRV9UUkFOU0lUSU9OID1cclxuICAgICAgZGltZW5zaW9uID09PSBcImhlaWdodFwiXHJcbiAgICAgICAgPyB0aGlzLl9jbGFzc2VzLmNvbGxhcHNpbmdcclxuICAgICAgICA6IHRoaXMuX2NsYXNzZXMuY29sbGFwc2luZ0hvcml6b250YWw7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gYCR7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXVxyXG4gICAgfXB4YDtcclxuXHJcbiAgICByZWZsb3codGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3ModGhpcy5fZWxlbWVudCwgQ0xBU1NfTkFNRV9UUkFOU0lUSU9OKTtcclxuICAgIE1hbmlwdWxhdG9yLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMudmlzaWJsZSk7XHJcbiAgICBNYW5pcHVsYXRvci5yZW1vdmVDbGFzcyh0aGlzLl9lbGVtZW50LCB0aGlzLl9jbGFzc2VzLmhpZGRlbik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShBVFRSX0NPTExBUFNJTkcsIFwiXCIpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoQVRUUl9DT0xMQVBTRV9JVEVNKTtcclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKEFUVFJfU0hPVyk7XHJcblxyXG4gICAgY29uc3QgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgdHJpZ2dlciA9IHRoaXMuX3RyaWdnZXJBcnJheVtpXTtcclxuICAgICAgY29uc3QgZWxlbSA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodHJpZ2dlcik7XHJcblxyXG4gICAgICBpZiAoZWxlbSAmJiAhdGhpcy5faXNTaG93bihlbGVtKSkge1xyXG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbdHJpZ2dlcl0sIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcblxyXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlQ2xhc3ModGhpcy5fZWxlbWVudCwgQ0xBU1NfTkFNRV9UUkFOU0lUSU9OKTtcclxuICAgICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fY2xhc3Nlcy52aXNpYmxlKTtcclxuICAgICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fY2xhc3Nlcy5oaWRkZW4pO1xyXG5cclxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoQVRUUl9DT0xMQVBTSU5HKTtcclxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoQVRUUl9DT0xMQVBTRV9JVEVNLCBcIlwiKTtcclxuXHJcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IFwiXCI7XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBfaXNTaG93bihlbGVtZW50ID0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIGVsZW1lbnQuaGFzQXR0cmlidXRlKEFUVFJfU0hPVyk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXHJcbiAgICAgIC4uLmNvbmZpZyxcclxuICAgIH07XHJcbiAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcclxuICAgIGNvbmZpZy5wYXJlbnQgPSBnZXRFbGVtZW50KGNvbmZpZy5wYXJlbnQpO1xyXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xyXG4gICAgcmV0dXJuIGNvbmZpZztcclxuICB9XHJcblxyXG4gIF9nZXRDbGFzc2VzKGNsYXNzZXMpIHtcclxuICAgIGNvbnN0IGRhdGFBdHRyaWJ1dGVzID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUNsYXNzQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICBjbGFzc2VzID0ge1xyXG4gICAgICAuLi5EZWZhdWx0Q2xhc3NlcyxcclxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXHJcbiAgICAgIC4uLmNsYXNzZXMsXHJcbiAgICB9O1xyXG5cclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjbGFzc2VzLCBEZWZhdWx0Q2xhc3Nlc1R5cGUpO1xyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBfZ2V0RGltZW5zaW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuaGFzQXR0cmlidXRlKEFUVFJfSE9SSVpPTlRBTCkgPyBXSURUSCA6IEhFSUdIVDtcclxuICB9XHJcblxyXG4gIF9pbml0aWFsaXplQ2hpbGRyZW4oKSB7XHJcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNoaWxkcmVuID0gU2VsZWN0b3JFbmdpbmUuZmluZChcclxuICAgICAgQVRUUl9DT0xMQVBTRV9ERUVQRVJfQ0hJTERSRU4sXHJcbiAgICAgIHRoaXMuX2NvbmZpZy5wYXJlbnRcclxuICAgICk7XHJcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfQ09MTEFQU0VfSU5JVCwgdGhpcy5fY29uZmlnLnBhcmVudClcclxuICAgICAgLmZpbHRlcigoZWxlbSkgPT4gIWNoaWxkcmVuLmluY2x1ZGVzKGVsZW0pKVxyXG4gICAgICAuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MoW2VsZW1lbnRdLCB0aGlzLl9pc1Nob3duKHNlbGVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModHJpZ2dlckFycmF5LCBpc09wZW4pIHtcclxuICAgIGlmICghdHJpZ2dlckFycmF5Lmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdHJpZ2dlckFycmF5LmZvckVhY2goKGVsZW0pID0+IHtcclxuICAgICAgaWYgKGlzT3Blbikge1xyXG4gICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKEFUVFJfQ09MTEFQU0VEKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbGVtLnNldEF0dHJpYnV0ZShgJHtBVFRSX0NPTExBUFNFRH1gLCBcIlwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIGlzT3Blbik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFN0YXRpY1xyXG5cclxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IF9jb25maWcgPSB7fTtcclxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09IFwic3RyaW5nXCIgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XHJcbiAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGF0YSA9IENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgX2NvbmZpZyk7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ29sbGFwc2U7XHJcbiIsImltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tIFwiLi4vZG9tL3NlbGVjdG9yLWVuZ2luZVwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9pbmRleFwiO1xyXG5cclxuY29uc3QgU0VMRUNUT1JfRklYRURfQ09OVEVOVCA9XHJcbiAgXCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCI7XHJcbmNvbnN0IFNFTEVDVE9SX1NUSUNLWV9DT05URU5UID0gXCIuc3RpY2t5LXRvcFwiO1xyXG5cclxuY2xhc3MgU2Nyb2xsQmFySGVscGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQgPSBkb2N1bWVudC5ib2R5O1xyXG4gIH1cclxuXHJcbiAgZ2V0V2lkdGgoKSB7XHJcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcclxuICAgIGNvbnN0IGRvY3VtZW50V2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMod2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudFdpZHRoKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcclxuICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpO1xyXG4gICAgLy8gZ2l2ZSBwYWRkaW5nIHRvIGVsZW1lbnQgdG8gYmFsYW5jZSB0aGUgaGlkZGVuIHNjcm9sbGJhciB3aWR0aFxyXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIFwicGFkZGluZ1JpZ2h0XCIsXHJcbiAgICAgIChjYWxjdWxhdGVkVmFsdWUpID0+IGNhbGN1bGF0ZWRWYWx1ZSArIHdpZHRoXHJcbiAgICApO1xyXG4gICAgLy8gdHJpY2s6IFdlIGFkanVzdCBwb3NpdGl2ZSBwYWRkaW5nUmlnaHQgYW5kIG5lZ2F0aXZlIG1hcmdpblJpZ2h0IHRvIHN0aWNreS10b3AgZWxlbWVudHMgdG8ga2VlcCBzaG93aW5nIGZ1bGx3aWR0aFxyXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoXHJcbiAgICAgIFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsXHJcbiAgICAgIFwicGFkZGluZ1JpZ2h0XCIsXHJcbiAgICAgIChjYWxjdWxhdGVkVmFsdWUpID0+IGNhbGN1bGF0ZWRWYWx1ZSArIHdpZHRoXHJcbiAgICApO1xyXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoXHJcbiAgICAgIFNFTEVDVE9SX1NUSUNLWV9DT05URU5ULFxyXG4gICAgICBcIm1hcmdpblJpZ2h0XCIsXHJcbiAgICAgIChjYWxjdWxhdGVkVmFsdWUpID0+IGNhbGN1bGF0ZWRWYWx1ZSAtIHdpZHRoXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2Rpc2FibGVPdmVyRmxvdygpIHtcclxuICAgIHRoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHRoaXMuX2VsZW1lbnQsIFwib3ZlcmZsb3dcIik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICB9XHJcblxyXG4gIF9zZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wLCBjYWxsYmFjaykge1xyXG4gICAgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XHJcbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlbGVtZW50ICE9PSB0aGlzLl9lbGVtZW50ICYmXHJcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggPiBlbGVtZW50LmNsaWVudFdpZHRoICsgc2Nyb2xsYmFyV2lkdGhcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApO1xyXG4gICAgICBjb25zdCBjYWxjdWxhdGVkVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtzdHlsZVByb3BdO1xyXG4gICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSBgJHtjYWxsYmFjayhcclxuICAgICAgICBOdW1iZXIucGFyc2VGbG9hdChjYWxjdWxhdGVkVmFsdWUpXHJcbiAgICAgICl9cHhgO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjayk7XHJcbiAgfVxyXG5cclxuICByZXNldCgpIHtcclxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgXCJvdmVyZmxvd1wiKTtcclxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCwgXCJwYWRkaW5nUmlnaHRcIik7XHJcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsIFwicGFkZGluZ1JpZ2h0XCIpO1xyXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyhTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCwgXCJtYXJnaW5SaWdodFwiKTtcclxuICB9XHJcblxyXG4gIF9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApIHtcclxuICAgIGNvbnN0IGFjdHVhbFZhbHVlID0gZWxlbWVudC5zdHlsZVtzdHlsZVByb3BdO1xyXG4gICAgaWYgKGFjdHVhbFZhbHVlKSB7XHJcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wLCBhY3R1YWxWYWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfcmVzZXRFbGVtZW50QXR0cmlidXRlcyhzZWxlY3Rvciwgc3R5bGVQcm9wKSB7XHJcbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApO1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShzdHlsZVByb3ApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIE1hbmlwdWxhdG9yLnJlbW92ZURhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKTtcclxuICAgICAgICBlbGVtZW50LnN0eWxlW3N0eWxlUHJvcF0gPSB2YWx1ZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjayk7XHJcbiAgfVxyXG5cclxuICBfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayhzZWxlY3RvciwgY2FsbEJhY2spIHtcclxuICAgIGlmIChpc0VsZW1lbnQoc2VsZWN0b3IpKSB7XHJcbiAgICAgIGNhbGxCYWNrKHNlbGVjdG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goY2FsbEJhY2spO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaXNPdmVyZmxvd2luZygpIHtcclxuICAgIHJldHVybiB0aGlzLmdldFdpZHRoKCkgPiAwO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsQmFySGVscGVyO1xyXG4iLCJpbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuLi9kb20vZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQge1xyXG4gIGV4ZWN1dGUsXHJcbiAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbixcclxuICBnZXRFbGVtZW50LFxyXG4gIHJlZmxvdyxcclxuICB0eXBlQ2hlY2tDb25maWcsXHJcbn0gZnJvbSBcIi4vaW5kZXhcIjtcclxuXHJcbmNvbnN0IERlZmF1bHQgPSB7XHJcbiAgaXNWaXNpYmxlOiB0cnVlLCAvLyBpZiBmYWxzZSwgd2UgdXNlIHRoZSBiYWNrZHJvcCBoZWxwZXIgd2l0aG91dCBhZGRpbmcgYW55IGVsZW1lbnQgdG8gdGhlIGRvbVxyXG4gIGlzQW5pbWF0ZWQ6IGZhbHNlLFxyXG4gIHJvb3RFbGVtZW50OiBcImJvZHlcIiwgLy8gZ2l2ZSB0aGUgY2hvaWNlIHRvIHBsYWNlIGJhY2tkcm9wIHVuZGVyIGRpZmZlcmVudCBlbGVtZW50c1xyXG4gIGNsaWNrQ2FsbGJhY2s6IG51bGwsXHJcbiAgYmFja2Ryb3BDbGFzc2VzOiBudWxsLFxyXG59O1xyXG5cclxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XHJcbiAgaXNWaXNpYmxlOiBcImJvb2xlYW5cIixcclxuICBpc0FuaW1hdGVkOiBcImJvb2xlYW5cIixcclxuICByb290RWxlbWVudDogXCIoZWxlbWVudHxzdHJpbmcpXCIsXHJcbiAgY2xpY2tDYWxsYmFjazogXCIoZnVuY3Rpb258bnVsbClcIixcclxuICBiYWNrZHJvcENsYXNzZXM6IFwiKGFycmF5fHN0cmluZ3xudWxsKVwiLFxyXG59O1xyXG5jb25zdCBOQU1FID0gXCJiYWNrZHJvcFwiO1xyXG5jb25zdCBFVkVOVF9NT1VTRURPV04gPSBgbW91c2Vkb3duLnR3ZS4ke05BTUV9YDtcclxuXHJcbmNsYXNzIEJhY2tkcm9wIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcclxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xyXG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBzaG93KGNhbGxiYWNrKSB7XHJcbiAgICBpZiAoIXRoaXMuX2NvbmZpZy5pc1Zpc2libGUpIHtcclxuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9hcHBlbmQoKTtcclxuXHJcbiAgICBpZiAodGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpIHtcclxuICAgICAgcmVmbG93KHRoaXMuX2dldEVsZW1lbnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYmFja2Ryb3BDbGFzc2VzID0gdGhpcy5fY29uZmlnLmJhY2tkcm9wQ2xhc3NlcyB8fCBbXHJcbiAgICAgIFwib3BhY2l0eS01MFwiLFxyXG4gICAgICBcInRyYW5zaXRpb24tYWxsXCIsXHJcbiAgICAgIFwiZHVyYXRpb24tMzAwXCIsXHJcbiAgICAgIFwiZWFzZS1pbi1vdXRcIixcclxuICAgICAgXCJmaXhlZFwiLFxyXG4gICAgICBcInRvcC0wXCIsXHJcbiAgICAgIFwibGVmdC0wXCIsXHJcbiAgICAgIFwiei1bMTA0MF1cIixcclxuICAgICAgXCJiZy1ibGFja1wiLFxyXG4gICAgICBcInctc2NyZWVuXCIsXHJcbiAgICAgIFwiaC1zY3JlZW5cIixcclxuICAgIF07XHJcblxyXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlQ2xhc3ModGhpcy5fZ2V0RWxlbWVudCgpLCBcIm9wYWNpdHktMFwiKTtcclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2dldEVsZW1lbnQoKSwgYmFja2Ryb3BDbGFzc2VzKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10d2UtYmFja2Ryb3Atc2hvd1wiLCBcIlwiKTtcclxuXHJcbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcclxuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGhpZGUoY2FsbGJhY2spIHtcclxuICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xyXG4gICAgICBleGVjdXRlKGNhbGxiYWNrKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS10d2UtYmFja2Ryb3Atc2hvd1wiKTtcclxuICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgdGhpcy5fZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGFjaXR5LTUwXCIpO1xyXG5cclxuICAgIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xyXG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShjb25maWcgPSB7fSkge1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKHsgLi4udGhpcy5fY29uZmlnLCAuLi5jb25maWcgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlXHJcblxyXG4gIF9nZXRFbGVtZW50KCkge1xyXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgIGNvbnN0IGJhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgdGhpcy5fZWxlbWVudCA9IGJhY2tkcm9wO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgPyBjb25maWcgOiB7fSksXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHVzZSBnZXRFbGVtZW50KCkgd2l0aCB0aGUgZGVmYXVsdCBcImJvZHlcIiB0byBnZXQgYSBmcmVzaCBFbGVtZW50IG9uIGVhY2ggaW5zdGFudGlhdGlvblxyXG4gICAgY29uZmlnLnJvb3RFbGVtZW50ID0gZ2V0RWxlbWVudChjb25maWcucm9vdEVsZW1lbnQpO1xyXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xyXG4gICAgcmV0dXJuIGNvbmZpZztcclxuICB9XHJcblxyXG4gIF9hcHBlbmQoKSB7XHJcbiAgICBpZiAodGhpcy5faXNBcHBlbmRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fY29uZmlnLnJvb3RFbGVtZW50LmFwcGVuZCh0aGlzLl9nZXRFbGVtZW50KCkpO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9nZXRFbGVtZW50KCksIEVWRU5UX01PVVNFRE9XTiwgKCkgPT4ge1xyXG4gICAgICBleGVjdXRlKHRoaXMuX2NvbmZpZy5jbGlja0NhbGxiYWNrKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2lzQXBwZW5kZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGlmICghdGhpcy5faXNBcHBlbmRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRURPV04pO1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBfZW11bGF0ZUFuaW1hdGlvbihjYWxsYmFjaykge1xyXG4gICAgZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbihcclxuICAgICAgY2FsbGJhY2ssXHJcbiAgICAgIHRoaXMuX2dldEVsZW1lbnQoKSxcclxuICAgICAgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWRcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCYWNrZHJvcDtcclxuIiwiaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCB7IGlzVmlzaWJsZSB9IGZyb20gXCIuL2luZGV4XCI7XHJcblxyXG5jbGFzcyBGb2N1c1RyYXAge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMgPSB7fSwgdG9nZ2xlcikge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLl90b2dnbGVyID0gdG9nZ2xlcjtcclxuICAgIHRoaXMuX2V2ZW50ID0gb3B0aW9ucy5ldmVudCB8fCBcImJsdXJcIjtcclxuICAgIHRoaXMuX2NvbmRpdGlvbiA9IG9wdGlvbnMuY29uZGl0aW9uIHx8ICgoKSA9PiB0cnVlKTtcclxuICAgIHRoaXMuX3NlbGVjdG9yID1cclxuICAgICAgb3B0aW9ucy5zZWxlY3RvciB8fFxyXG4gICAgICAnYnV0dG9uLCBhLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgW3RhYmluZGV4XTpub3QoW3RhYmluZGV4PVwiLTFcIl0pJztcclxuICAgIHRoaXMuX29ubHlWaXNpYmxlID0gb3B0aW9ucy5vbmx5VmlzaWJsZSB8fCBmYWxzZTtcclxuICAgIHRoaXMuX2ZvY3VzYWJsZUVsZW1lbnRzID0gW107XHJcbiAgICB0aGlzLl9maXJzdEVsZW1lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5fbGFzdEVsZW1lbnQgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuaGFuZGxlciA9IChlKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLl9jb25kaXRpb24oZSkgJiYgIWUuc2hpZnRLZXkgJiYgZS50YXJnZXQgPT09IHRoaXMuX2xhc3RFbGVtZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuX2ZpcnN0RWxlbWVudC5mb2N1cygpO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHRoaXMuX2NvbmRpdGlvbihlKSAmJlxyXG4gICAgICAgIGUuc2hpZnRLZXkgJiZcclxuICAgICAgICBlLnRhcmdldCA9PT0gdGhpcy5fZmlyc3RFbGVtZW50XHJcbiAgICAgICkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9sYXN0RWxlbWVudC5mb2N1cygpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgdHJhcCgpIHtcclxuICAgIHRoaXMuX3NldEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLl9pbml0KCk7XHJcbiAgICB0aGlzLl9zZXRGb2N1c1RyYXAoKTtcclxuICB9XHJcblxyXG4gIGRpc2FibGUoKSB7XHJcbiAgICB0aGlzLl9mb2N1c2FibGVFbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLl9ldmVudCwgdGhpcy5oYW5kbGVyKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh0aGlzLl90b2dnbGVyKSB7XHJcbiAgICAgIHRoaXMuX3RvZ2dsZXIuZm9jdXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMuX3NldEVsZW1lbnRzKCk7XHJcbiAgICB0aGlzLl9zZXRGb2N1c1RyYXAoKTtcclxuICB9XHJcblxyXG4gIF9pbml0KCkge1xyXG4gICAgY29uc3QgaGFuZGxlciA9IChlKSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAhdGhpcy5fZmlyc3RFbGVtZW50IHx8XHJcbiAgICAgICAgZS5rZXkgIT09IFwiVGFiXCIgfHxcclxuICAgICAgICB0aGlzLl9mb2N1c2FibGVFbGVtZW50cy5pbmNsdWRlcyhlLnRhcmdldClcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2ZpcnN0RWxlbWVudC5mb2N1cygpO1xyXG5cclxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBfZmlsdGVyVmlzaWJsZShlbGVtZW50cykge1xyXG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZWwpID0+IHtcclxuICAgICAgaWYgKCFpc1Zpc2libGUoZWwpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICBjb25zdCBhbmNlc3RvcnMgPSBTZWxlY3RvckVuZ2luZS5wYXJlbnRzKGVsLCBcIipcIik7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoYW5jZXN0b3JzW2ldKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBzdHlsZSAmJlxyXG4gICAgICAgICAgKHN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IHN0eWxlLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2V0RWxlbWVudHMoKSB7XHJcbiAgICBjb25zdCBhbGxFbGVtZW50cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQodGhpcy5fc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgIC8vIGZpbHRlciBvdXQgZWxlbWVudHMgdGhhdCBhcmUgbm90IGZvY3VzYWJsZVxyXG4gICAgdGhpcy5fZm9jdXNhYmxlRWxlbWVudHMgPSBhbGxFbGVtZW50cy5maWx0ZXIoKGVsKSA9PiB7XHJcbiAgICAgIGNvbnN0IGhhc0Rpc2FibGVkQXR0cmlidXRlID1cclxuICAgICAgICBlbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR3ZS1kaXNhYmxlZFwiKSA9PT0gXCJ0cnVlXCIgfHxcclxuICAgICAgICBlbC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGVsLmRpc2FibGVkIHx8IGhhc0Rpc2FibGVkQXR0cmlidXRlO1xyXG4gICAgICBpZiAoIWlzRGlzYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZWw7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAodGhpcy5fb25seVZpc2libGUpIHtcclxuICAgICAgdGhpcy5fZm9jdXNhYmxlRWxlbWVudHMgPSB0aGlzLl9maWx0ZXJWaXNpYmxlKHRoaXMuX2ZvY3VzYWJsZUVsZW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9maXJzdEVsZW1lbnQgPSB0aGlzLl9mb2N1c2FibGVFbGVtZW50c1swXTtcclxuICAgIHRoaXMuX2xhc3RFbGVtZW50ID1cclxuICAgICAgdGhpcy5fZm9jdXNhYmxlRWxlbWVudHNbdGhpcy5fZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMV07XHJcbiAgfVxyXG5cclxuICBfc2V0Rm9jdXNUcmFwKCkge1xyXG4gICAgdGhpcy5fZm9jdXNhYmxlRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCwgaSkgPT4ge1xyXG4gICAgICBpZiAoaSA9PT0gdGhpcy5fZm9jdXNhYmxlRWxlbWVudHMubGVuZ3RoIC0gMSB8fCBpID09PSAwKSB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuX2V2ZW50LCB0aGlzLmhhbmRsZXIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLl9ldmVudCwgdGhpcy5oYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb2N1c1RyYXA7XHJcbiIsImltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSBcIi4uL2RvbS9ldmVudC1oYW5kbGVyXCI7XHJcbmltcG9ydCB7IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IsIGlzRGlzYWJsZWQgfSBmcm9tIFwiLi9pbmRleFwiO1xyXG5sZXQgYWRkZWRFdmVudHNMaXN0ID0gW107XHJcblxyXG5jb25zdCBlbmFibGVEaXNtaXNzVHJpZ2dlciA9IChjb21wb25lbnQsIG1ldGhvZCA9IFwiaGlkZVwiKSA9PiB7XHJcbiAgY29uc3QgY2xpY2tFdmVudCA9IGBjbGljay5kaXNtaXNzJHtjb21wb25lbnQuRVZFTlRfS0VZfWA7XHJcbiAgY29uc3QgbmFtZSA9IGNvbXBvbmVudC5OQU1FO1xyXG5cclxuICBpZiAoYWRkZWRFdmVudHNMaXN0LmluY2x1ZGVzKG5hbWUpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBhZGRlZEV2ZW50c0xpc3QucHVzaChuYW1lKTtcclxuXHJcbiAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgZG9jdW1lbnQsXHJcbiAgICBjbGlja0V2ZW50LFxyXG4gICAgYFtkYXRhLXR3ZS0ke25hbWV9LWRpc21pc3NdYCxcclxuICAgIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBpZiAoW1wiQVwiLCBcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0YXJnZXQgPVxyXG4gICAgICAgIGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcykgfHxcclxuICAgICAgICB0aGlzLmNsb3Nlc3QoYC4ke25hbWV9YCkgfHxcclxuICAgICAgICB0aGlzLmNsb3Nlc3QoYFtkYXRhLXR3ZS0ke25hbWV9LWluaXRdYCk7XHJcblxyXG4gICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldCk7XHJcblxyXG4gICAgICAvLyBNZXRob2QgYXJndW1lbnQgaXMgbGVmdCwgZm9yIEFsZXJ0IGFuZCBvbmx5LCBhcyBpdCBkb2Vzbid0IGltcGxlbWVudCB0aGUgJ2hpZGUnIG1ldGhvZFxyXG4gICAgICBpbnN0YW5jZVttZXRob2RdKCk7XHJcbiAgICB9XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IGVuYWJsZURpc21pc3NUcmlnZ2VyIH07XHJcbiIsImV4cG9ydCBjb25zdCBMRUZUX0FSUk9XID0gMzc7XHJcbmV4cG9ydCBjb25zdCBVUF9BUlJPVyA9IDM4O1xyXG5leHBvcnQgY29uc3QgUklHSFRfQVJST1cgPSAzOTtcclxuZXhwb3J0IGNvbnN0IERPV05fQVJST1cgPSA0MDtcclxuZXhwb3J0IGNvbnN0IEhPTUUgPSAzNjtcclxuZXhwb3J0IGNvbnN0IEVORCA9IDM1O1xyXG5leHBvcnQgY29uc3QgUEFHRV9VUCA9IDMzO1xyXG5leHBvcnQgY29uc3QgUEFHRV9ET1dOID0gMzQ7XHJcbmV4cG9ydCBjb25zdCBFTlRFUiA9IDEzO1xyXG5leHBvcnQgY29uc3QgU1BBQ0UgPSAzMjtcclxuZXhwb3J0IGNvbnN0IEVTQ0FQRSA9IDI3O1xyXG5leHBvcnQgY29uc3QgVEFCID0gOTtcclxuZXhwb3J0IGNvbnN0IEJBQ0tTUEFDRSA9IDg7XHJcbmV4cG9ydCBjb25zdCBERUxFVEUgPSA0NjtcclxuZXhwb3J0IGNvbnN0IEEgPSA2NTtcclxuZXhwb3J0IGNvbnN0IEIgPSA2NjtcclxuZXhwb3J0IGNvbnN0IEMgPSA2NztcclxuZXhwb3J0IGNvbnN0IEQgPSA2ODtcclxuZXhwb3J0IGNvbnN0IEUgPSA2OTtcclxuZXhwb3J0IGNvbnN0IEYgPSA3MDtcclxuZXhwb3J0IGNvbnN0IEcgPSA3MTtcclxuZXhwb3J0IGNvbnN0IEggPSA3MjtcclxuZXhwb3J0IGNvbnN0IEkgPSA3MztcclxuZXhwb3J0IGNvbnN0IEogPSA3NDtcclxuZXhwb3J0IGNvbnN0IEsgPSA3NTtcclxuZXhwb3J0IGNvbnN0IEwgPSA3NjtcclxuZXhwb3J0IGNvbnN0IE0gPSA3NztcclxuZXhwb3J0IGNvbnN0IE4gPSA3ODtcclxuZXhwb3J0IGNvbnN0IE8gPSA3OTtcclxuZXhwb3J0IGNvbnN0IFAgPSA4MDtcclxuZXhwb3J0IGNvbnN0IFEgPSA4MTtcclxuZXhwb3J0IGNvbnN0IFIgPSA4MjtcclxuZXhwb3J0IGNvbnN0IFMgPSA4MztcclxuZXhwb3J0IGNvbnN0IFQgPSA4NDtcclxuZXhwb3J0IGNvbnN0IFUgPSA4NTtcclxuZXhwb3J0IGNvbnN0IFYgPSA4NjtcclxuZXhwb3J0IGNvbnN0IFcgPSA4NztcclxuZXhwb3J0IGNvbnN0IFggPSA4ODtcclxuZXhwb3J0IGNvbnN0IFkgPSA4OTtcclxuZXhwb3J0IGNvbnN0IFogPSA5MDtcclxuIiwiaW1wb3J0IHsgdHlwZUNoZWNrQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXhcIjtcclxuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tIFwiLi4vLi4vdXRpbC9zY3JvbGxiYXJcIjtcclxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vLi4vZG9tL2V2ZW50LWhhbmRsZXJcIjtcclxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tIFwiLi4vLi4vZG9tL3NlbGVjdG9yLWVuZ2luZVwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uLy4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgQmFja2Ryb3AgZnJvbSBcIi4uLy4uL3V0aWwvYmFja2Ryb3BcIjtcclxuaW1wb3J0IEZvY3VzVHJhcCBmcm9tIFwiLi4vLi4vdXRpbC9mb2N1c1RyYXBcIjtcclxuaW1wb3J0IHsgZW5hYmxlRGlzbWlzc1RyaWdnZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IFRBQiB9IGZyb20gXCIuLi8uLi91dGlsL2tleWNvZGVzXCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgTkFNRSA9IFwib2ZmY2FudmFzXCI7XHJcbmNvbnN0IERBVEFfS0VZID0gXCJ0d2Uub2ZmY2FudmFzXCI7XHJcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xyXG5jb25zdCBEQVRBX0FQSV9LRVkgPSBcIi5kYXRhLWFwaVwiO1xyXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gO1xyXG5jb25zdCBFU0NBUEVfS0VZID0gXCJFc2NhcGVcIjtcclxuXHJcbmNvbnN0IERlZmF1bHQgPSB7XHJcbiAgYmFja2Ryb3A6IHRydWUsXHJcbiAga2V5Ym9hcmQ6IHRydWUsXHJcbiAgc2Nyb2xsOiBmYWxzZSxcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRUeXBlID0ge1xyXG4gIGJhY2tkcm9wOiBcImJvb2xlYW5cIixcclxuICBrZXlib2FyZDogXCJib29sZWFuXCIsXHJcbiAgc2Nyb2xsOiBcImJvb2xlYW5cIixcclxufTtcclxuXHJcbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9IFwic2hvd1wiO1xyXG5jb25zdCBPUEVOX1NFTEVDVE9SID0gXCJbZGF0YS10d2Utb2ZmY2FudmFzLWluaXRdW2RhdGEtdHdlLW9mZmNhbnZhcy1zaG93XVwiO1xyXG5cclxuY29uc3QgRVZFTlRfU0hPVyA9IGBzaG93JHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfU0hPV04gPSBgc2hvd24ke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9ISURFID0gYGhpZGUke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfS0VZRE9XTl9ESVNNSVNTID0gYGtleWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZfWA7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ2xhc3MgRGVmaW5pdGlvblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNsYXNzIE9mZmNhbnZhcyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xyXG4gICAgc3VwZXIoZWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XHJcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xyXG4gICAgdGhpcy5fZm9jdXN0cmFwID0gdGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpO1xyXG4gICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX2RpZEluaXQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XHJcbiAgICByZXR1cm4gRGVmYXVsdDtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpY1xyXG5cclxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcclxuICB9XHJcblxyXG4gIHNob3cocmVsYXRlZFRhcmdldCkge1xyXG4gICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1csIHtcclxuICAgICAgcmVsYXRlZFRhcmdldCxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faXNTaG93biA9IHRydWU7XHJcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuXHJcbiAgICB0aGlzLl9iYWNrZHJvcC5zaG93KCk7XHJcblxyXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XHJcbiAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1tb2RhbFwiLCB0cnVlKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImRpYWxvZ1wiKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKGBkYXRhLXR3ZS1vZmZjYW52YXMtJHtDTEFTU19OQU1FX1NIT1d9YCwgXCJcIik7XHJcblxyXG4gICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcclxuICAgICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XHJcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLnRyYXAoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHsgcmVsYXRlZFRhcmdldCB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZUNhbGxCYWNrLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpO1xyXG5cclxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRpc2FibGUoKTtcclxuICAgIHRoaXMuX2VsZW1lbnQuYmx1cigpO1xyXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtdHdlLW9mZmNhbnZhcy0ke0NMQVNTX05BTUVfU0hPV31gKTtcclxuICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIHRydWUpO1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIik7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwicm9sZVwiKTtcclxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuXHJcbiAgICAgIGlmICghdGhpcy5fY29uZmlnLnNjcm9sbCkge1xyXG4gICAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5yZXNldCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbGJhY2ssIHRoaXMuX2VsZW1lbnQsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kaXNhYmxlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlXHJcbiAgX2luaXQoKSB7XHJcbiAgICBpZiAodGhpcy5fZGlkSW5pdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT5cclxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChPUEVOX1NFTEVDVE9SKS5mb3JFYWNoKChlbCkgPT5cclxuICAgICAgICBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbCkuc2hvdygpXHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5fZGlkSW5pdCA9IHRydWU7XHJcbiAgICBlbmFibGVEaXNtaXNzVHJpZ2dlcihPZmZjYW52YXMpO1xyXG4gIH1cclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXHJcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiID8gY29uZmlnIDoge30pLFxyXG4gICAgfTtcclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XHJcbiAgICAgIGlzVmlzaWJsZTogdGhpcy5fY29uZmlnLmJhY2tkcm9wLFxyXG4gICAgICBpc0FuaW1hdGVkOiB0cnVlLFxyXG4gICAgICByb290RWxlbWVudDogdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLFxyXG4gICAgICBjbGlja0NhbGxiYWNrOiAoKSA9PiB0aGlzLmhpZGUoKSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XHJcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh0aGlzLl9lbGVtZW50LCB7XHJcbiAgICAgIGV2ZW50OiBcImtleWRvd25cIixcclxuICAgICAgY29uZGl0aW9uOiAoZSkgPT4gZS5rZXlDb2RlID09PSBUQUIsXHJcbiAgICAgIG9ubHlWaXNpYmxlOiB0cnVlLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTLCAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkpIHtcclxuICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBTdGF0aWNcclxuXHJcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zdCBkYXRhID0gT2ZmY2FudmFzLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICBjb25maWcuc3RhcnRzV2l0aChcIl9cIikgfHxcclxuICAgICAgICBjb25maWcgPT09IFwiY29uc3RydWN0b3JcIlxyXG4gICAgICApIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9mZmNhbnZhcztcclxuIiwiaW1wb3J0IHtcclxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxyXG4gIGlzUlRMLFxyXG4gIGlzVmlzaWJsZSxcclxuICBnZXROZXh0QWN0aXZlRWxlbWVudCxcclxuICByZWZsb3csXHJcbiAgdHJpZ2dlclRyYW5zaXRpb25FbmQsXHJcbiAgdHlwZUNoZWNrQ29uZmlnLFxyXG59IGZyb20gXCIuLi8uLi91dGlsL2luZGV4XCI7XHJcbmltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSBcIi4uLy4uL2RvbS9ldmVudC1oYW5kbGVyXCI7XHJcbmltcG9ydCBNYW5pcHVsYXRvciBmcm9tIFwiLi4vLi4vZG9tL21hbmlwdWxhdG9yXCI7XHJcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tIFwiLi4vLi4vZG9tL3NlbGVjdG9yLWVuZ2luZVwiO1xyXG5pbXBvcnQgQmFzZUNvbXBvbmVudCBmcm9tIFwiLi4vLi4vYmFzZS1jb21wb25lbnRcIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5Db25zdGFudHNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jb25zdCBOQU1FID0gXCJjYXJvdXNlbFwiO1xyXG5jb25zdCBEQVRBX0tFWSA9IFwidHdlLmNhcm91c2VsXCI7XHJcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xyXG5jb25zdCBEQVRBX0FQSV9LRVkgPSBcIi5kYXRhLWFwaVwiO1xyXG5cclxuY29uc3QgQVJST1dfTEVGVF9LRVkgPSBcIkFycm93TGVmdFwiO1xyXG5jb25zdCBBUlJPV19SSUdIVF9LRVkgPSBcIkFycm93UmlnaHRcIjtcclxuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXHJcbmNvbnN0IFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xyXG5cclxuY29uc3QgRGVmYXVsdCA9IHtcclxuICBpbnRlcnZhbDogNTAwMCxcclxuICBrZXlib2FyZDogdHJ1ZSxcclxuICByaWRlOiBmYWxzZSxcclxuICBwYXVzZTogXCJob3ZlclwiLFxyXG4gIHdyYXA6IHRydWUsXHJcbiAgdG91Y2g6IHRydWUsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcclxuICBpbnRlcnZhbDogXCIobnVtYmVyfGJvb2xlYW4pXCIsXHJcbiAga2V5Ym9hcmQ6IFwiYm9vbGVhblwiLFxyXG4gIHJpZGU6IFwiKGJvb2xlYW58c3RyaW5nKVwiLFxyXG4gIHBhdXNlOiBcIihzdHJpbmd8Ym9vbGVhbilcIixcclxuICB3cmFwOiBcImJvb2xlYW5cIixcclxuICB0b3VjaDogXCJib29sZWFuXCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3NlcyA9IHtcclxuICBwb2ludGVyOiBcInRvdWNoLXBhbi15XCIsXHJcbiAgYmxvY2s6IFwiIWJsb2NrXCIsXHJcbiAgdmlzaWJsZTpcclxuICAgIFwiZGF0YS1bdHdlLWNhcm91c2VsLWZhZGVdOm9wYWNpdHktMTAwIGRhdGEtW3R3ZS1jYXJvdXNlbC1mYWRlXTp6LVsxXVwiLFxyXG4gIGludmlzaWJsZTpcclxuICAgIFwiZGF0YS1bdHdlLWNhcm91c2VsLWZhZGVdOnotMCBkYXRhLVt0d2UtY2Fyb3VzZWwtZmFkZV06b3BhY2l0eS0wIGRhdGEtW3R3ZS1jYXJvdXNlbC1mYWRlXTpkdXJhdGlvbi1bNjAwbXNdIGRhdGEtW3R3ZS1jYXJvdXNlbC1mYWRlXTpkZWxheS02MDBcIixcclxuICBzbGlkZVJpZ2h0OiBcInRyYW5zbGF0ZS14LWZ1bGxcIixcclxuICBzbGlkZUxlZnQ6IFwiLXRyYW5zbGF0ZS14LWZ1bGxcIixcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRDbGFzc2VzVHlwZSA9IHtcclxuICBwb2ludGVyOiBcInN0cmluZ1wiLFxyXG4gIGJsb2NrOiBcInN0cmluZ1wiLFxyXG4gIHZpc2libGU6IFwic3RyaW5nXCIsXHJcbiAgaW52aXNpYmxlOiBcInN0cmluZ1wiLFxyXG4gIHNsaWRlUmlnaHQ6IFwic3RyaW5nXCIsXHJcbiAgc2xpZGVMZWZ0OiBcInN0cmluZ1wiLFxyXG59O1xyXG5cclxuY29uc3QgT1JERVJfTkVYVCA9IFwibmV4dFwiO1xyXG5jb25zdCBPUkRFUl9QUkVWID0gXCJwcmV2XCI7XHJcbmNvbnN0IERJUkVDVElPTl9MRUZUID0gXCJsZWZ0XCI7XHJcbmNvbnN0IERJUkVDVElPTl9SSUdIVCA9IFwicmlnaHRcIjtcclxuXHJcbmNvbnN0IEtFWV9UT19ESVJFQ1RJT04gPSB7XHJcbiAgW0FSUk9XX0xFRlRfS0VZXTogRElSRUNUSU9OX1JJR0hULFxyXG4gIFtBUlJPV19SSUdIVF9LRVldOiBESVJFQ1RJT05fTEVGVCxcclxufTtcclxuXHJcbmNvbnN0IEVWRU5UX1NMSURFID0gYHNsaWRlJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfU0xJRCA9IGBzbGlkJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfS0VZRE9XTiA9IGBrZXlkb3duJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfTU9VU0VFTlRFUiA9IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfTU9VU0VMRUFWRSA9IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfVE9VQ0hTVEFSVCA9IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfVE9VQ0hNT1ZFID0gYHRvdWNobW92ZSR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX1RPVUNIRU5EID0gYHRvdWNoZW5kJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfUE9JTlRFUkRPV04gPSBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9QT0lOVEVSVVAgPSBgcG9pbnRlcnVwJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfRFJBR19TVEFSVCA9IGBkcmFnc3RhcnQke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJID0gYGxvYWQke0VWRU5UX0tFWX0ke0RBVEFfQVBJX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSA9IGBjbGljayR7RVZFTlRfS0VZfSR7REFUQV9BUElfS0VZfWA7XHJcblxyXG5jb25zdCBBVFRSX0FDVElWRSA9IFwiZGF0YS10d2UtY2Fyb3VzZWwtYWN0aXZlXCI7XHJcbmNvbnN0IEFUVFJfRU5EID0gXCJkYXRhLXR3ZS1jYXJvdXNlbC1pdGVtLWVuZFwiO1xyXG5jb25zdCBBVFRSX1NUQVJUID0gXCJkYXRhLXR3ZS1jYXJvdXNlbC1pdGVtLXN0YXJ0XCI7XHJcbmNvbnN0IEFUVFJfTkVYVCA9IFwiZGF0YS10d2UtY2Fyb3VzZWwtaXRlbS1uZXh0XCI7XHJcbmNvbnN0IEFUVFJfUFJFViA9IFwiZGF0YS10d2UtY2Fyb3VzZWwtaXRlbS1wcmV2XCI7XHJcbmNvbnN0IEFUVFJfUE9JTlRFUl9FVkVOVCA9IFwiZGF0YS10d2UtY2Fyb3VzZWwtcG9pbnRlci1ldmVudFwiO1xyXG5cclxuY29uc3QgU0VMRUNUT1JfREFUQV9DQVJPVVNFTF9JTklUID0gXCJbZGF0YS10d2UtY2Fyb3VzZWwtaW5pdF1cIjtcclxuY29uc3QgU0VMRUNUT1JfREFUQV9BQ1RJVkUgPSBcIltkYXRhLXR3ZS1jYXJvdXNlbC1hY3RpdmVdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RBVEFfSVRFTSA9IFwiW2RhdGEtdHdlLWNhcm91c2VsLWl0ZW1dXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RBVEFfQUNUSVZFX0lURU0gPSBgJHtTRUxFQ1RPUl9EQVRBX0FDVElWRX0ke1NFTEVDVE9SX0RBVEFfSVRFTX1gO1xyXG5jb25zdCBTRUxFQ1RPUl9EQVRBX0lURU1fSU1HID0gYCR7U0VMRUNUT1JfREFUQV9JVEVNfSBpbWdgO1xyXG5jb25zdCBTRUxFQ1RPUl9EQVRBX05FWFRfUFJFViA9XHJcbiAgXCJbZGF0YS10d2UtY2Fyb3VzZWwtaXRlbS1uZXh0XSwgW2RhdGEtdHdlLWNhcm91c2VsLWl0ZW0tcHJldl1cIjtcclxuY29uc3QgU0VMRUNUT1JfREFUQV9JTkRJQ0FUT1JTID0gXCJbZGF0YS10d2UtY2Fyb3VzZWwtaW5kaWNhdG9yc11cIjtcclxuY29uc3QgU0VMRUNUT1JfSU5ESUNBVE9SID0gXCJbZGF0YS10d2UtdGFyZ2V0XVwiO1xyXG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NMSURFID0gXCJbZGF0YS10d2Utc2xpZGVdLCBbZGF0YS10d2Utc2xpZGUtdG9dXCI7XHJcblxyXG5jb25zdCBQT0lOVEVSX1RZUEVfVE9VQ0ggPSBcInRvdWNoXCI7XHJcbmNvbnN0IFBPSU5URVJfVFlQRV9QRU4gPSBcInBlblwiO1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNsYXNzIERlZmluaXRpb25cclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcbmNsYXNzIENhcm91c2VsIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnLCBjbGFzc2VzKSB7XHJcbiAgICBzdXBlcihlbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XHJcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbnVsbDtcclxuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMudG91Y2hUaW1lb3V0ID0gbnVsbDtcclxuICAgIHRoaXMudG91Y2hTdGFydFggPSAwO1xyXG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XHJcblxyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLl9jbGFzc2VzID0gdGhpcy5fZ2V0Q2xhc3NlcyhjbGFzc2VzKTtcclxuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfREFUQV9JTkRJQ0FUT1JTLFxyXG4gICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICApO1xyXG4gICAgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgPVxyXG4gICAgICBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fFxyXG4gICAgICBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xyXG4gICAgdGhpcy5fcG9pbnRlckV2ZW50ID0gQm9vbGVhbih3aW5kb3cuUG9pbnRlckV2ZW50KTtcclxuXHJcbiAgICB0aGlzLl9zZXRBY3RpdmVFbGVtZW50Q2xhc3MoKTtcclxuICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9kaWRJbml0ID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pbml0KCk7XHJcbiAgICBpZiAodGhpcy5fY29uZmlnLnJpZGUgPT09IFwiY2Fyb3VzZWxcIikge1xyXG4gICAgICB0aGlzLmN5Y2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXR0ZXJzXHJcblxyXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcclxuICAgIHJldHVybiBEZWZhdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWNcclxuXHJcbiAgbmV4dCgpIHtcclxuICAgIHRoaXMuX3NsaWRlKE9SREVSX05FWFQpO1xyXG4gIH1cclxuXHJcbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xyXG4gICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxyXG4gICAgLy8gb3IgdGhlIGNhcm91c2VsIG9yIGl0cyBwYXJlbnQgaXNuJ3QgdmlzaWJsZVxyXG4gICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgaXNWaXNpYmxlKHRoaXMuX2VsZW1lbnQpKSB7XHJcbiAgICAgIHRoaXMubmV4dCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJldigpIHtcclxuICAgIHRoaXMuX3NsaWRlKE9SREVSX1BSRVYpO1xyXG4gIH1cclxuXHJcbiAgcGF1c2UoZXZlbnQpIHtcclxuICAgIGlmICghZXZlbnQpIHtcclxuICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RBVEFfTkVYVF9QUkVWLCB0aGlzLl9lbGVtZW50KSkge1xyXG4gICAgICB0cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KTtcclxuICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcclxuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGN5Y2xlKGV2ZW50KSB7XHJcbiAgICBpZiAoIWV2ZW50KSB7XHJcbiAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XHJcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xyXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2NvbmZpZyAmJiB0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XHJcbiAgICAgIHRoaXMuX3VwZGF0ZUludGVydmFsKCk7XHJcblxyXG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IHNldEludGVydmFsKFxyXG4gICAgICAgIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPyB0aGlzLm5leHRXaGVuVmlzaWJsZSA6IHRoaXMubmV4dCkuYmluZChcclxuICAgICAgICAgIHRoaXNcclxuICAgICAgICApLFxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdG8oaW5kZXgpIHtcclxuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFxyXG4gICAgICBTRUxFQ1RPUl9EQVRBX0FDVElWRV9JVEVNLFxyXG4gICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICApO1xyXG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLnRvKGluZGV4KSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYWN0aXZlSW5kZXggPT09IGluZGV4KSB7XHJcbiAgICAgIHRoaXMucGF1c2UoKTtcclxuICAgICAgdGhpcy5jeWNsZSgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3JkZXIgPSBpbmRleCA+IGFjdGl2ZUluZGV4ID8gT1JERVJfTkVYVCA6IE9SREVSX1BSRVY7XHJcblxyXG4gICAgdGhpcy5fc2xpZGUob3JkZXIsIHRoaXMuX2l0ZW1zW2luZGV4XSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgRXZlbnRIYW5kbGVyLm9mZihcclxuICAgICAgZG9jdW1lbnQsXHJcbiAgICAgIEVWRU5UX0NMSUNLX0RBVEFfQVBJLFxyXG4gICAgICBTRUxFQ1RPUl9EQVRBX1NMSURFLFxyXG4gICAgICBDYXJvdXNlbC5kYXRhQXBpQ2xpY2tIYW5kbGVyXHJcbiAgICApO1xyXG4gICAgRXZlbnRIYW5kbGVyLm9mZih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEkpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIC8vIFByaXZhdGVcclxuICBfaW5pdCgpIHtcclxuICAgIGlmICh0aGlzLl9kaWRJbml0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIEV2ZW50SGFuZGxlci5vbihcclxuICAgICAgZG9jdW1lbnQsXHJcbiAgICAgIEVWRU5UX0NMSUNLX0RBVEFfQVBJLFxyXG4gICAgICBTRUxFQ1RPUl9EQVRBX1NMSURFLFxyXG4gICAgICBDYXJvdXNlbC5kYXRhQXBpQ2xpY2tIYW5kbGVyXHJcbiAgICApO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX0xPQURfREFUQV9BUEksICgpID0+IHtcclxuICAgICAgY29uc3QgY2Fyb3VzZWxzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX0NBUk9VU0VMX0lOSVQpO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNhcm91c2Vscy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKFxyXG4gICAgICAgICAgY2Fyb3VzZWxzW2ldLFxyXG4gICAgICAgICAgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UoY2Fyb3VzZWxzW2ldKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2RpZEluaXQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXHJcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiID8gY29uZmlnIDoge30pLFxyXG4gICAgfTtcclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICBfZ2V0Q2xhc3NlcyhjbGFzc2VzKSB7XHJcbiAgICBjb25zdCBkYXRhQXR0cmlidXRlcyA9IE1hbmlwdWxhdG9yLmdldERhdGFDbGFzc0F0dHJpYnV0ZXModGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgY2xhc3NlcyA9IHtcclxuICAgICAgLi4uRGVmYXVsdENsYXNzZXMsXHJcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxyXG4gICAgICAuLi5jbGFzc2VzLFxyXG4gICAgfTtcclxuXHJcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY2xhc3NlcywgRGVmYXVsdENsYXNzZXNUeXBlKTtcclxuXHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIF9lbmFibGVDeWNsZSgpIHtcclxuICAgIGlmICghdGhpcy5fY29uZmlnLnJpZGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLmN5Y2xlKCkpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jeWNsZSgpO1xyXG4gIH1cclxuXHJcbiAgX2FwcGx5SW5pdGlhbENsYXNzZXMoKSB7XHJcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfREFUQV9BQ1RJVkVfSVRFTSxcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgKTtcclxuICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcclxuICAgICAgdGhpcy5fY2xhc3Nlcy5ibG9jayxcclxuICAgICAgLi4udGhpcy5fY2xhc3Nlcy52aXNpYmxlLnNwbGl0KFwiIFwiKVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGFjdGl2ZUVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZVN3aXBlKCkge1xyXG4gICAgY29uc3QgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7XHJcblxyXG4gICAgaWYgKGFic0RlbHRheCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVg7XHJcblxyXG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XHJcblxyXG4gICAgaWYgKCFkaXJlY3Rpb24pIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiA+IDAgPyBESVJFQ1RJT05fUklHSFQgOiBESVJFQ1RJT05fTEVGVCk7XHJcbiAgfVxyXG5cclxuICBfc2V0QWN0aXZlRWxlbWVudENsYXNzKCkge1xyXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXHJcbiAgICAgIFNFTEVDVE9SX0RBVEFfQUNUSVZFX0lURU0sXHJcbiAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICk7XHJcbiAgICBNYW5pcHVsYXRvci5hZGRDbGFzcyh0aGlzLl9hY3RpdmVFbGVtZW50LCBcImhpZGRlblwiKTtcclxuICB9XHJcblxyXG4gIF9hZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV04sIChldmVudCkgPT5cclxuICAgICAgICB0aGlzLl9rZXlkb3duKGV2ZW50KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09IFwiaG92ZXJcIikge1xyXG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VFTlRFUiwgKGV2ZW50KSA9PlxyXG4gICAgICAgIHRoaXMucGF1c2UoZXZlbnQpXHJcbiAgICAgICk7XHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRUxFQVZFLCAoZXZlbnQpID0+XHJcbiAgICAgICAgdGhpcy5fZW5hYmxlQ3ljbGUoZXZlbnQpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuX2NvbmZpZy50b3VjaCAmJiB0aGlzLl90b3VjaFN1cHBvcnRlZCkge1xyXG4gICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fYXBwbHlJbml0aWFsQ2xhc3NlcygpO1xyXG4gIH1cclxuXHJcbiAgX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBjb25zdCBoYXNQb2ludGVyUGVuVG91Y2ggPSAoZXZlbnQpID0+IHtcclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICB0aGlzLl9wb2ludGVyRXZlbnQgJiZcclxuICAgICAgICAoZXZlbnQucG9pbnRlclR5cGUgPT09IFBPSU5URVJfVFlQRV9QRU4gfHxcclxuICAgICAgICAgIGV2ZW50LnBvaW50ZXJUeXBlID09PSBQT0lOVEVSX1RZUEVfVE9VQ0gpXHJcbiAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0ID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChoYXNQb2ludGVyUGVuVG91Y2goZXZlbnQpKSB7XHJcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX3BvaW50ZXJFdmVudCkge1xyXG4gICAgICAgIHRoaXMudG91Y2hTdGFydFggPSBldmVudC50b3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAvLyBlbnN1cmUgc3dpcGluZyB3aXRoIG9uZSB0b3VjaCBhbmQgbm90IHBpbmNoaW5nXHJcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPVxyXG4gICAgICAgIGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggPiAxXHJcbiAgICAgICAgICA/IDBcclxuICAgICAgICAgIDogZXZlbnQudG91Y2hlc1swXS5jbGllbnRYIC0gdGhpcy50b3VjaFN0YXJ0WDtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgZW5kID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmIChoYXNQb2ludGVyUGVuVG91Y2goZXZlbnQpKSB7XHJcbiAgICAgICAgdGhpcy50b3VjaERlbHRhWCA9IGV2ZW50LmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9oYW5kbGVTd2lwZSgpO1xyXG4gICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSBcImhvdmVyXCIpIHtcclxuICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXHJcbiAgICAgICAgLy8gcGFydCBvZiB0aGUgbW91c2UgY29tcGF0aWJpbGl0eSBldmVudHMgb24gZmlyc3QgdGFwIC0gdGhlIGNhcm91c2VsXHJcbiAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcclxuICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxyXG4gICAgICAgIC8vIChhcyBpZiBpdCdzIHRoZSBzZWNvbmQgdGltZSB3ZSB0YXAgb24gaXQsIG1vdXNlZW50ZXIgY29tcGF0IGV2ZW50XHJcbiAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxyXG4gICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xyXG5cclxuICAgICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMudG91Y2hUaW1lb3V0KSB7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50b3VjaFRpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLl9lbmFibGVDeWNsZShldmVudCksXHJcbiAgICAgICAgICBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgdGhpcy5fY29uZmlnLmludGVydmFsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfSVRFTV9JTUcsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goXHJcbiAgICAgIChpdGVtSW1nKSA9PiB7XHJcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uKGl0ZW1JbWcsIEVWRU5UX0RSQUdfU1RBUlQsIChldmVudCkgPT5cclxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLl9wb2ludGVyRXZlbnQpIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCAoZXZlbnQpID0+XHJcbiAgICAgICAgc3RhcnQoZXZlbnQpXHJcbiAgICAgICk7XHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9QT0lOVEVSVVAsIChldmVudCkgPT4gZW5kKGV2ZW50KSk7XHJcblxyXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fY2xhc3Nlcy5wb2ludGVyKTtcclxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoYCR7QVRUUl9QT0lOVEVSX0VWRU5UfWAsIFwiXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNIU1RBUlQsIChldmVudCkgPT4gc3RhcnQoZXZlbnQpKTtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1RPVUNITU9WRSwgKGV2ZW50KSA9PiBtb3ZlKGV2ZW50KSk7XHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSEVORCwgKGV2ZW50KSA9PiBlbmQoZXZlbnQpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9rZXlkb3duKGV2ZW50KSB7XHJcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IEtFWV9UT19ESVJFQ1RJT05bZXZlbnQua2V5XTtcclxuICAgIGlmIChkaXJlY3Rpb24pIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5fc2xpZGUoZGlyZWN0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xyXG4gICAgdGhpcy5faXRlbXMgPVxyXG4gICAgICBlbGVtZW50ICYmIGVsZW1lbnQucGFyZW50Tm9kZVxyXG4gICAgICAgID8gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX0lURU0sIGVsZW1lbnQucGFyZW50Tm9kZSlcclxuICAgICAgICA6IFtdO1xyXG5cclxuICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgX2dldEl0ZW1CeU9yZGVyKG9yZGVyLCBhY3RpdmVFbGVtZW50KSB7XHJcbiAgICBjb25zdCBpc05leHQgPSBvcmRlciA9PT0gT1JERVJfTkVYVDtcclxuICAgIHJldHVybiBnZXROZXh0QWN0aXZlRWxlbWVudChcclxuICAgICAgdGhpcy5faXRlbXMsXHJcbiAgICAgIGFjdGl2ZUVsZW1lbnQsXHJcbiAgICAgIGlzTmV4dCxcclxuICAgICAgdGhpcy5fY29uZmlnLndyYXBcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XHJcbiAgICBjb25zdCB0YXJnZXRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChyZWxhdGVkVGFyZ2V0KTtcclxuICAgIGNvbnN0IGZyb21JbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChcclxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9EQVRBX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJREUsIHtcclxuICAgICAgcmVsYXRlZFRhcmdldCxcclxuICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXHJcbiAgICAgIGZyb206IGZyb21JbmRleCxcclxuICAgICAgdG86IHRhcmdldEluZGV4LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcclxuICAgICAgY29uc3QgYWN0aXZlSW5kaWNhdG9yID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgICBTRUxFQ1RPUl9EQVRBX0FDVElWRSxcclxuICAgICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudFxyXG4gICAgICApO1xyXG5cclxuICAgICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZShBVFRSX0FDVElWRSk7XHJcbiAgICAgIGFjdGl2ZUluZGljYXRvci5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIik7XHJcbiAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKFwiIW9wYWNpdHktMTAwXCIpO1xyXG5cclxuICAgICAgY29uc3QgaW5kaWNhdG9ycyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoXHJcbiAgICAgICAgU0VMRUNUT1JfSU5ESUNBVE9SLFxyXG4gICAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljYXRvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICBOdW1iZXIucGFyc2VJbnQoXHJcbiAgICAgICAgICAgIGluZGljYXRvcnNbaV0uZ2V0QXR0cmlidXRlKFwiZGF0YS10d2Utc2xpZGUtdG9cIiksXHJcbiAgICAgICAgICAgIDEwXHJcbiAgICAgICAgICApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGluZGljYXRvcnNbaV0uc2V0QXR0cmlidXRlKGAke0FUVFJfQUNUSVZFfWAsIFwiXCIpO1xyXG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWN1cnJlbnRcIiwgXCJ0cnVlXCIpO1xyXG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5jbGFzc0xpc3QuYWRkKFwiIW9wYWNpdHktMTAwXCIpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfdXBkYXRlSW50ZXJ2YWwoKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID1cclxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCB8fFxyXG4gICAgICBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RBVEFfQUNUSVZFX0lURU0sIHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWxlbWVudEludGVydmFsID0gTnVtYmVyLnBhcnNlSW50KFxyXG4gICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdHdlLWludGVydmFsXCIpLFxyXG4gICAgICAxMFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudEludGVydmFsKSB7XHJcbiAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgPVxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xyXG4gICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSBlbGVtZW50SW50ZXJ2YWw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPVxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3NsaWRlKGRpcmVjdGlvbk9yT3JkZXIsIGVsZW1lbnQpIHtcclxuICAgIGNvbnN0IG9yZGVyID0gdGhpcy5fZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb25Pck9yZGVyKTtcclxuXHJcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfREFUQV9BQ1RJVkVfSVRFTSxcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgKTtcclxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcclxuXHJcbiAgICBjb25zdCBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgdGhpcy5fZ2V0SXRlbUJ5T3JkZXIob3JkZXIsIGFjdGl2ZUVsZW1lbnQpO1xyXG4gICAgY29uc3QgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XHJcblxyXG4gICAgY29uc3QgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XHJcblxyXG4gICAgY29uc3QgaXNOZXh0ID0gb3JkZXIgPT09IE9SREVSX05FWFQ7XHJcbiAgICBjb25zdCBkaXJlY3Rpb25hbEF0dHIgPSBpc05leHQgPyBBVFRSX1NUQVJUIDogQVRUUl9FTkQ7XHJcbiAgICBjb25zdCBvcmRlckF0dHIgPSBpc05leHQgPyBBVFRSX05FWFQgOiBBVFRSX1BSRVY7XHJcbiAgICBjb25zdCBldmVudERpcmVjdGlvbk5hbWUgPSB0aGlzLl9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKTtcclxuXHJcbiAgICBjb25zdCBhY3RpdmVDbGFzcyA9XHJcbiAgICAgIGRpcmVjdGlvbmFsQXR0ciA9PT0gQVRUUl9TVEFSVFxyXG4gICAgICAgID8gdGhpcy5fY2xhc3Nlcy5zbGlkZUxlZnRcclxuICAgICAgICA6IHRoaXMuX2NsYXNzZXMuc2xpZGVSaWdodDtcclxuICAgIGNvbnN0IG5leHRDbGFzcyA9XHJcbiAgICAgIGRpcmVjdGlvbmFsQXR0ciAhPT0gQVRUUl9TVEFSVFxyXG4gICAgICAgID8gdGhpcy5fY2xhc3Nlcy5zbGlkZUxlZnRcclxuICAgICAgICA6IHRoaXMuX2NsYXNzZXMuc2xpZGVSaWdodDtcclxuXHJcbiAgICBpZiAobmV4dEVsZW1lbnQgJiYgbmV4dEVsZW1lbnQuaGFzQXR0cmlidXRlKEFUVFJfQUNUSVZFKSkge1xyXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9pc1NsaWRpbmcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHNsaWRlRXZlbnQgPSB0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChuZXh0RWxlbWVudCwgZXZlbnREaXJlY3Rpb25OYW1lKTtcclxuICAgIGlmIChzbGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcclxuICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9pc1NsaWRpbmcgPSB0cnVlO1xyXG5cclxuICAgIGlmIChpc0N5Y2xpbmcpIHtcclxuICAgICAgdGhpcy5wYXVzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xyXG4gICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG5leHRFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IHRyaWdnZXJTbGlkRXZlbnQgPSAoKSA9PiB7XHJcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSUQsIHtcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcclxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcclxuICAgICAgICBmcm9tOiBhY3RpdmVFbGVtZW50SW5kZXgsXHJcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXgsXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBuZXh0RWxlbWVudC5zZXRBdHRyaWJ1dGUoYCR7b3JkZXJBdHRyfWAsIFwiXCIpO1xyXG4gICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9jbGFzc2VzLmJsb2NrLCBuZXh0Q2xhc3MpO1xyXG5cclxuICAgIHJlZmxvdyhuZXh0RWxlbWVudCk7XHJcblxyXG4gICAgYWN0aXZlRWxlbWVudC5zZXRBdHRyaWJ1dGUoYCR7ZGlyZWN0aW9uYWxBdHRyfWAsIFwiXCIpO1xyXG4gICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKFxyXG4gICAgICBhY3RpdmVDbGFzcyxcclxuICAgICAgLi4udGhpcy5fY2xhc3Nlcy5pbnZpc2libGUuc3BsaXQoXCIgXCIpXHJcbiAgICApO1xyXG4gICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKC4uLnRoaXMuX2NsYXNzZXMudmlzaWJsZS5zcGxpdChcIiBcIikpO1xyXG5cclxuICAgIG5leHRFbGVtZW50LnNldEF0dHJpYnV0ZShgJHtkaXJlY3Rpb25hbEF0dHJ9YCwgXCJcIik7XHJcbiAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuX2NsYXNzZXMudmlzaWJsZS5zcGxpdChcIiBcIikpO1xyXG4gICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgdGhpcy5fY2xhc3Nlcy5zbGlkZVJpZ2h0LFxyXG4gICAgICB0aGlzLl9jbGFzc2VzLnNsaWRlTGVmdFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZUNhbGxCYWNrID0gKCkgPT4ge1xyXG4gICAgICBuZXh0RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoZGlyZWN0aW9uYWxBdHRyKTtcclxuICAgICAgbmV4dEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG9yZGVyQXR0cik7XHJcbiAgICAgIG5leHRFbGVtZW50LnNldEF0dHJpYnV0ZShgJHtBVFRSX0FDVElWRX1gLCBcIlwiKTtcclxuXHJcbiAgICAgIGFjdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKEFUVFJfQUNUSVZFKTtcclxuICAgICAgYWN0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFxyXG4gICAgICAgIGFjdGl2ZUNsYXNzLFxyXG4gICAgICAgIC4uLnRoaXMuX2NsYXNzZXMuaW52aXNpYmxlLnNwbGl0KFwiIFwiKSxcclxuICAgICAgICB0aGlzLl9jbGFzc2VzLmJsb2NrXHJcbiAgICAgICk7XHJcbiAgICAgIGFjdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG9yZGVyQXR0cik7XHJcbiAgICAgIGFjdGl2ZUVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGRpcmVjdGlvbmFsQXR0cik7XHJcblxyXG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgIHNldFRpbWVvdXQodHJpZ2dlclNsaWRFdmVudCwgMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgYWN0aXZlRWxlbWVudCwgdHJ1ZSk7XHJcblxyXG4gICAgaWYgKGlzQ3ljbGluZyB8fCB0aGlzLl9jb25maWcucmlkZSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLmN5Y2xlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb24pIHtcclxuICAgIGlmICghW0RJUkVDVElPTl9SSUdIVCwgRElSRUNUSU9OX0xFRlRdLmluY2x1ZGVzKGRpcmVjdGlvbikpIHtcclxuICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNSVEwoKSkge1xyXG4gICAgICByZXR1cm4gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTEVGVCA/IE9SREVSX1BSRVYgOiBPUkRFUl9ORVhUO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfTkVYVCA6IE9SREVSX1BSRVY7XHJcbiAgfVxyXG5cclxuICBfb3JkZXJUb0RpcmVjdGlvbihvcmRlcikge1xyXG4gICAgaWYgKCFbT1JERVJfTkVYVCwgT1JERVJfUFJFVl0uaW5jbHVkZXMob3JkZXIpKSB7XHJcbiAgICAgIHJldHVybiBvcmRlcjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNSVEwoKSkge1xyXG4gICAgICByZXR1cm4gb3JkZXIgPT09IE9SREVSX1BSRVYgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3JkZXIgPT09IE9SREVSX1BSRVYgPyBESVJFQ1RJT05fUklHSFQgOiBESVJFQ1RJT05fTEVGVDtcclxuICB9XHJcblxyXG4gIC8vIFN0YXRpY1xyXG5cclxuICBzdGF0aWMgY2Fyb3VzZWxJbnRlcmZhY2UoZWxlbWVudCwgY29uZmlnKSB7XHJcbiAgICBjb25zdCBkYXRhID0gQ2Fyb3VzZWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCBjb25maWcpO1xyXG5cclxuICAgIGxldCB7IF9jb25maWcgfSA9IGRhdGE7XHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICBfY29uZmlnID0ge1xyXG4gICAgICAgIC4uLl9jb25maWcsXHJcbiAgICAgICAgLi4uY29uZmlnLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWN0aW9uID0gdHlwZW9mIGNvbmZpZyA9PT0gXCJzdHJpbmdcIiA/IGNvbmZpZyA6IGNvbmZpZy5zbGlkZTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICBkYXRhLnRvKGNvbmZpZyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHthY3Rpb259XCJgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGF0YVthY3Rpb25dKCk7XHJcbiAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlID09PSB0cnVlKSB7XHJcbiAgICAgIGRhdGEucGF1c2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgbGV0IGRhdGEgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICBkYXRhLnRvKGNvbmZpZyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XHJcblxyXG4gICAgaWYgKCF0YXJnZXQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbmZpZyA9IHtcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGFyZ2V0KSxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcyksXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS10d2Utc2xpZGUtdG9cIik7XHJcblxyXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcclxuICAgICAgY29uZmlnLmludGVydmFsID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UodGFyZ2V0LCBjb25maWcpO1xyXG5cclxuICAgIGlmIChzbGlkZUluZGV4KSB7XHJcbiAgICAgIENhcm91c2VsLmdldEluc3RhbmNlKHRhcmdldCkudG8oc2xpZGVJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENhcm91c2VsO1xyXG4iLCJjb25zdCB1cmlBdHRyaWJ1dGVzID0gbmV3IFNldChbXHJcbiAgXCJiYWNrZ3JvdW5kXCIsXHJcbiAgXCJjaXRlXCIsXHJcbiAgXCJocmVmXCIsXHJcbiAgXCJpdGVtdHlwZVwiLFxyXG4gIFwibG9uZ2Rlc2NcIixcclxuICBcInBvc3RlclwiLFxyXG4gIFwic3JjXCIsXHJcbiAgXCJ4bGluazpocmVmXCIsXHJcbl0pO1xyXG5cclxuY29uc3QgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pO1xyXG5jb25zdCBEQVRBX1RFX0FUVFJJQlVURV9QQVRURVJOID0gL15kYXRhLXR3ZS1bXFx3LV0qJC9pO1xyXG5cclxuLyoqXHJcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cclxuICpcclxuICogU2hvdXRvdXQgdG8gQW5ndWxhciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvMTIuMi54L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXHJcbiAqL1xyXG5jb25zdCBTQUZFX1VSTF9QQVRURVJOID1cclxuICAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlfHNtcyk6fFteIyYvOj9dKig/OlsjLz9dfCQpKS9pO1xyXG5cclxuLyoqXHJcbiAqIEEgcGF0dGVybiB0aGF0IG1hdGNoZXMgc2FmZSBkYXRhIFVSTHMuIE9ubHkgbWF0Y2hlcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvIHR5cGVzLlxyXG4gKlxyXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcclxuICovXHJcbmNvbnN0IERBVEFfVVJMX1BBVFRFUk4gPVxyXG4gIC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcXGQrL2Etel0rPSokL2k7XHJcblxyXG5jb25zdCBhbGxvd2VkQXR0cmlidXRlID0gKGF0dHJpYnV0ZSwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpID0+IHtcclxuICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gIGlmIChhbGxvd2VkQXR0cmlidXRlTGlzdC5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lKSkge1xyXG4gICAgaWYgKHVyaUF0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgIHJldHVybiBCb29sZWFuKFxyXG4gICAgICAgIFNBRkVfVVJMX1BBVFRFUk4udGVzdChhdHRyaWJ1dGUubm9kZVZhbHVlKSB8fFxyXG4gICAgICAgICAgREFUQV9VUkxfUEFUVEVSTi50ZXN0KGF0dHJpYnV0ZS5ub2RlVmFsdWUpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjb25zdCByZWdFeHAgPSBhbGxvd2VkQXR0cmlidXRlTGlzdC5maWx0ZXIoXHJcbiAgICAoYXR0cmlidXRlUmVnZXgpID0+IGF0dHJpYnV0ZVJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwXHJcbiAgKTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgYSByZWd1bGFyIGV4cHJlc3Npb24gdmFsaWRhdGVzIHRoZSBhdHRyaWJ1dGUuXHJcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJlZ0V4cC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgaWYgKHJlZ0V4cFtpXS50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERlZmF1bHRXaGl0ZWxpc3QgPSB7XHJcbiAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cclxuICBcIipcIjogW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJkaXJcIixcclxuICAgIFwiaWRcIixcclxuICAgIFwibGFuZ1wiLFxyXG4gICAgXCJyb2xlXCIsXHJcbiAgICBBUklBX0FUVFJJQlVURV9QQVRURVJOLFxyXG4gICAgREFUQV9URV9BVFRSSUJVVEVfUEFUVEVSTixcclxuICBdLFxyXG4gIGE6IFtcInRhcmdldFwiLCBcImhyZWZcIiwgXCJ0aXRsZVwiLCBcInJlbFwiXSxcclxuICBhcmVhOiBbXSxcclxuICBiOiBbXSxcclxuICBicjogW10sXHJcbiAgY29sOiBbXSxcclxuICBjb2RlOiBbXSxcclxuICBkaXY6IFtdLFxyXG4gIGVtOiBbXSxcclxuICBocjogW10sXHJcbiAgaDE6IFtdLFxyXG4gIGgyOiBbXSxcclxuICBoMzogW10sXHJcbiAgaDQ6IFtdLFxyXG4gIGg1OiBbXSxcclxuICBoNjogW10sXHJcbiAgaTogW10sXHJcbiAgaW1nOiBbXCJzcmNcIiwgXCJzcmNzZXRcIiwgXCJhbHRcIiwgXCJ0aXRsZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCJdLFxyXG4gIGxpOiBbXSxcclxuICBvbDogW10sXHJcbiAgcDogW10sXHJcbiAgcHJlOiBbXSxcclxuICBzOiBbXSxcclxuICBzbWFsbDogW10sXHJcbiAgc3BhbjogW10sXHJcbiAgc3ViOiBbXSxcclxuICBzdXA6IFtdLFxyXG4gIHN0cm9uZzogW10sXHJcbiAgdTogW10sXHJcbiAgdWw6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERlZmF1bHRBbGxvd2xpc3QgPSB7XHJcbiAgLy8gR2xvYmFsIGF0dHJpYnV0ZXMgYWxsb3dlZCBvbiBhbnkgc3VwcGxpZWQgZWxlbWVudCBiZWxvdy5cclxuICBcIipcIjogW1xyXG4gICAgXCJjbGFzc1wiLFxyXG4gICAgXCJkaXJcIixcclxuICAgIFwiaWRcIixcclxuICAgIFwibGFuZ1wiLFxyXG4gICAgXCJyb2xlXCIsXHJcbiAgICBBUklBX0FUVFJJQlVURV9QQVRURVJOLFxyXG4gICAgREFUQV9URV9BVFRSSUJVVEVfUEFUVEVSTixcclxuICBdLFxyXG4gIGE6IFtcInRhcmdldFwiLCBcImhyZWZcIiwgXCJ0aXRsZVwiLCBcInJlbFwiXSxcclxuICBhcmVhOiBbXSxcclxuICBiOiBbXSxcclxuICBicjogW10sXHJcbiAgY29sOiBbXSxcclxuICBjb2RlOiBbXSxcclxuICBkaXY6IFtdLFxyXG4gIGVtOiBbXSxcclxuICBocjogW10sXHJcbiAgaDE6IFtdLFxyXG4gIGgyOiBbXSxcclxuICBoMzogW10sXHJcbiAgaDQ6IFtdLFxyXG4gIGg1OiBbXSxcclxuICBoNjogW10sXHJcbiAgaTogW10sXHJcbiAgaW1nOiBbXCJzcmNcIiwgXCJzcmNzZXRcIiwgXCJhbHRcIiwgXCJ0aXRsZVwiLCBcIndpZHRoXCIsIFwiaGVpZ2h0XCJdLFxyXG4gIGxpOiBbXSxcclxuICBvbDogW10sXHJcbiAgcDogW10sXHJcbiAgcHJlOiBbXSxcclxuICBzOiBbXSxcclxuICBzbWFsbDogW10sXHJcbiAgc3BhbjogW10sXHJcbiAgc3ViOiBbXSxcclxuICBzdXA6IFtdLFxyXG4gIHN0cm9uZzogW10sXHJcbiAgdTogW10sXHJcbiAgdWw6IFtdLFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplSHRtbCh1bnNhZmVIdG1sLCBhbGxvd0xpc3QsIHNhbml0aXplRm4pIHtcclxuICBpZiAoIXVuc2FmZUh0bWwubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gdW5zYWZlSHRtbDtcclxuICB9XHJcblxyXG4gIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIHJldHVybiBzYW5pdGl6ZUZuKHVuc2FmZUh0bWwpO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTtcclxuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsIFwidGV4dC9odG1sXCIpO1xyXG4gIGNvbnN0IGVsZW1lbnRzID0gW10uY29uY2F0KC4uLmNyZWF0ZWREb2N1bWVudC5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XHJcbiAgICBjb25zdCBlbGVtZW50TmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICBpZiAoIU9iamVjdC5rZXlzKGFsbG93TGlzdCkuaW5jbHVkZXMoZWxlbWVudE5hbWUpKSB7XHJcbiAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XHJcblxyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhdHRyaWJ1dGVMaXN0ID0gW10uY29uY2F0KC4uLmVsZW1lbnQuYXR0cmlidXRlcyk7XHJcbiAgICBjb25zdCBhbGxvd2VkQXR0cmlidXRlcyA9IFtdLmNvbmNhdChcclxuICAgICAgYWxsb3dMaXN0W1wiKlwiXSB8fCBbXSxcclxuICAgICAgYWxsb3dMaXN0W2VsZW1lbnROYW1lXSB8fCBbXVxyXG4gICAgKTtcclxuXHJcbiAgICBhdHRyaWJ1dGVMaXN0LmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xyXG4gICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGUoYXR0cmlidXRlLCBhbGxvd2VkQXR0cmlidXRlcykpIHtcclxuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjcmVhdGVkRG9jdW1lbnQuYm9keS5pbm5lckhUTUw7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUG9wcGVyIGZyb20gXCJAcG9wcGVyanMvY29yZVwiO1xyXG5cclxuaW1wb3J0IHtcclxuICBmaW5kU2hhZG93Um9vdCxcclxuICBnZXRFbGVtZW50LFxyXG4gIGdldFVJRCxcclxuICBpc0VsZW1lbnQsXHJcbiAgaXNSVEwsXHJcbiAgbm9vcCxcclxuICB0eXBlQ2hlY2tDb25maWcsXHJcbn0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXhcIjtcclxuaW1wb3J0IHsgRGVmYXVsdEFsbG93bGlzdCwgc2FuaXRpemVIdG1sIH0gZnJvbSBcIi4uLy4uL3V0aWwvc2FuaXRpemVyXCI7XHJcbmltcG9ydCBEYXRhIGZyb20gXCIuLi8uLi9kb20vZGF0YVwiO1xyXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuLi8uLi9kb20vZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uLy4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSBcIi4uLy4uL2RvbS9zZWxlY3Rvci1lbmdpbmVcIjtcclxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ29uc3RhbnRzXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY29uc3QgTkFNRSA9IFwidG9vbHRpcFwiO1xyXG5jb25zdCBEQVRBX0tFWSA9IFwidHdlLnRvb2x0aXBcIjtcclxuY29uc3QgRVZFTlRfS0VZID0gYC4ke0RBVEFfS0VZfWA7XHJcbmNvbnN0IENMQVNTX1BSRUZJWCA9IFwidGUtdG9vbHRpcFwiO1xyXG5jb25zdCBESVNBTExPV0VEX0FUVFJJQlVURVMgPSBuZXcgU2V0KFtcInNhbml0aXplXCIsIFwiYWxsb3dMaXN0XCIsIFwic2FuaXRpemVGblwiXSk7XHJcblxyXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcclxuICBhbmltYXRpb246IFwiYm9vbGVhblwiLFxyXG4gIHRlbXBsYXRlOiBcInN0cmluZ1wiLFxyXG4gIHRpdGxlOiBcIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIixcclxuICB0cmlnZ2VyOiBcInN0cmluZ1wiLFxyXG4gIGRlbGF5OiBcIihudW1iZXJ8b2JqZWN0KVwiLFxyXG4gIGh0bWw6IFwiYm9vbGVhblwiLFxyXG4gIHNlbGVjdG9yOiBcIihzdHJpbmd8Ym9vbGVhbilcIixcclxuICBwbGFjZW1lbnQ6IFwiKHN0cmluZ3xmdW5jdGlvbilcIixcclxuICBvZmZzZXQ6IFwiKGFycmF5fHN0cmluZ3xmdW5jdGlvbilcIixcclxuICBjb250YWluZXI6IFwiKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pXCIsXHJcbiAgZmFsbGJhY2tQbGFjZW1lbnRzOiBcImFycmF5XCIsXHJcbiAgYm91bmRhcnk6IFwiKHN0cmluZ3xlbGVtZW50KVwiLFxyXG4gIGN1c3RvbUNsYXNzOiBcIihzdHJpbmd8ZnVuY3Rpb24pXCIsXHJcbiAgc2FuaXRpemU6IFwiYm9vbGVhblwiLFxyXG4gIHNhbml0aXplRm46IFwiKG51bGx8ZnVuY3Rpb24pXCIsXHJcbiAgYWxsb3dMaXN0OiBcIm9iamVjdFwiLFxyXG4gIHBvcHBlckNvbmZpZzogXCIobnVsbHxvYmplY3R8ZnVuY3Rpb24pXCIsXHJcbn07XHJcblxyXG5jb25zdCBBdHRhY2htZW50TWFwID0ge1xyXG4gIEFVVE86IFwiYXV0b1wiLFxyXG4gIFRPUDogXCJ0b3BcIixcclxuICBSSUdIVDogaXNSVEwoKSA/IFwibGVmdFwiIDogXCJyaWdodFwiLFxyXG4gIEJPVFRPTTogXCJib3R0b21cIixcclxuICBMRUZUOiBpc1JUTCgpID8gXCJyaWdodFwiIDogXCJsZWZ0XCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0ID0ge1xyXG4gIGFuaW1hdGlvbjogdHJ1ZSxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cIm9wYWNpdHktMCB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tMzAwIGVhc2UtaW4tb3V0IGFic29sdXRlIHotWzEwODBdIGJsb2NrIG0tMCB0ZXh0LXNtIG5vdC1pdGFsaWMgZm9udC1ub3JtYWwgdGV4dC1sZWZ0IG5vLXVuZGVybGluZSB1bmRlcmxpbmUtb2Zmc2V0LWF1dG8gbm9ybWFsLWNhc2UgbGVhZGluZy02IHRyYWNraW5nLW5vcm1hbCBicmVhay1ub3JtYWwgd2hpdGVzcGFjZS1ub3JtYWxcIiByb2xlPVwidG9vbHRpcFwiPlxyXG4gICAgICA8ZGl2IGRhdGEtdHdlLXRvb2x0aXAtaW5uZXItcmVmIGNsYXNzPVwibWF4LXctWzIwMHB4XSB0ZXh0LXNtIHB5LTEuNSBweC00IHRleHQtd2hpdGUgdGV4dC1jZW50ZXIgYmctWyM2ZDZkNmRdIHJvdW5kZWRcIj48L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxuICB0cmlnZ2VyOiBcImhvdmVyIGZvY3VzXCIsXHJcbiAgdGl0bGU6IFwiXCIsXHJcbiAgZGVsYXk6IDAsXHJcbiAgaHRtbDogZmFsc2UsXHJcbiAgc2VsZWN0b3I6IGZhbHNlLFxyXG4gIHBsYWNlbWVudDogXCJ0b3BcIixcclxuICBvZmZzZXQ6IFswLCAwXSxcclxuICBjb250YWluZXI6IGZhbHNlLFxyXG4gIGZhbGxiYWNrUGxhY2VtZW50czogW1widG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCJdLFxyXG4gIGJvdW5kYXJ5OiBcImNsaXBwaW5nUGFyZW50c1wiLFxyXG4gIGN1c3RvbUNsYXNzOiBcIlwiLFxyXG4gIHNhbml0aXplOiB0cnVlLFxyXG4gIHNhbml0aXplRm46IG51bGwsXHJcbiAgYWxsb3dMaXN0OiBEZWZhdWx0QWxsb3dsaXN0LFxyXG4gIHBvcHBlckNvbmZpZzogeyBoaWRlOiB0cnVlIH0sXHJcbn07XHJcblxyXG5jb25zdCBFdmVudCA9IHtcclxuICBISURFOiBgaGlkZSR7RVZFTlRfS0VZfWAsXHJcbiAgSElEREVOOiBgaGlkZGVuJHtFVkVOVF9LRVl9YCxcclxuICBTSE9XOiBgc2hvdyR7RVZFTlRfS0VZfWAsXHJcbiAgU0hPV046IGBzaG93biR7RVZFTlRfS0VZfWAsXHJcbiAgSU5TRVJURUQ6IGBpbnNlcnRlZCR7RVZFTlRfS0VZfWAsXHJcbiAgQ0xJQ0s6IGBjbGljayR7RVZFTlRfS0VZfWAsXHJcbiAgRk9DVVNJTjogYGZvY3VzaW4ke0VWRU5UX0tFWX1gLFxyXG4gIEZPQ1VTT1VUOiBgZm9jdXNvdXQke0VWRU5UX0tFWX1gLFxyXG4gIE1PVVNFRU5URVI6IGBtb3VzZWVudGVyJHtFVkVOVF9LRVl9YCxcclxuICBNT1VTRUxFQVZFOiBgbW91c2VsZWF2ZSR7RVZFTlRfS0VZfWAsXHJcbn07XHJcblxyXG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSBcImZhZGVcIjtcclxuY29uc3QgQ0xBU1NfTkFNRV9NT0RBTCA9IFwibW9kYWxcIjtcclxuY29uc3QgQ0xBU1NfTkFNRV9TSE9XID0gXCJzaG93XCI7XHJcblxyXG5jb25zdCBIT1ZFUl9TVEFURV9TSE9XID0gXCJzaG93XCI7XHJcbmNvbnN0IEhPVkVSX1NUQVRFX09VVCA9IFwib3V0XCI7XHJcblxyXG5jb25zdCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSID0gXCJbZGF0YS10d2UtdG9vbHRpcC1pbm5lci1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX01PREFMID0gYC4ke0NMQVNTX05BTUVfTU9EQUx9YDtcclxuXHJcbmNvbnN0IEVWRU5UX01PREFMX0hJREUgPSBcImhpZGUudHdlLm1vZGFsXCI7XHJcblxyXG5jb25zdCBUUklHR0VSX0hPVkVSID0gXCJob3ZlclwiO1xyXG5jb25zdCBUUklHR0VSX0ZPQ1VTID0gXCJmb2N1c1wiO1xyXG5jb25zdCBUUklHR0VSX0NMSUNLID0gXCJjbGlja1wiO1xyXG5jb25zdCBUUklHR0VSX01BTlVBTCA9IFwibWFudWFsXCI7XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ2xhc3MgRGVmaW5pdGlvblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcclxuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgXCJCb290c3RyYXAncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoZWxlbWVudCk7XHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcclxuICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xyXG4gICAgdGhpcy5faG92ZXJTdGF0ZSA9IFwiXCI7XHJcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XHJcbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xyXG5cclxuICAgIC8vIFByb3RlY3RlZFxyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLnRpcCA9IG51bGw7XHJcblxyXG4gICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBHZXR0ZXJzXHJcblxyXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcclxuICAgIHJldHVybiBEZWZhdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xyXG4gICAgcmV0dXJuIEV2ZW50O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcclxuICAgIHJldHVybiBEZWZhdWx0VHlwZTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpY1xyXG5cclxuICBlbmFibGUoKSB7XHJcbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZGlzYWJsZSgpIHtcclxuICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRW5hYmxlZCgpIHtcclxuICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICB0b2dnbGUoZXZlbnQpIHtcclxuICAgIGlmICghdGhpcy5faXNFbmFibGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCk7XHJcblxyXG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XHJcblxyXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XHJcbiAgICAgICAgY29udGV4dC5fZW50ZXIobnVsbCwgY29udGV4dCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLmdldFRpcEVsZW1lbnQoKS5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xyXG4gICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vZmYoXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9NT0RBTCksXHJcbiAgICAgIEVWRU5UX01PREFMX0hJREUsXHJcbiAgICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXJcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHRoaXMudGlwKSB7XHJcbiAgICAgIHRoaXMudGlwLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBpZiAodGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoISh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcihcclxuICAgICAgdGhpcy5fZWxlbWVudCxcclxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XXHJcbiAgICApO1xyXG4gICAgY29uc3Qgc2hhZG93Um9vdCA9IGZpbmRTaGFkb3dSb290KHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgY29uc3QgaXNJblRoZURvbSA9XHJcbiAgICAgIHNoYWRvd1Jvb3QgPT09IG51bGxcclxuICAgICAgICA/IHRoaXMuX2VsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnModGhpcy5fZWxlbWVudClcclxuICAgICAgICA6IHNoYWRvd1Jvb3QuY29udGFpbnModGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8ICFpc0luVGhlRG9tKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBIHRyaWNrIHRvIHJlY3JlYXRlIGEgdG9vbHRpcCBpbiBjYXNlIGEgbmV3IHRpdGxlIGlzIGdpdmVuIGJ5IHVzaW5nIHRoZSBOT1QgZG9jdW1lbnRlZCBgZGF0YS10d2Utb3JpZ2luYWwtdGl0bGVgXHJcbiAgICAvLyBUaGlzIHdpbGwgYmUgcmVtb3ZlZCBsYXRlciBpbiBmYXZvciBvZiBhIGBzZXRDb250ZW50YCBtZXRob2RcclxuICAgIGlmIChcclxuICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5OQU1FID09PSBcInRvb2x0aXBcIiAmJlxyXG4gICAgICB0aGlzLnRpcCAmJlxyXG4gICAgICB0aGlzLmdldFRpdGxlKCkgIT09XHJcbiAgICAgICAgdGhpcy50aXAucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9UT09MVElQX0lOTkVSKS5pbm5lckhUTUxcclxuICAgICkge1xyXG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKCk7XHJcbiAgICAgIHRoaXMudGlwLnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLnRpcCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XHJcbiAgICBjb25zdCB0aXBJZCA9IGdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO1xyXG5cclxuICAgIHRpcC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aXBJZCk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiwgdGlwSWQpO1xyXG5cclxuICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGlwLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTEwMFwiKTtcclxuICAgICAgICB0aGlzLnRpcC5jbGFzc0xpc3QucmVtb3ZlKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgICB9LCAxMDApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHBsYWNlbWVudCA9XHJcbiAgICAgIHR5cGVvZiB0aGlzLl9jb25maWcucGxhY2VtZW50ID09PSBcImZ1bmN0aW9uXCJcclxuICAgICAgICA/IHRoaXMuX2NvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuX2VsZW1lbnQpXHJcbiAgICAgICAgOiB0aGlzLl9jb25maWcucGxhY2VtZW50O1xyXG5cclxuICAgIGNvbnN0IGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XHJcbiAgICB0aGlzLl9hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XHJcblxyXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHRoaXMuX2NvbmZpZztcclxuICAgIERhdGEuc2V0RGF0YSh0aXAsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksIHRoaXMpO1xyXG5cclxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcclxuICAgICAgY29udGFpbmVyLmFwcGVuZCh0aXApO1xyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XHJcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3BvcHBlciA9IFBvcHBlci5jcmVhdGVQb3BwZXIoXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudCxcclxuICAgICAgICB0aXAsXHJcbiAgICAgICAgdGhpcy5fZ2V0UG9wcGVyQ29uZmlnKGF0dGFjaG1lbnQpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgbm90UG9wb3ZlciA9IHRpcC5nZXRBdHRyaWJ1dGUoXCJpZFwiKS5pbmNsdWRlcyhcInRvb2x0aXBcIik7XHJcbiAgICBpZiAobm90UG9wb3Zlcikge1xyXG4gICAgICBzd2l0Y2ggKHBsYWNlbWVudCkge1xyXG4gICAgICAgIGNhc2UgXCJib3R0b21cIjpcclxuICAgICAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKFwicHktWzAuNHJlbV1cIik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibGVmdFwiOlxyXG4gICAgICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoXCJweC1bMC40cmVtXVwiKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJyaWdodFwiOlxyXG4gICAgICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoXCJweC1bMC40cmVtXVwiKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoXCJweS1bMC40cmVtXVwiKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY3VzdG9tQ2xhc3MgPSB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3MpO1xyXG4gICAgaWYgKGN1c3RvbUNsYXNzKSB7XHJcbiAgICAgIHRpcC5jbGFzc0xpc3QuYWRkKC4uLmN1c3RvbUNsYXNzLnNwbGl0KFwiIFwiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxyXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcclxuICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXHJcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcclxuICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICBbXS5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgIEV2ZW50SGFuZGxlci5vbihlbGVtZW50LCBcIm1vdXNlb3ZlclwiLCBub29wKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHByZXZIb3ZlclN0YXRlID0gdGhpcy5faG92ZXJTdGF0ZTtcclxuXHJcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKTtcclxuXHJcbiAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfT1VUKSB7XHJcbiAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhcInRyYW5zaXRpb24tb3BhY2l0eVwiKTtcclxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIHRoaXMudGlwLCBpc0FuaW1hdGVkKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX3BvcHBlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XHJcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2hvdmVyU3RhdGUgIT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcclxuICAgICAgICB0aXAucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcclxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpO1xyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XHJcblxyXG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREVcclxuICAgICk7XHJcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRpcC5jbGFzc0xpc3QuYWRkKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgdGlwLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGFjaXR5LTEwMFwiKTtcclxuXHJcbiAgICAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxyXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcclxuICAgIGlmIChcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xyXG4gICAgICBbXVxyXG4gICAgICAgIC5jb25jYXQoLi4uZG9jdW1lbnQuYm9keS5jaGlsZHJlbilcclxuICAgICAgICAuZm9yRWFjaCgoZWxlbWVudCkgPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBcIm1vdXNlb3ZlclwiLCBub29wKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0NMSUNLXSA9IGZhbHNlO1xyXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0ZPQ1VTXSA9IGZhbHNlO1xyXG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0hPVkVSXSA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoXCJvcGFjaXR5LTBcIik7XHJcbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgaXNBbmltYXRlZCk7XHJcbiAgICB0aGlzLl9ob3ZlclN0YXRlID0gXCJcIjtcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcclxuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJvdGVjdGVkXHJcblxyXG4gIGlzV2l0aENvbnRlbnQoKSB7XHJcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGlwRWxlbWVudCgpIHtcclxuICAgIGlmICh0aGlzLnRpcCkge1xyXG4gICAgICByZXR1cm4gdGhpcy50aXA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2NvbmZpZy50ZW1wbGF0ZTtcclxuXHJcbiAgICBjb25zdCB0aXAgPSBlbGVtZW50LmNoaWxkcmVuWzBdO1xyXG4gICAgdGhpcy5zZXRDb250ZW50KHRpcCk7XHJcbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0ZBREUsIENMQVNTX05BTUVfU0hPVyk7XHJcblxyXG4gICAgdGhpcy50aXAgPSB0aXA7XHJcbiAgICByZXR1cm4gdGhpcy50aXA7XHJcbiAgfVxyXG5cclxuICBzZXRDb250ZW50KHRpcCkge1xyXG4gICAgdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHRpcCwgdGhpcy5nZXRUaXRsZSgpLCBTRUxFQ1RPUl9UT09MVElQX0lOTkVSKTtcclxuICB9XHJcblxyXG4gIF9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGVtcGxhdGUsIGNvbnRlbnQsIHNlbGVjdG9yKSB7XHJcbiAgICBjb25zdCB0ZW1wbGF0ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yLCB0ZW1wbGF0ZSk7XHJcblxyXG4gICAgaWYgKCFjb250ZW50ICYmIHRlbXBsYXRlRWxlbWVudCkge1xyXG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXHJcbiAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KHRlbXBsYXRlRWxlbWVudCwgY29udGVudCk7XHJcbiAgfVxyXG5cclxuICBzZXRFbGVtZW50Q29udGVudChlbGVtZW50LCBjb250ZW50KSB7XHJcbiAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzRWxlbWVudChjb250ZW50KSkge1xyXG4gICAgICBjb250ZW50ID0gZ2V0RWxlbWVudChjb250ZW50KTtcclxuXHJcbiAgICAgIC8vIGNvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxyXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmh0bWwpIHtcclxuICAgICAgICBpZiAoY29udGVudC5wYXJlbnROb2RlICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICBlbGVtZW50LmFwcGVuZChjb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGNvbnRlbnQudGV4dENvbnRlbnQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5fY29uZmlnLmh0bWwpIHtcclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSkge1xyXG4gICAgICAgIGNvbnRlbnQgPSBzYW5pdGl6ZUh0bWwoXHJcbiAgICAgICAgICBjb250ZW50LFxyXG4gICAgICAgICAgdGhpcy5fY29uZmlnLmFsbG93TGlzdCxcclxuICAgICAgICAgIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRUaXRsZSgpIHtcclxuICAgIGNvbnN0IHRpdGxlID1cclxuICAgICAgdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR3ZS1vcmlnaW5hbC10aXRsZVwiKSB8fFxyXG4gICAgICB0aGlzLl9jb25maWcudGl0bGU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRpdGxlKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xyXG4gICAgaWYgKGF0dGFjaG1lbnQgPT09IFwicmlnaHRcIikge1xyXG4gICAgICByZXR1cm4gXCJlbmRcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYXR0YWNobWVudCA9PT0gXCJsZWZ0XCIpIHtcclxuICAgICAgcmV0dXJuIFwic3RhcnRcIjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXR0YWNobWVudDtcclxuICB9XHJcblxyXG4gIC8vIFByaXZhdGVcclxuXHJcbiAgX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCwgY29udGV4dCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgY29udGV4dCB8fFxyXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLmdldE9yQ3JlYXRlSW5zdGFuY2UoXHJcbiAgICAgICAgZXZlbnQuZGVsZWdhdGVUYXJnZXQsXHJcbiAgICAgICAgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgX2dldE9mZnNldCgpIHtcclxuICAgIGNvbnN0IHsgb2Zmc2V0IH0gPSB0aGlzLl9jb25maWc7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcmV0dXJuIG9mZnNldC5zcGxpdChcIixcIikubWFwKCh2YWwpID0+IE51bWJlci5wYXJzZUludCh2YWwsIDEwKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICByZXR1cm4gKHBvcHBlckRhdGEpID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2Zmc2V0O1xyXG4gIH1cclxuXHJcbiAgX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbnRlbnQpIHtcclxuICAgIHJldHVybiB0eXBlb2YgY29udGVudCA9PT0gXCJmdW5jdGlvblwiXHJcbiAgICAgID8gY29udGVudC5jYWxsKHRoaXMuX2VsZW1lbnQpXHJcbiAgICAgIDogY29udGVudDtcclxuICB9XHJcblxyXG4gIF9nZXRQb3BwZXJDb25maWcoYXR0YWNobWVudCkge1xyXG4gICAgY29uc3QgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xyXG4gICAgICBwbGFjZW1lbnQ6IGF0dGFjaG1lbnQsXHJcbiAgICAgIG1vZGlmaWVyczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwiZmxpcFwiLFxyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHRoaXMuX2NvbmZpZy5mYWxsYmFja1BsYWNlbWVudHMsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogXCJvZmZzZXRcIixcclxuICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBuYW1lOiBcInByZXZlbnRPdmVyZmxvd1wiLFxyXG4gICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICBib3VuZGFyeTogdGhpcy5fY29uZmlnLmJvdW5kYXJ5LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwiYXJyb3dcIixcclxuICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgZWxlbWVudDogYC4ke3RoaXMuY29uc3RydWN0b3IuTkFNRX0tYXJyb3dgLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6IFwib25DaGFuZ2VcIixcclxuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICBwaGFzZTogXCJhZnRlcldyaXRlXCIsXHJcbiAgICAgICAgICBmbjogKGRhdGEpID0+IHRoaXMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKSxcclxuICAgICAgICB9LFxyXG4gICAgICBdLFxyXG4gICAgICBvbkZpcnN0VXBkYXRlOiAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLm9wdGlvbnMucGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxyXG4gICAgICAuLi4odHlwZW9mIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcgPT09IFwiZnVuY3Rpb25cIlxyXG4gICAgICAgID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhkZWZhdWx0QnNQb3BwZXJDb25maWcpXHJcbiAgICAgICAgOiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBfYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcclxuICAgIHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoXHJcbiAgICAgIGAke3RoaXMuX2dldEJhc2ljQ2xhc3NQcmVmaXgoKX0tJHt0aGlzLnVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCl9YFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xyXG4gICAgcmV0dXJuIEF0dGFjaG1lbnRNYXBbcGxhY2VtZW50LnRvVXBwZXJDYXNlKCldO1xyXG4gIH1cclxuXHJcbiAgX3NldExpc3RlbmVycygpIHtcclxuICAgIGNvbnN0IHRyaWdnZXJzID0gdGhpcy5fY29uZmlnLnRyaWdnZXIuc3BsaXQoXCIgXCIpO1xyXG5cclxuICAgIHRyaWdnZXJzLmZvckVhY2goKHRyaWdnZXIpID0+IHtcclxuICAgICAgaWYgKHRyaWdnZXIgPT09IFwiY2xpY2tcIikge1xyXG4gICAgICAgIEV2ZW50SGFuZGxlci5vbihcclxuICAgICAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLFxyXG4gICAgICAgICAgdGhpcy5fY29uZmlnLnNlbGVjdG9yLFxyXG4gICAgICAgICAgKGV2ZW50KSA9PiB0aGlzLnRvZ2dsZShldmVudClcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XHJcbiAgICAgICAgY29uc3QgZXZlbnRJbiA9XHJcbiAgICAgICAgICB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSXHJcbiAgICAgICAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSXHJcbiAgICAgICAgICAgIDogdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50T3V0ID1cclxuICAgICAgICAgIHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVJcclxuICAgICAgICAgICAgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkVcclxuICAgICAgICAgICAgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1xyXG5cclxuICAgICAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICAgICAgZXZlbnRJbixcclxuICAgICAgICAgIHRoaXMuX2NvbmZpZy5zZWxlY3RvcixcclxuICAgICAgICAgIChldmVudCkgPT4gdGhpcy5fZW50ZXIoZXZlbnQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICAgICAgZXZlbnRPdXQsXHJcbiAgICAgICAgICB0aGlzLl9jb25maWcuc2VsZWN0b3IsXHJcbiAgICAgICAgICAoZXZlbnQpID0+IHRoaXMuX2xlYXZlKGV2ZW50KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgICAgdGhpcy5oaWRlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfTU9EQUwpLFxyXG4gICAgICBFVkVOVF9NT0RBTF9ISURFLFxyXG4gICAgICB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyXHJcbiAgICApO1xyXG5cclxuICAgIGlmICh0aGlzLl9jb25maWcuc2VsZWN0b3IpIHtcclxuICAgICAgdGhpcy5fY29uZmlnID0ge1xyXG4gICAgICAgIC4uLnRoaXMuX2NvbmZpZyxcclxuICAgICAgICB0cmlnZ2VyOiBcIm1hbnVhbFwiLFxyXG4gICAgICAgIHNlbGVjdG9yOiBcIlwiLFxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fZml4VGl0bGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9maXhUaXRsZSgpIHtcclxuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKTtcclxuICAgIGNvbnN0IG9yaWdpbmFsVGl0bGVUeXBlID0gdHlwZW9mIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKFxyXG4gICAgICBcImRhdGEtdHdlLW9yaWdpbmFsLXRpdGxlXCJcclxuICAgICk7XHJcblxyXG4gICAgaWYgKHRpdGxlIHx8IG9yaWdpbmFsVGl0bGVUeXBlICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS10d2Utb3JpZ2luYWwtdGl0bGVcIiwgdGl0bGUgfHwgXCJcIik7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aXRsZSAmJlxyXG4gICAgICAgICF0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIikgJiZcclxuICAgICAgICAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudFxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGl0bGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIFwiXCIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XHJcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KTtcclxuXHJcbiAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcclxuICAgICAgICBldmVudC50eXBlID09PSBcImZvY3VzaW5cIiA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXHJcbiAgICAgIF0gPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgY29udGV4dC5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVykgfHxcclxuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPV1xyXG4gICAgKSB7XHJcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xyXG5cclxuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xyXG5cclxuICAgIGlmICghY29udGV4dC5fY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0Ll9jb25maWcuZGVsYXkuc2hvdykge1xyXG4gICAgICBjb250ZXh0LnNob3coKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcclxuICAgICAgICBjb250ZXh0LnNob3coKTtcclxuICAgICAgfVxyXG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LnNob3cpO1xyXG4gIH1cclxuXHJcbiAgX2xlYXZlKGV2ZW50LCBjb250ZXh0KSB7XHJcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KTtcclxuXHJcbiAgICBpZiAoZXZlbnQpIHtcclxuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltcclxuICAgICAgICBldmVudC50eXBlID09PSBcImZvY3Vzb3V0XCIgPyBUUklHR0VSX0ZPQ1VTIDogVFJJR0dFUl9IT1ZFUlxyXG4gICAgICBdID0gY29udGV4dC5fZWxlbWVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XHJcblxyXG4gICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX09VVDtcclxuXHJcbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpIHtcclxuICAgICAgY29udGV4dC5oaWRlKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcclxuICAgICAgICBjb250ZXh0LmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpO1xyXG4gIH1cclxuXHJcbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XHJcbiAgICBmb3IgKGNvbnN0IHRyaWdnZXIgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcikge1xyXG4gICAgICBpZiAodGhpcy5fYWN0aXZlVHJpZ2dlclt0cmlnZ2VyXSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbnN0IGRhdGFBdHRyaWJ1dGVzID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoZGF0YUF0dHJpYnV0ZXMpLmZvckVhY2goKGRhdGFBdHRyKSA9PiB7XHJcbiAgICAgIGlmIChESVNBTExPV0VEX0FUVFJJQlVURVMuaGFzKGRhdGFBdHRyKSkge1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhQXR0cmlidXRlc1tkYXRhQXR0cl07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4udGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LFxyXG4gICAgICAuLi5kYXRhQXR0cmlidXRlcyxcclxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgJiYgY29uZmlnID8gY29uZmlnIDoge30pLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25maWcuY29udGFpbmVyID1cclxuICAgICAgY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UgPyBkb2N1bWVudC5ib2R5IDogZ2V0RWxlbWVudChjb25maWcuY29udGFpbmVyKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICBjb25maWcuZGVsYXkgPSB7XHJcbiAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxyXG4gICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcclxuXHJcbiAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XHJcbiAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChcclxuICAgICAgICBjb25maWcudGVtcGxhdGUsXHJcbiAgICAgICAgY29uZmlnLmFsbG93TGlzdCxcclxuICAgICAgICBjb25maWcuc2FuaXRpemVGblxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XHJcbiAgICBjb25zdCBjb25maWcgPSB7fTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9jb25maWcpIHtcclxuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLl9jb25maWdba2V5XSkge1xyXG4gICAgICAgIGNvbmZpZ1trZXldID0gdGhpcy5fY29uZmlnW2tleV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSByZXBsYWNlZCB3aXRoOlxyXG4gICAgLy8gY29uc3Qga2V5c1dpdGhEaWZmZXJlbnRWYWx1ZXMgPSBPYmplY3QuZW50cmllcyh0aGlzLl9jb25maWcpLmZpbHRlcihlbnRyeSA9PiB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRbZW50cnlbMF1dICE9PSB0aGlzLl9jb25maWdbZW50cnlbMF1dKVxyXG4gICAgLy8gYE9iamVjdC5mcm9tRW50cmllcyhrZXlzV2l0aERpZmZlcmVudFZhbHVlcylgXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgX2NsZWFuVGlwQ2xhc3MoKSB7XHJcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcclxuICAgIGNvbnN0IGJhc2ljQ2xhc3NQcmVmaXhSZWdleCA9IG5ldyBSZWdFeHAoXHJcbiAgICAgIGAoXnxcXFxccykke3RoaXMuX2dldEJhc2ljQ2xhc3NQcmVmaXgoKX1cXFxcUytgLFxyXG4gICAgICBcImdcIlxyXG4gICAgKTtcclxuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpLm1hdGNoKGJhc2ljQ2xhc3NQcmVmaXhSZWdleCk7XHJcbiAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xyXG4gICAgICB0YWJDbGFzc1xyXG4gICAgICAgIC5tYXAoKHRva2VuKSA9PiB0b2tlbi50cmltKCkpXHJcbiAgICAgICAgLmZvckVhY2goKHRDbGFzcykgPT4gdGlwLmNsYXNzTGlzdC5yZW1vdmUodENsYXNzKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZ2V0QmFzaWNDbGFzc1ByZWZpeCgpIHtcclxuICAgIHJldHVybiBDTEFTU19QUkVGSVg7XHJcbiAgfVxyXG5cclxuICBfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHBvcHBlckRhdGEpIHtcclxuICAgIGNvbnN0IHsgc3RhdGUgfSA9IHBvcHBlckRhdGE7XHJcblxyXG4gICAgaWYgKCFzdGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50aXAgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXI7XHJcbiAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XHJcbiAgICB0aGlzLl9hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChzdGF0ZS5wbGFjZW1lbnQpKTtcclxuICB9XHJcblxyXG4gIF9kaXNwb3NlUG9wcGVyKCkge1xyXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xyXG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xyXG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljXHJcblxyXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IFRvb2x0aXAuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XHJcbiIsImltcG9ydCBUb29sdGlwIGZyb20gXCIuL3Rvb2x0aXBcIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5Db25zdGFudHNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jb25zdCBOQU1FID0gXCJwb3BvdmVyXCI7XHJcbmNvbnN0IERBVEFfS0VZID0gXCJ0d2UucG9wb3ZlclwiO1xyXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcclxuY29uc3QgQ0xBU1NfUFJFRklYID0gXCJ0ZS1wb3BvdmVyXCI7XHJcblxyXG5jb25zdCBEZWZhdWx0ID0ge1xyXG4gIC4uLlRvb2x0aXAuRGVmYXVsdCxcclxuICBwbGFjZW1lbnQ6IFwicmlnaHRcIixcclxuICBvZmZzZXQ6IFswLCA4XSxcclxuICB0cmlnZ2VyOiBcImNsaWNrXCIsXHJcbiAgY29udGVudDogXCJcIixcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cIm9wYWNpdHktMCB0cmFuc2l0aW9uLW9wYWNpdHkgZHVyYXRpb24tMTUwIGVhc2UtaW4tb3V0IGFic29sdXRlIHRvcC0wIGxlZnQtMCB6LVsxMDcwXSBibG9jayBtYXgtdy1bMjY3cHhdIGJyZWFrLXdvcmRzIGJnLXdoaXRlIGJnLWNsaXAtcGFkZGluZyBib3JkZXIgYm9yZGVyLW5ldXRyYWwtMTAwIHJvdW5kZWQtbGcgc2hhZG93LTIgdGV4dC1zbSBub3QtaXRhbGljIGZvbnQtbm9ybWFsIHRleHQtbGVmdCBuby11bmRlcmxpbmUgdW5kZXJsaW5lLW9mZnNldC1hdXRvIG5vcm1hbC1jYXNlIGxlYWRpbmctNiB0cmFja2luZy1ub3JtYWwgYnJlYWstbm9ybWFsIHdoaXRlc3BhY2Utbm9ybWFsIGRhcms6Ym9yZGVyLXdoaXRlLzEwIGRhcms6Ymctc3VyZmFjZS1kYXJrIGRhcms6dGV4dC13aGl0ZSBkYXRhLVtwb3BwZXItcmVmZXJlbmNlLWhpZGRlbl06aGlkZGVuXCIgcm9sZT1cInRvb2x0aXBcIj5cclxuICAgICAgPGgzIGRhdGEtdHdlLXBvcG92ZXItaGVhZGVyLXJlZiBjbGFzcz1cInB5LTIgcHgtNCBtYi0wIGJvcmRlci1iLTIgYm9yZGVyLW5ldXRyYWwtMTAwIHJvdW5kZWQtdC1sZyBmb250LW1lZGl1bSBlbXB0eTpoaWRkZW4gZGFyazpib3JkZXItd2hpdGUvMTBcIj48L2gzPlxyXG4gICAgICA8ZGl2IGRhdGEtdHdlLXBvcG92ZXItYm9keS1yZWYgY2xhc3M9XCJwLTQgdGV4dC1zdXJmYWNlIGRhcms6dGV4dC13aGl0ZVwiPjwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICBgLFxyXG59O1xyXG5cclxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XHJcbiAgLi4uVG9vbHRpcC5EZWZhdWx0VHlwZSxcclxuICBjb250ZW50OiBcIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIixcclxufTtcclxuXHJcbmNvbnN0IEV2ZW50ID0ge1xyXG4gIEhJREU6IGBoaWRlJHtFVkVOVF9LRVl9YCxcclxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWX1gLFxyXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVl9YCxcclxuICBTSE9XTjogYHNob3duJHtFVkVOVF9LRVl9YCxcclxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVl9YCxcclxuICBDTElDSzogYGNsaWNrJHtFVkVOVF9LRVl9YCxcclxuICBGT0NVU0lOOiBgZm9jdXNpbiR7RVZFTlRfS0VZfWAsXHJcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZfWAsXHJcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWX1gLFxyXG4gIE1PVVNFTEVBVkU6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVl9YCxcclxufTtcclxuXHJcbmNvbnN0IFNFTEVDVE9SX1RJVExFID0gXCJbZGF0YS10d2UtcG9wb3Zlci1oZWFkZXItcmVmXVwiO1xyXG5jb25zdCBTRUxFQ1RPUl9DT05URU5UID0gXCJbZGF0YS10d2UtcG9wb3Zlci1ib2R5LXJlZl1cIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5DbGFzcyBEZWZpbml0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFRvb2x0aXAge1xyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xyXG4gICAgcmV0dXJuIERlZmF1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XHJcbiAgICByZXR1cm4gTkFNRTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgRXZlbnQoKSB7XHJcbiAgICByZXR1cm4gRXZlbnQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xyXG4gICAgcmV0dXJuIERlZmF1bHRUeXBlO1xyXG4gIH1cclxuXHJcbiAgLy8gT3ZlcnJpZGVzXHJcblxyXG4gIGlzV2l0aENvbnRlbnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcclxuICB9XHJcblxyXG4gIHNldENvbnRlbnQodGlwKSB7XHJcbiAgICB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGlwLCB0aGlzLmdldFRpdGxlKCksIFNFTEVDVE9SX1RJVExFKTtcclxuICAgIHRoaXMuX3Nhbml0aXplQW5kU2V0Q29udGVudCh0aXAsIHRoaXMuX2dldENvbnRlbnQoKSwgU0VMRUNUT1JfQ09OVEVOVCk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlXHJcblxyXG4gIF9nZXRDb250ZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRoaXMuX2NvbmZpZy5jb250ZW50KTtcclxuICB9XHJcblxyXG4gIF9nZXRCYXNpY0NsYXNzUHJlZml4KCkge1xyXG4gICAgcmV0dXJuIENMQVNTX1BSRUZJWDtcclxuICB9XHJcblxyXG4gIC8vIFN0YXRpY1xyXG5cclxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBQb3BvdmVyLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRhW2NvbmZpZ10oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyO1xyXG4iLCJpbXBvcnQge1xyXG4gIGdldEVsZW1lbnQsXHJcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcclxuICB0eXBlQ2hlY2tDb25maWcsXHJcbn0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXhcIjtcclxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vLi4vZG9tL2V2ZW50LWhhbmRsZXJcIjtcclxuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gXCIuLi8uLi9kb20vbWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IE1EQk1hbmlwdWxhdG9yIGZyb20gXCIuLi8uLi9kb20vbWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi8uLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9iYXNlLWNvbXBvbmVudFwiO1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNvbnN0YW50c1xyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNvbnN0IE5BTUUgPSBcInNjcm9sbHNweVwiO1xyXG5jb25zdCBEQVRBX0tFWSA9IFwidHdlLnNjcm9sbHNweVwiO1xyXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcclxuXHJcbmNvbnN0IERlZmF1bHQgPSB7XHJcbiAgb2Zmc2V0OiAxMCxcclxuICBtZXRob2Q6IFwiYXV0b1wiLFxyXG4gIHRhcmdldDogXCJcIixcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRUeXBlID0ge1xyXG4gIG9mZnNldDogXCJudW1iZXJcIixcclxuICBtZXRob2Q6IFwic3RyaW5nXCIsXHJcbiAgdGFyZ2V0OiBcIihzdHJpbmd8ZWxlbWVudClcIixcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRDbGFzc2VzID0ge1xyXG4gIGFjdGl2ZTpcclxuICAgIFwiIXRleHQtcHJpbWFyeSBmb250LXNlbWlib2xkIGJvcmRlci1zLVswLjEyNXJlbV0gYm9yZGVyLXNvbGlkIGJvcmRlci1wcmltYXJ5XCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3Nlc1R5cGUgPSB7XHJcbiAgYWN0aXZlOiBcInN0cmluZ1wiLFxyXG59O1xyXG5cclxuY29uc3QgRVZFTlRfQUNUSVZBVEUgPSBgYWN0aXZhdGUke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TQ1JPTEwgPSBgc2Nyb2xsJHtFVkVOVF9LRVl9YDtcclxuXHJcbmNvbnN0IExJTktfQUNUSVZFID0gXCJkYXRhLXR3ZS1uYXYtbGluay1hY3RpdmVcIjtcclxuY29uc3QgTElOS19DT0xMQVBTSUJMRSA9IFwiZGF0YS10d2UtY29sbGFwc2libGUtc2Nyb2xsc3B5LXJlZlwiO1xyXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTl9JVEVNID0gXCJbZGF0YS10d2UtZHJvcGRvd24taXRlbS1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX05BVl9MSVNUX0dST1VQID0gXCJbZGF0YS10d2UtbmF2LWxpc3QtcmVmXVwiO1xyXG5jb25zdCBTRUxFQ1RPUl9OQVZfTElOS1MgPSBcIltkYXRhLXR3ZS1uYXYtbGluay1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX05BVl9JVEVNUyA9IFwiW2RhdGEtdHdlLW5hdi1pdGVtLXJlZl1cIjtcclxuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9IFwiW2RhdGEtdHdlLWxpc3QtZ3JvdXAtaXRlbS1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0xJTktfSVRFTVMgPSBgJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9LCAke1NFTEVDVE9SX0RST1BET1dOX0lURU19YDtcclxuY29uc3QgU0VMRUNUT1JfRFJPUERPV04gPSBcIltkYXRhLXR3ZS1kcm9wZG93bi1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSA9IFwiW2RhdGEtdHdlLWRyb3Bkb3duLXRvZ2dsZS1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0NPTExBUFNJQkxFX1NDUk9MTFNQWSA9IGBbJHtMSU5LX0NPTExBUFNJQkxFfV1gO1xyXG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkUgPSBgWyR7TElOS19BQ1RJVkV9XWA7XHJcbmNvbnN0IFNFTEVDVE9SX0xJU1QgPSBcInVsXCI7XHJcblxyXG5jb25zdCBNRVRIT0RfT0ZGU0VUID0gXCJtYXhPZmZzZXRcIjtcclxuY29uc3QgTUVUSE9EX1BPU0lUSU9OID0gXCJwb3NpdGlvblwiO1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNsYXNzIERlZmluaXRpb25cclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jbGFzcyBTY3JvbGxTcHkgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcsIGNsYXNzZXMpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQudGFnTmFtZSA9PT0gXCJCT0RZXCIgPyB3aW5kb3cgOiB0aGlzLl9lbGVtZW50O1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XHJcbiAgICB0aGlzLl9jbGFzc2VzID0gdGhpcy5fZ2V0Q2xhc3NlcyhjbGFzc2VzKTtcclxuICAgIHRoaXMuX29mZnNldHMgPSBbXTtcclxuICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcclxuICAgIHRoaXMuX2NvbGxhcHNpYmxlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XHJcbiAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSAwO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9TQ1JPTEwsICgpID0+IHRoaXMuX3Byb2Nlc3MoKSk7XHJcblxyXG4gICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICB0aGlzLl9wcm9jZXNzKCk7XHJcblxyXG4gICAgdGhpcy5fYmluZEFjdGl2YXRlRXZlbnQoKTtcclxuICAgIHRoaXMuX2dldENvbGxhcHNpYmxlcygpO1xyXG5cclxuICAgIGlmICh0aGlzLl9jb2xsYXBzaWJsZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9zaG93U3Vic2VjdGlvbigpO1xyXG4gICAgdGhpcy5faGlkZVN1YnNlY3Rpb24oKTtcclxuICB9XHJcblxyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xyXG4gICAgcmV0dXJuIERlZmF1bHQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XHJcbiAgICByZXR1cm4gTkFNRTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpY1xyXG5cclxuICByZWZyZXNoKCkge1xyXG4gICAgY29uc3QgYXV0b01ldGhvZCA9XHJcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93XHJcbiAgICAgICAgPyBNRVRIT0RfT0ZGU0VUXHJcbiAgICAgICAgOiBNRVRIT0RfUE9TSVRJT047XHJcblxyXG4gICAgY29uc3Qgb2Zmc2V0TWV0aG9kID1cclxuICAgICAgdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gXCJhdXRvXCIgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcclxuXHJcbiAgICBjb25zdCBvZmZzZXRCYXNlID1cclxuICAgICAgb2Zmc2V0TWV0aG9kID09PSBNRVRIT0RfUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XHJcblxyXG4gICAgdGhpcy5fb2Zmc2V0cyA9IFtdO1xyXG4gICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xyXG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoXHJcbiAgICAgIFNFTEVDVE9SX0xJTktfSVRFTVMsXHJcbiAgICAgIHRoaXMuX2NvbmZpZy50YXJnZXRcclxuICAgICk7XHJcblxyXG4gICAgdGFyZ2V0c1xyXG4gICAgICAubWFwKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNlbGVjdG9yXHJcbiAgICAgICAgICA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGFyZ2V0U2VsZWN0b3IpXHJcbiAgICAgICAgICA6IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgIE1hbmlwdWxhdG9yW29mZnNldE1ldGhvZF0odGFyZ2V0KS50b3AgKyBvZmZzZXRCYXNlLFxyXG4gICAgICAgICAgICAgIHRhcmdldFNlbGVjdG9yLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0pXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBhWzBdIC0gYlswXSlcclxuICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICB0aGlzLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0tFWSk7XHJcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX3Njcm9sbEVsZW1lbnQsIEVWRU5UX0FDVElWQVRFKTtcclxuXHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlXHJcbiAgX2dldENvbmZpZyhjb25maWcpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXHJcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KSxcclxuICAgIH07XHJcblxyXG4gICAgY29uZmlnLnRhcmdldCA9IGdldEVsZW1lbnQoY29uZmlnLnRhcmdldCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcclxuXHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgX2dldENsYXNzZXMoY2xhc3Nlcykge1xyXG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNREJNYW5pcHVsYXRvci5nZXREYXRhQ2xhc3NBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgIGNsYXNzZXMgPSB7XHJcbiAgICAgIC4uLkRlZmF1bHRDbGFzc2VzLFxyXG4gICAgICAuLi5kYXRhQXR0cmlidXRlcyxcclxuICAgICAgLi4uY2xhc3NlcyxcclxuICAgIH07XHJcblxyXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNsYXNzZXMsIERlZmF1bHRDbGFzc2VzVHlwZSk7XHJcblxyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICBfZ2V0U2Nyb2xsVG9wKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvd1xyXG4gICAgICA/IHRoaXMuX3Njcm9sbEVsZW1lbnQucGFnZVlPZmZzZXRcclxuICAgICAgOiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcDtcclxuICB9XHJcblxyXG4gIF9nZXRTY3JvbGxIZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fFxyXG4gICAgICBNYXRoLm1heChcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxcclxuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfZ2V0T2Zmc2V0SGVpZ2h0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHdpbmRvd1xyXG4gICAgICA/IHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgX3Byb2Nlc3MoKSB7XHJcbiAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XHJcbiAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcclxuICAgIGNvbnN0IG1heFNjcm9sbCA9XHJcbiAgICAgIHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcclxuXHJcbiAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcclxuICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XHJcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICYmXHJcbiAgICAgIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbMF0gJiZcclxuICAgICAgdGhpcy5fb2Zmc2V0c1swXSA+IDBcclxuICAgICkge1xyXG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xyXG4gICAgICB0aGlzLl9jbGVhcigpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX29mZnNldHMubGVuZ3RoOyBpLS07ICkge1xyXG4gICAgICBjb25zdCBpc0FjdGl2ZVRhcmdldCA9XHJcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmXHJcbiAgICAgICAgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiZcclxuICAgICAgICAodHlwZW9mIHRoaXMuX29mZnNldHNbaSArIDFdID09PSBcInVuZGVmaW5lZFwiIHx8XHJcbiAgICAgICAgICBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzW2kgKyAxXSk7XHJcblxyXG4gICAgICBpZiAoaXNBY3RpdmVUYXJnZXQpIHtcclxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl90YXJnZXRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FjdGl2YXRlKHRhcmdldCkge1xyXG4gICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0O1xyXG5cclxuICAgIHRoaXMuX2NsZWFyKCk7XHJcblxyXG4gICAgY29uc3QgcXVlcmllcyA9IFNFTEVDVE9SX0xJTktfSVRFTVMuc3BsaXQoXCIsXCIpLm1hcChcclxuICAgICAgKHNlbGVjdG9yKSA9PlxyXG4gICAgICAgIGAke3NlbGVjdG9yfVtkYXRhLXR3ZS10YXJnZXQ9XCIke3RhcmdldH1cIl0sJHtzZWxlY3Rvcn1baHJlZj1cIiR7dGFyZ2V0fVwiXWBcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbGluayA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUocXVlcmllcy5qb2luKFwiLFwiKSwgdGhpcy5fY29uZmlnLnRhcmdldCk7XHJcblxyXG4gICAgbGluay5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuX2NsYXNzZXMuYWN0aXZlLnNwbGl0KFwiIFwiKSk7XHJcbiAgICBsaW5rLnNldEF0dHJpYnV0ZShMSU5LX0FDVElWRSwgXCJcIik7XHJcblxyXG4gICAgaWYgKGxpbmsuZ2V0QXR0cmlidXRlKFNFTEVDVE9SX0RST1BET1dOX0lURU0pKSB7XHJcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXHJcbiAgICAgICAgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLFxyXG4gICAgICAgIGxpbmsuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTilcclxuICAgICAgKS5jbGFzc0xpc3QuYWRkKC4uLnRoaXMuX2NsYXNzZXMuYWN0aXZlLnNwbGl0KFwiIFwiKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBTZWxlY3RvckVuZ2luZS5wYXJlbnRzKGxpbmssIFNFTEVDVE9SX05BVl9MSVNUX0dST1VQKS5mb3JFYWNoKFxyXG4gICAgICAgIChsaXN0R3JvdXApID0+IHtcclxuICAgICAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcclxuICAgICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxyXG4gICAgICAgICAgU2VsZWN0b3JFbmdpbmUucHJldihcclxuICAgICAgICAgICAgbGlzdEdyb3VwLFxyXG4gICAgICAgICAgICBgJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9YFxyXG4gICAgICAgICAgKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCguLi50aGlzLl9jbGFzc2VzLmFjdGl2ZS5zcGxpdChcIiBcIikpO1xyXG4gICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZShMSU5LX0FDVElWRSwgXCJcIik7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlIHdoZW4gLm5hdi1saW5rIGlzIGluc2lkZSAubmF2LWl0ZW1cclxuICAgICAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBTRUxFQ1RPUl9OQVZfSVRFTVMpLmZvckVhY2goXHJcbiAgICAgICAgICAgIChuYXZJdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4obmF2SXRlbSwgU0VMRUNUT1JfTkFWX0xJTktTKS5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgKGl0ZW0pID0+IGl0ZW0uY2xhc3NMaXN0LmFkZCguLi50aGlzLl9jbGFzc2VzLmFjdGl2ZS5zcGxpdChcIiBcIikpXHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfQUNUSVZBVEUsIHtcclxuICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0LFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfY2xlYXIoKSB7XHJcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0xJTktfSVRFTVMsIHRoaXMuX2NvbmZpZy50YXJnZXQpXHJcbiAgICAgIC5maWx0ZXIoKG5vZGUpID0+XHJcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QuY29udGFpbnMoLi4udGhpcy5fY2xhc3Nlcy5hY3RpdmUuc3BsaXQoXCIgXCIpKVxyXG4gICAgICApXHJcbiAgICAgIC5mb3JFYWNoKChub2RlKSA9PiB7XHJcbiAgICAgICAgbm9kZS5jbGFzc0xpc3QucmVtb3ZlKC4uLnRoaXMuX2NsYXNzZXMuYWN0aXZlLnNwbGl0KFwiIFwiKSk7XHJcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoTElOS19BQ1RJVkUpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIF9oaWRlKHRhcmdldCkge1xyXG4gICAgY29uc3QgaXRlbXNUb0hpZGUgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFxyXG4gICAgICBTRUxFQ1RPUl9MSVNULFxyXG4gICAgICB0YXJnZXQucGFyZW50Tm9kZVxyXG4gICAgKTtcclxuICAgIGl0ZW1zVG9IaWRlLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcclxuICAgIGl0ZW1zVG9IaWRlLnN0eWxlLmhlaWdodCA9IGAkezB9cHhgO1xyXG4gIH1cclxuXHJcbiAgX3Nob3codGFyZ2V0LCBkZXN0aW5lZEhlaWdodCkge1xyXG4gICAgdGFyZ2V0LnN0eWxlLmhlaWdodCA9IGRlc3RpbmVkSGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgX2dldENvbGxhcHNpYmxlcygpIHtcclxuICAgIGNvbnN0IGNvbGxhcHNpYmxlRWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFxyXG4gICAgICBTRUxFQ1RPUl9DT0xMQVBTSUJMRV9TQ1JPTExTUFlcclxuICAgICk7XHJcblxyXG4gICAgaWYgKCFjb2xsYXBzaWJsZUVsZW1lbnRzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb2xsYXBzaWJsZUVsZW1lbnRzLmZvckVhY2goKGNvbGxhcHNpYmxlRWxlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0UGFyZW50ID0gY29sbGFwc2libGVFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgIGNvbnN0IGxpc3QgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0xJU1QsIGxpc3RQYXJlbnQpO1xyXG4gICAgICBjb25zdCBsaXN0SGVpZ2h0ID0gbGlzdC5vZmZzZXRIZWlnaHQgfHwgbGlzdC5zY3JvbGxIZWlnaHQ7XHJcblxyXG4gICAgICB0aGlzLl9jb2xsYXBzaWJsZXMucHVzaCh7XHJcbiAgICAgICAgZWxlbWVudDogbGlzdCxcclxuICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb2xsYXBzaWJsZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxcclxuICAgICAgICBoZWlnaHQ6IGAke2xpc3RIZWlnaHR9cHhgLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dTdWJzZWN0aW9uKCkge1xyXG4gICAgY29uc3QgYWN0aXZlRWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRSk7XHJcbiAgICBjb25zdCBhY3RpdmVzID0gYWN0aXZlRWxlbWVudHMuZmlsdGVyKChhY3RpdmUpID0+IHtcclxuICAgICAgcmV0dXJuIGFjdGl2ZS5oYXNBdHRyaWJ1dGUoTElOS19DT0xMQVBTSUJMRSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBhY3RpdmVzLmZvckVhY2goKGFjdGl2ZSkgPT4ge1xyXG4gICAgICBjb25zdCBsaXN0ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9MSVNULCBhY3RpdmUucGFyZW50Tm9kZSk7XHJcbiAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2NvbGxhcHNpYmxlcy5maW5kKChjb2xsYXBzaWJsZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiAoY29sbGFwc2libGUucmVsYXRlZFRhcmdldCA9IGFjdGl2ZS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKTtcclxuICAgICAgfSkuaGVpZ2h0O1xyXG5cclxuICAgICAgdGhpcy5fc2hvdyhsaXN0LCBoZWlnaHQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaGlkZVN1YnNlY3Rpb24oKSB7XHJcbiAgICBjb25zdCB1bmFjdGl2ZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFxyXG4gICAgICBTRUxFQ1RPUl9DT0xMQVBTSUJMRV9TQ1JPTExTUFlcclxuICAgICkuZmlsdGVyKChjb2xsYXBzaWJsZSkgPT4ge1xyXG4gICAgICByZXR1cm4gY29sbGFwc2libGUuaGFzQXR0cmlidXRlKExJTktfQUNUSVZFKSA9PT0gZmFsc2U7XHJcbiAgICB9KTtcclxuICAgIHVuYWN0aXZlcy5mb3JFYWNoKCh1bmFjdGl2ZSkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlKHVuYWN0aXZlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2JpbmRBY3RpdmF0ZUV2ZW50KCkge1xyXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0FDVElWQVRFLCAoKSA9PiB7XHJcbiAgICAgIHRoaXMuX3Nob3dTdWJzZWN0aW9uKCk7XHJcbiAgICAgIHRoaXMuX2hpZGVTdWJzZWN0aW9uKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFN0YXRpY1xyXG5cclxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBTY3JvbGxTcHkuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZGF0YVtjb25maWddKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFNweTtcclxuIiwiaW1wb3J0IHtcclxuICBnZXRFbGVtZW50RnJvbVNlbGVjdG9yLFxyXG4gIHJlZmxvdyxcclxuICB0eXBlQ2hlY2tDb25maWcsXHJcbn0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXhcIjtcclxuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gXCIuLi8uLi9kb20vbWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vLi4vZG9tL2V2ZW50LWhhbmRsZXJcIjtcclxuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi8uLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCBCYXNlQ29tcG9uZW50IGZyb20gXCIuLi8uLi9iYXNlLWNvbXBvbmVudFwiO1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNvbnN0YW50c1xyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNvbnN0IE5BTUUgPSBcInRhYlwiO1xyXG5jb25zdCBEQVRBX0tFWSA9IFwidHdlLnRhYlwiO1xyXG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcclxuXHJcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XHJcblxyXG5jb25zdCBEQVRBX05BTUVfRFJPUERPV05fTUVOVSA9IFwiZGF0YS10d2UtZHJvcGRvd24tbWVudS1yZWZcIjtcclxuY29uc3QgVEFCX0FDVElWRSA9IFwiZGF0YS10d2UtdGFiLWFjdGl2ZVwiO1xyXG5jb25zdCBOQVZfQUNUSVZFID0gXCJkYXRhLXR3ZS1uYXYtYWN0aXZlXCI7XHJcblxyXG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTiA9IFwiW2RhdGEtdHdlLWRyb3Bkb3duLXJlZl1cIjtcclxuY29uc3QgU0VMRUNUT1JfTkFWID0gXCJbZGF0YS10d2UtbmF2LXJlZl1cIjtcclxuY29uc3QgU0VMRUNUT1JfVEFCX0FDVElWRSA9IGBbJHtUQUJfQUNUSVZFfV1gO1xyXG5jb25zdCBTRUxFQ1RPUl9OQVZfQUNUSVZFID0gYFske05BVl9BQ1RJVkV9XWA7XHJcbmNvbnN0IFNFTEVDVE9SX0FDVElWRV9VTCA9IFwiOnNjb3BlID4gbGkgPiAuYWN0aXZlXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSA9IFwiW2RhdGEtdHdlLWRyb3Bkb3duLXRvZ2dsZS1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCA9XHJcbiAgXCI6c2NvcGUgPiBbZGF0YS10d2UtZHJvcGRvd24tbWVudS1yZWZdIFtkYXRhLXR3ZS1kcm9wZG93bi1zaG93XVwiO1xyXG5cclxuY29uc3QgRGVmYXVsdENsYXNzZXMgPSB7XHJcbiAgc2hvdzogXCJvcGFjaXR5LTEwMFwiLFxyXG4gIGhpZGU6IFwib3BhY2l0eS0wXCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3Nlc1R5cGUgPSB7XHJcbiAgc2hvdzogXCJzdHJpbmdcIixcclxuICBoaWRlOiBcInN0cmluZ1wiLFxyXG59O1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNsYXNzIERlZmluaXRpb25cclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jbGFzcyBUYWIgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjbGFzc2VzKSB7XHJcbiAgICBzdXBlcihlbGVtZW50KTtcclxuICAgIHRoaXMuX2NsYXNzZXMgPSB0aGlzLl9nZXRDbGFzc2VzKGNsYXNzZXMpO1xyXG4gIH1cclxuICAvLyBHZXR0ZXJzXHJcblxyXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcclxuICAgIHJldHVybiBOQU1FO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljXHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSAmJlxyXG4gICAgICB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKE5BVl9BQ1RJVkUpID09PSBcIlwiXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBwcmV2aW91cztcclxuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcy5fZWxlbWVudCk7XHJcbiAgICBjb25zdCBsaXN0RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVYpO1xyXG4gICAgY29uc3QgYWN0aXZlTmF2RWxlbWVudCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXHJcbiAgICAgIFNFTEVDVE9SX05BVl9BQ1RJVkUsXHJcbiAgICAgIGxpc3RFbGVtZW50XHJcbiAgICApO1xyXG5cclxuICAgIGlmIChsaXN0RWxlbWVudCkge1xyXG4gICAgICBjb25zdCBpdGVtU2VsZWN0b3IgPVxyXG4gICAgICAgIGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSBcIlVMXCIgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09IFwiT0xcIlxyXG4gICAgICAgICAgPyBTRUxFQ1RPUl9BQ1RJVkVfVUxcclxuICAgICAgICAgIDogU0VMRUNUT1JfVEFCX0FDVElWRTtcclxuICAgICAgcHJldmlvdXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKGl0ZW1TZWxlY3RvciwgbGlzdEVsZW1lbnQpO1xyXG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzW3ByZXZpb3VzLmxlbmd0aCAtIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhpZGVFdmVudCA9IHByZXZpb3VzXHJcbiAgICAgID8gRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJREUsIHtcclxuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgICAgfSlcclxuICAgICAgOiBudWxsO1xyXG5cclxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1csIHtcclxuICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXMsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8XHJcbiAgICAgIChoaWRlRXZlbnQgIT09IG51bGwgJiYgaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2FjdGl2YXRlKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICBsaXN0RWxlbWVudCxcclxuICAgICAgbnVsbCxcclxuICAgICAgYWN0aXZlTmF2RWxlbWVudCxcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgKTtcclxuXHJcbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcclxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJRERFTiwge1xyXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIH0pO1xyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiwge1xyXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzLFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICB0aGlzLl9hY3RpdmF0ZShcclxuICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUsXHJcbiAgICAgICAgY29tcGxldGUsXHJcbiAgICAgICAgYWN0aXZlTmF2RWxlbWVudCxcclxuICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb21wbGV0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHJpdmF0ZVxyXG5cclxuICBfZ2V0Q2xhc3NlcyhjbGFzc2VzKSB7XHJcbiAgICBjb25zdCBkYXRhQXR0cmlidXRlcyA9IE1hbmlwdWxhdG9yLmdldERhdGFDbGFzc0F0dHJpYnV0ZXModGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgY2xhc3NlcyA9IHtcclxuICAgICAgLi4uRGVmYXVsdENsYXNzZXMsXHJcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxyXG4gICAgICAuLi5jbGFzc2VzLFxyXG4gICAgfTtcclxuXHJcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY2xhc3NlcywgRGVmYXVsdENsYXNzZXNUeXBlKTtcclxuXHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIF9hY3RpdmF0ZShlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrLCBhY3RpdmVOYXZFbGVtZW50LCBuYXZFbGVtZW50KSB7XHJcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9XHJcbiAgICAgIGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSBcIlVMXCIgfHwgY29udGFpbmVyLm5vZGVOYW1lID09PSBcIk9MXCIpXHJcbiAgICAgICAgPyBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRV9VTCwgY29udGFpbmVyKVxyXG4gICAgICAgIDogU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4oY29udGFpbmVyLCBTRUxFQ1RPUl9UQUJfQUNUSVZFKTtcclxuXHJcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcclxuICAgIGNvbnN0IGlzVHJhbnNpdGlvbmluZyA9XHJcbiAgICAgIGNhbGxiYWNrICYmIGFjdGl2ZSAmJiBhY3RpdmUuaGFzQXR0cmlidXRlKFRBQl9BQ1RJVkUpO1xyXG5cclxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT5cclxuICAgICAgdGhpcy5fdHJhbnNpdGlvbkNvbXBsZXRlKFxyXG4gICAgICAgIGVsZW1lbnQsXHJcbiAgICAgICAgYWN0aXZlLFxyXG4gICAgICAgIGNhbGxiYWNrLFxyXG4gICAgICAgIGFjdGl2ZU5hdkVsZW1lbnQsXHJcbiAgICAgICAgbmF2RWxlbWVudFxyXG4gICAgICApO1xyXG5cclxuICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XHJcbiAgICAgIE1hbmlwdWxhdG9yLnJlbW92ZUNsYXNzKGFjdGl2ZSwgdGhpcy5fY2xhc3Nlcy5zaG93KTtcclxuICAgICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3MoYWN0aXZlLCB0aGlzLl9jbGFzc2VzLmhpZGUpO1xyXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCBlbGVtZW50LCB0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2ssIGFjdGl2ZU5hdkVsZW1lbnQsIG5hdkVsZW1lbnQpIHtcclxuICAgIGlmIChhY3RpdmUgJiYgYWN0aXZlTmF2RWxlbWVudCkge1xyXG4gICAgICBhY3RpdmUucmVtb3ZlQXR0cmlidXRlKFRBQl9BQ1RJVkUpO1xyXG4gICAgICBhY3RpdmVOYXZFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShOQVZfQUNUSVZFKTtcclxuXHJcbiAgICAgIGNvbnN0IGRyb3Bkb3duQ2hpbGQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFxyXG4gICAgICAgIFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCxcclxuICAgICAgICBhY3RpdmUucGFyZW50Tm9kZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcclxuICAgICAgICBkcm9wZG93bkNoaWxkLnJlbW92ZUF0dHJpYnV0ZShUQUJfQUNUSVZFKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpID09PSBcInRhYlwiKSB7XHJcbiAgICAgICAgYWN0aXZlLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwgZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoVEFCX0FDVElWRSwgXCJcIik7XHJcbiAgICBuYXZFbGVtZW50LnNldEF0dHJpYnV0ZShOQVZfQUNUSVZFLCBcIlwiKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpID09PSBcInRhYlwiKSB7XHJcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICByZWZsb3coZWxlbWVudCk7XHJcblxyXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRoaXMuX2NsYXNzZXMuaGlkZSkpIHtcclxuICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlQ2xhc3MoZWxlbWVudCwgdGhpcy5fY2xhc3Nlcy5oaWRlKTtcclxuICAgICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3MoZWxlbWVudCwgdGhpcy5fY2xhc3Nlcy5zaG93KTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZU5hbWUgPT09IFwiTElcIikge1xyXG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGFyZW50ICYmIHBhcmVudC5oYXNBdHRyaWJ1dGUoREFUQV9OQU1FX0RST1BET1dOX01FTlUpKSB7XHJcbiAgICAgIGNvbnN0IGRyb3Bkb3duRWxlbWVudCA9IGVsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTik7XHJcblxyXG4gICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XHJcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUsIGRyb3Bkb3duRWxlbWVudCkuZm9yRWFjaChcclxuICAgICAgICAgIChkcm9wZG93bikgPT4gZHJvcGRvd24uc2V0QXR0cmlidXRlKFRBQl9BQ1RJVkUsIFwiXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljXHJcblxyXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYjtcclxuIiwiKCgpPT57dmFyIGU9ezQ1NDooZSx0LG4pPT57XCJ1c2Ugc3RyaWN0XCI7bi5kKHQse1o6KCk9PmF9KTt2YXIgcj1uKDY0NSksbz1uLm4ocikoKSgoZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV19KSk7by5wdXNoKFtlLmlkLFwiSU5QVVQ6LXdlYmtpdC1hdXRvZmlsbCxTRUxFQ1Q6LXdlYmtpdC1hdXRvZmlsbCxURVhUQVJFQTotd2Via2l0LWF1dG9maWxse2FuaW1hdGlvbi1uYW1lOm9uYXV0b2ZpbGxzdGFydH1JTlBVVDpub3QoOi13ZWJraXQtYXV0b2ZpbGwpLFNFTEVDVDpub3QoOi13ZWJraXQtYXV0b2ZpbGwpLFRFWFRBUkVBOm5vdCg6LXdlYmtpdC1hdXRvZmlsbCl7YW5pbWF0aW9uLW5hbWU6b25hdXRvZmlsbGNhbmNlbH1Aa2V5ZnJhbWVzIG9uYXV0b2ZpbGxzdGFydHt9QGtleWZyYW1lcyBvbmF1dG9maWxsY2FuY2Vse31cIixcIlwiXSk7Y29uc3QgYT1vfSw2NDU6ZT0+e1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtyZXR1cm4gdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcCgoZnVuY3Rpb24odCl7dmFyIG49ZSh0KTtyZXR1cm4gdFsyXT9cIkBtZWRpYSBcIi5jb25jYXQodFsyXSxcIiB7XCIpLmNvbmNhdChuLFwifVwiKTpufSkpLmpvaW4oXCJcIil9LHQuaT1mdW5jdGlvbihlLG4scil7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPVtbbnVsbCxlLFwiXCJdXSk7dmFyIG89e307aWYocilmb3IodmFyIGE9MDthPHRoaXMubGVuZ3RoO2ErKyl7dmFyIGk9dGhpc1thXVswXTtudWxsIT1pJiYob1tpXT0hMCl9Zm9yKHZhciB1PTA7dTxlLmxlbmd0aDt1Kyspe3ZhciBjPVtdLmNvbmNhdChlW3VdKTtyJiZvW2NbMF1dfHwobiYmKGNbMl0/Y1syXT1cIlwiLmNvbmNhdChuLFwiIGFuZCBcIikuY29uY2F0KGNbMl0pOmNbMl09biksdC5wdXNoKGMpKX19LHR9fSw4MTA6KCk9PnshZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXRyeXt2YXIgZT1uZXcgd2luZG93LkN1c3RvbUV2ZW50KFwidGVzdFwiLHtjYW5jZWxhYmxlOiEwfSk7aWYoZS5wcmV2ZW50RGVmYXVsdCgpLCEwIT09ZS5kZWZhdWx0UHJldmVudGVkKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBwcmV2ZW50IGRlZmF1bHRcIil9Y2F0Y2goZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXt2YXIgbixyO3JldHVybih0PXR8fHt9KS5idWJibGVzPSEhdC5idWJibGVzLHQuY2FuY2VsYWJsZT0hIXQuY2FuY2VsYWJsZSwobj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpKS5pbml0Q3VzdG9tRXZlbnQoZSx0LmJ1YmJsZXMsdC5jYW5jZWxhYmxlLHQuZGV0YWlsKSxyPW4ucHJldmVudERlZmF1bHQsbi5wcmV2ZW50RGVmYXVsdD1mdW5jdGlvbigpe3IuY2FsbCh0aGlzKTt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJkZWZhdWx0UHJldmVudGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiEwfX0pfWNhdGNoKGUpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMH19LG59O3QucHJvdG90eXBlPXdpbmRvdy5FdmVudC5wcm90b3R5cGUsd2luZG93LkN1c3RvbUV2ZW50PXR9fSgpfSwzNzk6KGUsdCxuKT0+e1widXNlIHN0cmljdFwiO3ZhciByLG89ZnVuY3Rpb24oKXt2YXIgZT17fTtyZXR1cm4gZnVuY3Rpb24odCl7aWYodm9pZCAwPT09ZVt0XSl7dmFyIG49ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTtpZih3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQmJm4gaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpdHJ5e249bi5jb250ZW50RG9jdW1lbnQuaGVhZH1jYXRjaChlKXtuPW51bGx9ZVt0XT1ufXJldHVybiBlW3RdfX0oKSxhPVtdO2Z1bmN0aW9uIGkoZSl7Zm9yKHZhciB0PS0xLG49MDtuPGEubGVuZ3RoO24rKylpZihhW25dLmlkZW50aWZpZXI9PT1lKXt0PW47YnJlYWt9cmV0dXJuIHR9ZnVuY3Rpb24gdShlLHQpe2Zvcih2YXIgbj17fSxyPVtdLG89MDtvPGUubGVuZ3RoO28rKyl7dmFyIHU9ZVtvXSxjPXQuYmFzZT91WzBdK3QuYmFzZTp1WzBdLGw9bltjXXx8MCxzPVwiXCIuY29uY2F0KGMsXCIgXCIpLmNvbmNhdChsKTtuW2NdPWwrMTt2YXIgZD1pKHMpLGY9e2Nzczp1WzFdLG1lZGlhOnVbMl0sc291cmNlTWFwOnVbM119Oy0xIT09ZD8oYVtkXS5yZWZlcmVuY2VzKyssYVtkXS51cGRhdGVyKGYpKTphLnB1c2goe2lkZW50aWZpZXI6cyx1cGRhdGVyOm0oZix0KSxyZWZlcmVuY2VzOjF9KSxyLnB1c2gocyl9cmV0dXJuIHJ9ZnVuY3Rpb24gYyhlKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikscj1lLmF0dHJpYnV0ZXN8fHt9O2lmKHZvaWQgMD09PXIubm9uY2Upe3ZhciBhPW4ubmM7YSYmKHIubm9uY2U9YSl9aWYoT2JqZWN0LmtleXMocikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dC5zZXRBdHRyaWJ1dGUoZSxyW2VdKX0pKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluc2VydCllLmluc2VydCh0KTtlbHNle3ZhciBpPW8oZS5pbnNlcnR8fFwiaGVhZFwiKTtpZighaSl0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO2kuYXBwZW5kQ2hpbGQodCl9cmV0dXJuIHR9dmFyIGwscz0obD1bXSxmdW5jdGlvbihlLHQpe3JldHVybiBsW2VdPXQsbC5maWx0ZXIoQm9vbGVhbikuam9pbihcIlxcblwiKX0pO2Z1bmN0aW9uIGQoZSx0LG4scil7dmFyIG89bj9cIlwiOnIubWVkaWE/XCJAbWVkaWEgXCIuY29uY2F0KHIubWVkaWEsXCIge1wiKS5jb25jYXQoci5jc3MsXCJ9XCIpOnIuY3NzO2lmKGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1zKHQsbyk7ZWxzZXt2YXIgYT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShvKSxpPWUuY2hpbGROb2RlcztpW3RdJiZlLnJlbW92ZUNoaWxkKGlbdF0pLGkubGVuZ3RoP2UuaW5zZXJ0QmVmb3JlKGEsaVt0XSk6ZS5hcHBlbmRDaGlsZChhKX19ZnVuY3Rpb24gZihlLHQsbil7dmFyIHI9bi5jc3Msbz1uLm1lZGlhLGE9bi5zb3VyY2VNYXA7aWYobz9lLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsbyk6ZS5yZW1vdmVBdHRyaWJ1dGUoXCJtZWRpYVwiKSxhJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgYnRvYSYmKHIrPVwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoYSkpKSksXCIgKi9cIikpLGUuc3R5bGVTaGVldCllLnN0eWxlU2hlZXQuY3NzVGV4dD1yO2Vsc2V7Zm9yKDtlLmZpcnN0Q2hpbGQ7KWUucmVtb3ZlQ2hpbGQoZS5maXJzdENoaWxkKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHIpKX19dmFyIHY9bnVsbCxwPTA7ZnVuY3Rpb24gbShlLHQpe3ZhciBuLHIsbztpZih0LnNpbmdsZXRvbil7dmFyIGE9cCsrO249dnx8KHY9Yyh0KSkscj1kLmJpbmQobnVsbCxuLGEsITEpLG89ZC5iaW5kKG51bGwsbixhLCEwKX1lbHNlIG49Yyh0KSxyPWYuYmluZChudWxsLG4sdCksbz1mdW5jdGlvbigpeyFmdW5jdGlvbihlKXtpZihudWxsPT09ZS5wYXJlbnROb2RlKXJldHVybiExO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0obil9O3JldHVybiByKGUpLGZ1bmN0aW9uKHQpe2lmKHQpe2lmKHQuY3NzPT09ZS5jc3MmJnQubWVkaWE9PT1lLm1lZGlhJiZ0LnNvdXJjZU1hcD09PWUuc291cmNlTWFwKXJldHVybjtyKGU9dCl9ZWxzZSBvKCl9fWUuZXhwb3J0cz1mdW5jdGlvbihlLHQpeyh0PXR8fHt9KS5zaW5nbGV0b258fFwiYm9vbGVhblwiPT10eXBlb2YgdC5zaW5nbGV0b258fCh0LnNpbmdsZXRvbj0odm9pZCAwPT09ciYmKHI9Qm9vbGVhbih3aW5kb3cmJmRvY3VtZW50JiZkb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYikpLHIpKTt2YXIgbj11KGU9ZXx8W10sdCk7cmV0dXJuIGZ1bmN0aW9uKGUpe2lmKGU9ZXx8W10sXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKXtmb3IodmFyIHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIG89aShuW3JdKTthW29dLnJlZmVyZW5jZXMtLX1mb3IodmFyIGM9dShlLHQpLGw9MDtsPG4ubGVuZ3RoO2wrKyl7dmFyIHM9aShuW2xdKTswPT09YVtzXS5yZWZlcmVuY2VzJiYoYVtzXS51cGRhdGVyKCksYS5zcGxpY2UocywxKSl9bj1jfX19fX0sdD17fTtmdW5jdGlvbiBuKHIpe3ZhciBvPXRbcl07aWYodm9pZCAwIT09bylyZXR1cm4gby5leHBvcnRzO3ZhciBhPXRbcl09e2lkOnIsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0oYSxhLmV4cG9ydHMsbiksYS5leHBvcnRzfW4ubj1lPT57dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlPygpPT5lLmRlZmF1bHQ6KCk9PmU7cmV0dXJuIG4uZCh0LHthOnR9KSx0fSxuLmQ9KGUsdCk9Pntmb3IodmFyIHIgaW4gdCluLm8odCxyKSYmIW4ubyhlLHIpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLHtlbnVtZXJhYmxlOiEwLGdldDp0W3JdfSl9LG4ubz0oZSx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCksKCgpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9bigzNzkpLHQ9bi5uKGUpLHI9big0NTQpO2Z1bmN0aW9uIG8oZSl7aWYoIWUuaGFzQXR0cmlidXRlKFwiYXV0b2NvbXBsZXRlZFwiKSl7ZS5zZXRBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVkXCIsXCJcIik7dmFyIHQ9bmV3IHdpbmRvdy5DdXN0b21FdmVudChcIm9uYXV0b2NvbXBsZXRlXCIse2J1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxkZXRhaWw6bnVsbH0pO2UuZGlzcGF0Y2hFdmVudCh0KXx8KGUudmFsdWU9XCJcIil9fWZ1bmN0aW9uIGEoZSl7ZS5oYXNBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVkXCIpJiYoZS5yZW1vdmVBdHRyaWJ1dGUoXCJhdXRvY29tcGxldGVkXCIpLGUuZGlzcGF0Y2hFdmVudChuZXcgd2luZG93LkN1c3RvbUV2ZW50KFwib25hdXRvY29tcGxldGVcIix7YnViYmxlczohMCxjYW5jZWxhYmxlOiExLGRldGFpbDpudWxsfSkpKX10KCkoci5aLHtpbnNlcnQ6XCJoZWFkXCIsc2luZ2xldG9uOiExfSksci5aLmxvY2FscyxuKDgxMCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbnN0YXJ0XCIsKGZ1bmN0aW9uKGUpe1wib25hdXRvZmlsbHN0YXJ0XCI9PT1lLmFuaW1hdGlvbk5hbWU/byhlLnRhcmdldCk6YShlLnRhcmdldCl9KSwhMCksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsKGZ1bmN0aW9uKGUpe1wiaW5zZXJ0UmVwbGFjZW1lbnRUZXh0XCIhPT1lLmlucHV0VHlwZSYmXCJkYXRhXCJpbiBlP2EoZS50YXJnZXQpOm8oZS50YXJnZXQpfSksITApfSkoKX0pKCk7IiwiaW1wb3J0IHsgZWxlbWVudCwgb25ET01Db250ZW50TG9hZGVkLCB0eXBlQ2hlY2tDb25maWcgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleFwiO1xyXG5pbXBvcnQgRGF0YSBmcm9tIFwiLi4vLi4vZG9tL2RhdGFcIjtcclxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vLi4vZG9tL2V2ZW50LWhhbmRsZXJcIjtcclxuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gXCIuLi8uLi9kb20vbWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi8uLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCBcImRldGVjdC1hdXRvZmlsbFwiO1xyXG5cclxuLypcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbkNvbnN0YW50c1xyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNvbnN0IE5BTUUgPSBcImlucHV0XCI7XHJcbmNvbnN0IERBVEFfS0VZID0gXCJ0d2UuaW5wdXRcIjtcclxuY29uc3QgREFUQV9XUkFQUEVSID0gXCJkYXRhLXR3ZS1pbnB1dC13cmFwcGVyLWluaXRcIjtcclxuY29uc3QgREFUQV9OT1RDSCA9IFwiZGF0YS10d2UtaW5wdXQtbm90Y2gtcmVmXCI7XHJcbmNvbnN0IERBVEFfTk9UQ0hfTEVBRElORyA9IFwiZGF0YS10d2UtaW5wdXQtbm90Y2gtbGVhZGluZy1yZWZcIjtcclxuY29uc3QgREFUQV9OT1RDSF9NSURETEUgPSBcImRhdGEtdHdlLWlucHV0LW5vdGNoLW1pZGRsZS1yZWZcIjtcclxuY29uc3QgREFUQV9OT1RDSF9UUkFJTElORyA9IFwiZGF0YS10d2UtaW5wdXQtbm90Y2gtdHJhaWxpbmctcmVmXCI7XHJcbmNvbnN0IERBVEFfSEVMUEVSID0gXCJkYXRhLXR3ZS1pbnB1dC1oZWxwZXItcmVmXCI7XHJcbmNvbnN0IERBVEFfUExBQ0VIT0xERVJfQUNUSVZFID0gXCJkYXRhLXR3ZS1pbnB1dC1wbGFjZWhvbGRlci1hY3RpdmVcIjtcclxuY29uc3QgREFUQV9BQ1RJVkUgPSBcImRhdGEtdHdlLWlucHV0LXN0YXRlLWFjdGl2ZVwiO1xyXG5jb25zdCBEQVRBX0ZPQ1VTRUQgPSBcImRhdGEtdHdlLWlucHV0LWZvY3VzZWRcIjtcclxuY29uc3QgREFUQV9GT1JNX0NPVU5URVIgPSBcImRhdGEtdHdlLWlucHV0LWZvcm0tY291bnRlclwiO1xyXG5cclxuY29uc3QgU0VMRUNUT1JfT1VUTElORV9JTlBVVCA9IGBbJHtEQVRBX1dSQVBQRVJ9XSBpbnB1dGA7XHJcbmNvbnN0IFNFTEVDVE9SX09VVExJTkVfVEVYVEFSRUEgPSBgWyR7REFUQV9XUkFQUEVSfV0gdGV4dGFyZWFgO1xyXG5cclxuY29uc3QgU0VMRUNUT1JfTk9UQ0ggPSBgWyR7REFUQV9OT1RDSH1dYDtcclxuY29uc3QgU0VMRUNUT1JfTk9UQ0hfTEVBRElORyA9IGBbJHtEQVRBX05PVENIX0xFQURJTkd9XWA7XHJcbmNvbnN0IFNFTEVDVE9SX05PVENIX01JRERMRSA9IGBbJHtEQVRBX05PVENIX01JRERMRX1dYDtcclxuY29uc3QgU0VMRUNUT1JfSEVMUEVSID0gYFske0RBVEFfSEVMUEVSfV1gO1xyXG5cclxuY29uc3QgRGVmYXVsdCA9IHtcclxuICBpbnB1dEZvcm1XaGl0ZTogZmFsc2UsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcclxuICBpbnB1dEZvcm1XaGl0ZTogXCIoYm9vbGVhbilcIixcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBEZWZhdWx0Q2xhc3NlcyA9IHtcclxuICBub3RjaDpcclxuICAgIFwiZ3JvdXAgZmxleCBhYnNvbHV0ZSBsZWZ0LTAgdG9wLTAgdy1mdWxsIG1heC13LWZ1bGwgaC1mdWxsIHRleHQtbGVmdCBwb2ludGVyLWV2ZW50cy1ub25lXCIsXHJcbiAgbm90Y2hMZWFkaW5nOlxyXG4gICAgXCJwb2ludGVyLWV2ZW50cy1ub25lIGJvcmRlciBib3JkZXItc29saWQgYm94LWJvcmRlciBiZy10cmFuc3BhcmVudCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1saW5lYXIgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW5vbmUgbGVmdC0wIHRvcC0wIGgtZnVsbCB3LTIgYm9yZGVyLWUtMCByb3VuZGVkLXMtWzAuMjVyZW1dIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItZS0wIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1zdGF0ZS1hY3RpdmVdOmJvcmRlci1lLTBcIixcclxuICBub3RjaExlYWRpbmdOb3JtYWw6XHJcbiAgICBcImJvcmRlci1zZWNvbmRhcnktNTAwIGRhcms6Ym9yZGVyLW5ldXRyYWwtNDAwIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpzaGFkb3ctbm90Y2gtMSBncm91cC1kYXRhLVt0d2UtaW5wdXQtZm9jdXNlZF06Ym9yZGVyLXByaW1hcnlcIixcclxuICBub3RjaExlYWRpbmdXaGl0ZTpcclxuICAgIFwiYm9yZGVyLW5ldXRyYWwtMjAwIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpzaGFkb3ctbm90Y2gtMSBncm91cC1kYXRhLVt0d2UtaW5wdXQtZm9jdXNlZF06c2hhZG93LXdoaXRlIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItd2hpdGVcIixcclxuICBub3RjaE1pZGRsZTpcclxuICAgIFwicG9pbnRlci1ldmVudHMtbm9uZSBib3JkZXIgYm9yZGVyLXNvbGlkIGJveC1ib3JkZXIgYmctdHJhbnNwYXJlbnQgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGVhc2UtbGluZWFyIG1vdGlvbi1yZWR1Y2U6dHJhbnNpdGlvbi1ub25lIGdyb3ctMCBzaHJpbmstMCBiYXNpcy1hdXRvIHctYXV0byBtYXgtdy1bY2FsYygxMDAlLTFyZW0pXSBoLWZ1bGwgYm9yZGVyLWUtMCBib3JkZXItcy0wIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXIteC0wIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1zdGF0ZS1hY3RpdmVdOmJvcmRlci14LTAgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LWZvY3VzZWRdOmJvcmRlci10IGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1zdGF0ZS1hY3RpdmVdOmJvcmRlci10IGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItc29saWQgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LXN0YXRlLWFjdGl2ZV06Ym9yZGVyLXNvbGlkIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItdC10cmFuc3BhcmVudCBncm91cC1kYXRhLVt0d2UtaW5wdXQtc3RhdGUtYWN0aXZlXTpib3JkZXItdC10cmFuc3BhcmVudFwiLFxyXG4gIG5vdGNoTWlkZGxlTm9ybWFsOlxyXG4gICAgXCJib3JkZXItc2Vjb25kYXJ5LTUwMCBkYXJrOmJvcmRlci1uZXV0cmFsLTQwMCBncm91cC1kYXRhLVt0d2UtaW5wdXQtZm9jdXNlZF06c2hhZG93LW5vdGNoLTIgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LWZvY3VzZWRdOmJvcmRlci1wcmltYXJ5XCIsXHJcbiAgbm90Y2hNaWRkbGVXaGl0ZTpcclxuICAgIFwiYm9yZGVyLW5ldXRyYWwtMjAwIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpzaGFkb3ctbm90Y2gtMiBncm91cC1kYXRhLVt0d2UtaW5wdXQtZm9jdXNlZF06c2hhZG93LXdoaXRlIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItd2hpdGVcIixcclxuICBub3RjaFRyYWlsaW5nOlxyXG4gICAgXCJwb2ludGVyLWV2ZW50cy1ub25lIGJvcmRlciBib3JkZXItc29saWQgYm94LWJvcmRlciBiZy10cmFuc3BhcmVudCB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZWFzZS1saW5lYXIgbW90aW9uLXJlZHVjZTp0cmFuc2l0aW9uLW5vbmUgZ3JvdyBoLWZ1bGwgYm9yZGVyLXMtMCByb3VuZGVkLWUtWzAuMjVyZW1dIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpib3JkZXItcy0wIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1zdGF0ZS1hY3RpdmVdOmJvcmRlci1zLTBcIixcclxuICBub3RjaFRyYWlsaW5nTm9ybWFsOlxyXG4gICAgXCJib3JkZXItc2Vjb25kYXJ5LTUwMCBkYXJrOmJvcmRlci1uZXV0cmFsLTQwMCBncm91cC1kYXRhLVt0d2UtaW5wdXQtZm9jdXNlZF06c2hhZG93LW5vdGNoLTMgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LWZvY3VzZWRdOmJvcmRlci1wcmltYXJ5XCIsXHJcbiAgbm90Y2hUcmFpbGluZ1doaXRlOlxyXG4gICAgXCJib3JkZXItbmV1dHJhbC0yMDAgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LWZvY3VzZWRdOnNoYWRvdy1ub3RjaC0zIGdyb3VwLWRhdGEtW3R3ZS1pbnB1dC1mb2N1c2VkXTpzaGFkb3ctd2hpdGUgZ3JvdXAtZGF0YS1bdHdlLWlucHV0LWZvY3VzZWRdOmJvcmRlci13aGl0ZVwiLFxyXG4gIGNvdW50ZXI6IFwidGV4dC1yaWdodCBsZWFkaW5nLVsxLjZdXCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3Nlc1R5cGUgPSB7XHJcbiAgbm90Y2g6IFwic3RyaW5nXCIsXHJcbiAgbm90Y2hMZWFkaW5nOiBcInN0cmluZ1wiLFxyXG4gIG5vdGNoTGVhZGluZ05vcm1hbDogXCJzdHJpbmdcIixcclxuICBub3RjaExlYWRpbmdXaGl0ZTogXCJzdHJpbmdcIixcclxuICBub3RjaE1pZGRsZTogXCJzdHJpbmdcIixcclxuICBub3RjaE1pZGRsZU5vcm1hbDogXCJzdHJpbmdcIixcclxuICBub3RjaE1pZGRsZVdoaXRlOiBcInN0cmluZ1wiLFxyXG4gIG5vdGNoVHJhaWxpbmc6IFwic3RyaW5nXCIsXHJcbiAgbm90Y2hUcmFpbGluZ05vcm1hbDogXCJzdHJpbmdcIixcclxuICBub3RjaFRyYWlsaW5nV2hpdGU6IFwic3RyaW5nXCIsXHJcbiAgY291bnRlcjogXCJzdHJpbmdcIixcclxufTtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5DbGFzcyBEZWZpbml0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY2xhc3MgSW5wdXQge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZywgY2xhc3Nlcykge1xyXG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZywgZWxlbWVudCk7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuX2NsYXNzZXMgPSB0aGlzLl9nZXRDbGFzc2VzKGNsYXNzZXMpO1xyXG4gICAgdGhpcy5fbGFiZWwgPSBudWxsO1xyXG4gICAgdGhpcy5fbGFiZWxXaWR0aCA9IDA7XHJcbiAgICB0aGlzLl9sYWJlbE1hcmdpbkxlZnQgPSAwO1xyXG4gICAgdGhpcy5fbm90Y2hMZWFkaW5nID0gbnVsbDtcclxuICAgIHRoaXMuX25vdGNoTWlkZGxlID0gbnVsbDtcclxuICAgIHRoaXMuX25vdGNoVHJhaWxpbmcgPSBudWxsO1xyXG4gICAgdGhpcy5faW5pdGlhdGVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9oZWxwZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fY291bnRlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5fY291bnRlckVsZW1lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gMDtcclxuICAgIHRoaXMuX2xlYWRpbmdJY29uID0gbnVsbDtcclxuICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgIERhdGEuc2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSwgdGhpcyk7XHJcbiAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gR2V0dGVyc1xyXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcclxuICAgIHJldHVybiBOQU1FO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlucHV0KCkge1xyXG4gICAgY29uc3QgaW5wdXRFbGVtZW50ID1cclxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcImlucHV0XCIsIHRoaXMuX2VsZW1lbnQpIHx8XHJcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXCJ0ZXh0YXJlYVwiLCB0aGlzLl9lbGVtZW50KTtcclxuICAgIHJldHVybiBpbnB1dEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWNcclxuICBpbml0KCkge1xyXG4gICAgaWYgKHRoaXMuX2luaXRpYXRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9nZXRMYWJlbERhdGEoKTtcclxuICAgIHRoaXMuX2FwcGx5RGl2cygpO1xyXG4gICAgdGhpcy5fYXBwbHlOb3RjaCgpO1xyXG4gICAgdGhpcy5fYWN0aXZhdGUoKTtcclxuICAgIHRoaXMuX2dldEhlbHBlcigpO1xyXG4gICAgdGhpcy5fZ2V0Q291bnRlcigpO1xyXG4gICAgdGhpcy5fZ2V0RXZlbnRzKCk7XHJcbiAgICB0aGlzLl9pbml0aWF0ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5fZ2V0TGFiZWxEYXRhKCk7XHJcbiAgICB0aGlzLl9nZXROb3RjaERhdGEoKTtcclxuICAgIHRoaXMuX2FwcGx5Tm90Y2goKTtcclxuICAgIHRoaXMuX2FjdGl2YXRlKCk7XHJcbiAgICB0aGlzLl9nZXRIZWxwZXIoKTtcclxuICAgIHRoaXMuX2dldENvdW50ZXIoKTtcclxuICB9XHJcblxyXG4gIGZvcmNlQWN0aXZlKCkge1xyXG4gICAgdGhpcy5pbnB1dC5zZXRBdHRyaWJ1dGUoREFUQV9BQ1RJVkUsIFwiXCIpO1xyXG5cclxuICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTk9UQ0gsIHRoaXMuaW5wdXQucGFyZW50Tm9kZSkuc2V0QXR0cmlidXRlKFxyXG4gICAgICBEQVRBX0FDVElWRSxcclxuICAgICAgXCJcIlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGZvcmNlSW5hY3RpdmUoKSB7XHJcbiAgICB0aGlzLmlucHV0LnJlbW92ZUF0dHJpYnV0ZShEQVRBX0FDVElWRSk7XHJcblxyXG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfTk9UQ0gsXHJcbiAgICAgIHRoaXMuaW5wdXQucGFyZW50Tm9kZVxyXG4gICAgKS5yZW1vdmVBdHRyaWJ1dGUoREFUQV9BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuX3JlbW92ZUJvcmRlcigpO1xyXG5cclxuICAgIERhdGEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XHJcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIFByaXZhdGVcclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcsIGVsZW1lbnQpIHtcclxuICAgIGNvbmZpZyA9IHtcclxuICAgICAgLi4uRGVmYXVsdCxcclxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXMoZWxlbWVudCksXHJcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiID8gY29uZmlnIDoge30pLFxyXG4gICAgfTtcclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICBfZ2V0Q2xhc3NlcyhjbGFzc2VzKSB7XHJcbiAgICBjb25zdCBkYXRhQXR0cmlidXRlcyA9IE1hbmlwdWxhdG9yLmdldERhdGFDbGFzc0F0dHJpYnV0ZXModGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgY2xhc3NlcyA9IHtcclxuICAgICAgLi4uRGVmYXVsdENsYXNzZXMsXHJcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxyXG4gICAgICAuLi5jbGFzc2VzLFxyXG4gICAgfTtcclxuXHJcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY2xhc3NlcywgRGVmYXVsdENsYXNzZXNUeXBlKTtcclxuXHJcbiAgICByZXR1cm4gY2xhc3NlcztcclxuICB9XHJcblxyXG4gIF9nZXRMYWJlbERhdGEoKSB7XHJcbiAgICB0aGlzLl9sYWJlbCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXCJsYWJlbFwiLCB0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICBpZiAodGhpcy5fbGFiZWwgPT09IG51bGwpIHtcclxuICAgICAgdGhpcy5fc2hvd1BsYWNlaG9sZGVyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9nZXRMYWJlbFdpZHRoKCk7XHJcbiAgICAgIHRoaXMuX2dldExhYmVsUG9zaXRpb25JbklucHV0R3JvdXAoKTtcclxuICAgICAgdGhpcy5fdG9nZ2xlRGVmYXVsdERhdGVQbGFjZWhvbGRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2dldEhlbHBlcigpIHtcclxuICAgIHRoaXMuX2hlbHBlciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfSEVMUEVSLCB0aGlzLl9lbGVtZW50KTtcclxuICB9XHJcblxyXG4gIF9nZXRDb3VudGVyKCkge1xyXG4gICAgdGhpcy5fY291bnRlciA9IE1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGUoXHJcbiAgICAgIHRoaXMuaW5wdXQsXHJcbiAgICAgIFwiaW5wdXRTaG93Y291bnRlclwiXHJcbiAgICApO1xyXG4gICAgaWYgKHRoaXMuX2NvdW50ZXIpIHtcclxuICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pbnB1dC5tYXhMZW5ndGg7XHJcbiAgICAgIHRoaXMuX3Nob3dDb3VudGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZ2V0RXZlbnRzKCkge1xyXG4gICAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICBcImZvY3VzXCIsXHJcbiAgICAgIFwiaW5wdXRcIixcclxuICAgICAgSW5wdXQuYWN0aXZhdGUobmV3IElucHV0KCkpXHJcbiAgICApO1xyXG4gICAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICBcImlucHV0XCIsXHJcbiAgICAgIFwiaW5wdXRcIixcclxuICAgICAgSW5wdXQuYWN0aXZhdGUobmV3IElucHV0KCkpXHJcbiAgICApO1xyXG4gICAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgICB0aGlzLl9lbGVtZW50LFxyXG4gICAgICBcImJsdXJcIixcclxuICAgICAgXCJpbnB1dFwiLFxyXG4gICAgICBJbnB1dC5kZWFjdGl2YXRlKG5ldyBJbnB1dCgpKVxyXG4gICAgKTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIFwiZm9jdXNcIixcclxuICAgICAgXCJ0ZXh0YXJlYVwiLFxyXG4gICAgICBJbnB1dC5hY3RpdmF0ZShuZXcgSW5wdXQoKSlcclxuICAgICk7XHJcbiAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIFwiaW5wdXRcIixcclxuICAgICAgXCJ0ZXh0YXJlYVwiLFxyXG4gICAgICBJbnB1dC5hY3RpdmF0ZShuZXcgSW5wdXQoKSlcclxuICAgICk7XHJcbiAgICBFdmVudEhhbmRsZXIub24oXHJcbiAgICAgIHRoaXMuX2VsZW1lbnQsXHJcbiAgICAgIFwiYmx1clwiLFxyXG4gICAgICBcInRleHRhcmVhXCIsXHJcbiAgICAgIElucHV0LmRlYWN0aXZhdGUobmV3IElucHV0KCkpXHJcbiAgICApO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIFwic2hvd24udHdlLm1vZGFsXCIsIChlKSA9PiB7XHJcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfT1VUTElORV9JTlBVVCwgZS50YXJnZXQpLmZvckVhY2goXHJcbiAgICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX09VVExJTkVfVEVYVEFSRUEsIGUudGFyZ2V0KS5mb3JFYWNoKFxyXG4gICAgICAgIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IElucHV0LmdldEluc3RhbmNlKGVsZW1lbnQucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIFwic2hvd24udHdlLmRyb3Bkb3duXCIsIChlKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBcIltkYXRhLXR3ZS1kcm9wZG93bi1tZW51LXJlZl1cIlxyXG4gICAgICApO1xyXG4gICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9PVVRMSU5FX0lOUFVULCB0YXJnZXQpLmZvckVhY2goXHJcbiAgICAgICAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IElucHV0LmdldEluc3RhbmNlKGVsZW1lbnQucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX09VVExJTkVfVEVYVEFSRUEsIHRhcmdldCkuZm9yRWFjaChcclxuICAgICAgICAgIChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnN0YW5jZS51cGRhdGUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBcInNob3duLnR3ZS50YWJcIiwgKGUpID0+IHtcclxuICAgICAgbGV0IHRhcmdldElkO1xyXG5cclxuICAgICAgaWYgKGUudGFyZ2V0LmhyZWYpIHtcclxuICAgICAgICB0YXJnZXRJZCA9IGUudGFyZ2V0LmhyZWYuc3BsaXQoXCIjXCIpWzFdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRhcmdldElkID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZShlLnRhcmdldCwgXCJ0YXJnZXRcIikuc3BsaXQoXHJcbiAgICAgICAgICBcIiNcIlxyXG4gICAgICAgIClbMV07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoYCMke3RhcmdldElkfWApO1xyXG4gICAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX09VVExJTkVfSU5QVVQsIHRhcmdldCkuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9PVVRMSU5FX1RFWFRBUkVBLCB0YXJnZXQpLmZvckVhY2goXHJcbiAgICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZm9ybSByZXNldCBoYW5kbGVyXHJcbiAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBcInJlc2V0XCIsIChlKSA9PiB7XHJcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfT1VUTElORV9JTlBVVCwgZS50YXJnZXQpLmZvckVhY2goXHJcbiAgICAgICAgKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAgIGlmICghaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VJbmFjdGl2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9PVVRMSU5FX1RFWFRBUkVBLCBlLnRhcmdldCkuZm9yRWFjaChcclxuICAgICAgICAoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBJbnB1dC5nZXRJbnN0YW5jZShlbGVtZW50LnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZUluYWN0aXZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gYXV0by1maWxsXHJcbiAgICBFdmVudEhhbmRsZXIub24od2luZG93LCBcIm9uYXV0b2NvbXBsZXRlXCIsIChlKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluc3RhbmNlID0gSW5wdXQuZ2V0SW5zdGFuY2UoZS50YXJnZXQucGFyZW50Tm9kZSk7XHJcbiAgICAgIGlmICghaW5zdGFuY2UgfHwgIWUuY2FuY2VsYWJsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpbnN0YW5jZS5mb3JjZUFjdGl2ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2hvd0NvdW50ZXIoKSB7XHJcbiAgICBjb25zdCBjb3VudGVycyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoXHJcbiAgICAgIGBbJHtEQVRBX0ZPUk1fQ09VTlRFUn1dYCxcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgKTtcclxuICAgIGlmIChjb3VudGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX2NvdW50ZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2NvdW50ZXJFbGVtZW50LCB0aGlzLl9jbGFzc2VzLmNvdW50ZXIpO1xyXG4gICAgdGhpcy5fY291bnRlckVsZW1lbnQuc2V0QXR0cmlidXRlKERBVEFfRk9STV9DT1VOVEVSLCBcIlwiKTtcclxuICAgIGNvbnN0IGFjdHVhbExlbmd0aCA9IHRoaXMuaW5wdXQudmFsdWUubGVuZ3RoO1xyXG4gICAgdGhpcy5fY291bnRlckVsZW1lbnQuaW5uZXJIVE1MID0gYCR7YWN0dWFsTGVuZ3RofSAvICR7dGhpcy5fbWF4TGVuZ3RofWA7XHJcbiAgICB0aGlzLl9oZWxwZXIuYXBwZW5kQ2hpbGQodGhpcy5fY291bnRlckVsZW1lbnQpO1xyXG4gICAgdGhpcy5fYmluZENvdW50ZXIoKTtcclxuICB9XHJcblxyXG4gIF9iaW5kQ291bnRlcigpIHtcclxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLmlucHV0LCBcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgY29uc3QgYWN0dWFsTGVuZ3RoID0gdGhpcy5pbnB1dC52YWx1ZS5sZW5ndGg7XHJcbiAgICAgIHRoaXMuX2NvdW50ZXJFbGVtZW50LmlubmVySFRNTCA9IGAke2FjdHVhbExlbmd0aH0gLyAke3RoaXMuX21heExlbmd0aH1gO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlRGVmYXVsdERhdGVQbGFjZWhvbGRlcihpbnB1dCA9IHRoaXMuaW5wdXQpIHtcclxuICAgIGNvbnN0IGlzVHlwZURhdGUgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpID09PSBcImRhdGVcIjtcclxuICAgIGlmICghaXNUeXBlRGF0ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc0lucHV0Rm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0O1xyXG5cclxuICAgIGlmICghaXNJbnB1dEZvY3VzZWQgJiYgIWlucHV0LnZhbHVlKSB7XHJcbiAgICAgIGlucHV0LnN0eWxlLm9wYWNpdHkgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaW5wdXQuc3R5bGUub3BhY2l0eSA9IDE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2hvd1BsYWNlaG9sZGVyKCkge1xyXG4gICAgdGhpcy5pbnB1dC5zZXRBdHRyaWJ1dGUoREFUQV9QTEFDRUhPTERFUl9BQ1RJVkUsIFwiXCIpO1xyXG4gIH1cclxuXHJcbiAgX2dldE5vdGNoRGF0YSgpIHtcclxuICAgIHRoaXMuX25vdGNoTWlkZGxlID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfTk9UQ0hfTUlERExFLFxyXG4gICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICApO1xyXG4gICAgdGhpcy5fbm90Y2hMZWFkaW5nID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgU0VMRUNUT1JfTk9UQ0hfTEVBRElORyxcclxuICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9nZXRMYWJlbFdpZHRoKCkge1xyXG4gICAgdGhpcy5fbGFiZWxXaWR0aCA9IHRoaXMuX2xhYmVsLmNsaWVudFdpZHRoICogMC44ICsgODtcclxuICB9XHJcblxyXG4gIF9nZXRMYWJlbFBvc2l0aW9uSW5JbnB1dEdyb3VwKCkge1xyXG4gICAgdGhpcy5fbGFiZWxNYXJnaW5MZWZ0ID0gMDtcclxuICAgIGlmICghdGhpcy5fZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXR3ZS1pbnB1dC1ncm91cC1yZWZcIikpIHJldHVybjtcclxuICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICAgIGNvbnN0IHByZWZpeCA9IFNlbGVjdG9yRW5naW5lLnByZXYoXHJcbiAgICAgIGlucHV0LFxyXG4gICAgICBcIltkYXRhLXR3ZS1pbnB1dC1ncm91cC10ZXh0LXJlZl1cIlxyXG4gICAgKVswXTtcclxuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLl9sYWJlbE1hcmdpbkxlZnQgPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fbGFiZWxNYXJnaW5MZWZ0ID0gcHJlZml4Lm9mZnNldFdpZHRoIC0gMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9hcHBseURpdnMoKSB7XHJcbiAgICBjb25zdCBzaGFkb3dMZWFkaW5nID0gdGhpcy5fY29uZmlnLmlucHV0Rm9ybVdoaXRlXHJcbiAgICAgID8gdGhpcy5fY2xhc3Nlcy5ub3RjaExlYWRpbmdXaGl0ZVxyXG4gICAgICA6IHRoaXMuX2NsYXNzZXMubm90Y2hMZWFkaW5nTm9ybWFsO1xyXG4gICAgY29uc3Qgc2hhZG93TWlkZGxlID0gdGhpcy5fY29uZmlnLmlucHV0Rm9ybVdoaXRlXHJcbiAgICAgID8gdGhpcy5fY2xhc3Nlcy5ub3RjaE1pZGRsZVdoaXRlXHJcbiAgICAgIDogdGhpcy5fY2xhc3Nlcy5ub3RjaE1pZGRsZU5vcm1hbDtcclxuICAgIGNvbnN0IHNoYWRvd1RyYWlsaW5nID0gdGhpcy5fY29uZmlnLmlucHV0Rm9ybVdoaXRlXHJcbiAgICAgID8gdGhpcy5fY2xhc3Nlcy5ub3RjaFRyYWlsaW5nV2hpdGVcclxuICAgICAgOiB0aGlzLl9jbGFzc2VzLm5vdGNoVHJhaWxpbmdOb3JtYWw7XHJcblxyXG4gICAgY29uc3QgYWxsTm90Y2hXcmFwcGVycyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfTk9UQ0gsIHRoaXMuX2VsZW1lbnQpO1xyXG4gICAgY29uc3Qgbm90Y2hXcmFwcGVyID0gZWxlbWVudChcImRpdlwiKTtcclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKG5vdGNoV3JhcHBlciwgdGhpcy5fY2xhc3Nlcy5ub3RjaCk7XHJcbiAgICBub3RjaFdyYXBwZXIuc2V0QXR0cmlidXRlKERBVEFfTk9UQ0gsIFwiXCIpO1xyXG4gICAgdGhpcy5fbm90Y2hMZWFkaW5nID0gZWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICBNYW5pcHVsYXRvci5hZGRDbGFzcyhcclxuICAgICAgdGhpcy5fbm90Y2hMZWFkaW5nLFxyXG4gICAgICBgJHt0aGlzLl9jbGFzc2VzLm5vdGNoTGVhZGluZ30gJHtzaGFkb3dMZWFkaW5nfWBcclxuICAgICk7XHJcbiAgICB0aGlzLl9ub3RjaExlYWRpbmcuc2V0QXR0cmlidXRlKERBVEFfTk9UQ0hfTEVBRElORywgXCJcIik7XHJcbiAgICB0aGlzLl9ub3RjaE1pZGRsZSA9IGVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3MoXHJcbiAgICAgIHRoaXMuX25vdGNoTWlkZGxlLFxyXG4gICAgICBgJHt0aGlzLl9jbGFzc2VzLm5vdGNoTWlkZGxlfSAke3NoYWRvd01pZGRsZX1gXHJcbiAgICApO1xyXG4gICAgdGhpcy5fbm90Y2hNaWRkbGUuc2V0QXR0cmlidXRlKERBVEFfTk9UQ0hfTUlERExFLCBcIlwiKTtcclxuICAgIHRoaXMuX25vdGNoVHJhaWxpbmcgPSBlbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKFxyXG4gICAgICB0aGlzLl9ub3RjaFRyYWlsaW5nLFxyXG4gICAgICBgJHt0aGlzLl9jbGFzc2VzLm5vdGNoVHJhaWxpbmd9ICR7c2hhZG93VHJhaWxpbmd9YFxyXG4gICAgKTtcclxuICAgIHRoaXMuX25vdGNoVHJhaWxpbmcuc2V0QXR0cmlidXRlKERBVEFfTk9UQ0hfVFJBSUxJTkcsIFwiXCIpO1xyXG4gICAgaWYgKGFsbE5vdGNoV3JhcHBlcnMubGVuZ3RoID49IDEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbm90Y2hXcmFwcGVyLmFwcGVuZCh0aGlzLl9ub3RjaExlYWRpbmcpO1xyXG4gICAgbm90Y2hXcmFwcGVyLmFwcGVuZCh0aGlzLl9ub3RjaE1pZGRsZSk7XHJcbiAgICBub3RjaFdyYXBwZXIuYXBwZW5kKHRoaXMuX25vdGNoVHJhaWxpbmcpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5hcHBlbmQobm90Y2hXcmFwcGVyKTtcclxuXHJcbiAgICAvLyBmb3Igbm93LCBiZWZvcmUgd2UgY2FuIGZpeCB0aGUgcnRsIGZvciBub3RjaGVzXHJcbiAgICBub3RjaFdyYXBwZXIuZGlyID0gXCJsdHJcIjtcclxuICB9XHJcblxyXG4gIF9hcHBseU5vdGNoKCkge1xyXG4gICAgdGhpcy5fbm90Y2hNaWRkbGUuc3R5bGUud2lkdGggPSBgJHt0aGlzLl9sYWJlbFdpZHRofXB4YDtcclxuICAgIHRoaXMuX25vdGNoTGVhZGluZy5zdHlsZS53aWR0aCA9IGAke3RoaXMuX2xhYmVsTWFyZ2luTGVmdCArIDl9cHhgO1xyXG5cclxuICAgIGlmICh0aGlzLl9sYWJlbCA9PT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgdGhpcy5fbGFiZWwuc3R5bGUubWFyZ2luTGVmdCA9IGAke3RoaXMuX2xhYmVsTWFyZ2luTGVmdH1weGA7XHJcbiAgfVxyXG5cclxuICBfcmVtb3ZlQm9yZGVyKCkge1xyXG4gICAgY29uc3QgYm9yZGVyID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9OT1RDSCwgdGhpcy5fZWxlbWVudCk7XHJcbiAgICBpZiAoYm9yZGVyKSBib3JkZXIucmVtb3ZlKCk7XHJcbiAgfVxyXG5cclxuICBfYWN0aXZhdGUoZXZlbnQpIHtcclxuICAgIG9uRE9NQ29udGVudExvYWRlZCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2dldEVsZW1lbnRzKGV2ZW50KTtcclxuICAgICAgY29uc3QgaW5wdXQgPSBldmVudCA/IGV2ZW50LnRhcmdldCA6IHRoaXMuaW5wdXQ7XHJcbiAgICAgIGNvbnN0IG5vdGNoV3JhcHBlciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXHJcbiAgICAgICAgU0VMRUNUT1JfTk9UQ0gsXHJcbiAgICAgICAgdGhpcy5fZWxlbWVudFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQudHlwZSA9PT0gXCJmb2N1c1wiKSB7XHJcbiAgICAgICAgbm90Y2hXcmFwcGVyICYmIG5vdGNoV3JhcHBlci5zZXRBdHRyaWJ1dGUoREFUQV9GT0NVU0VELCBcIlwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlucHV0LnZhbHVlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKERBVEFfQUNUSVZFLCBcIlwiKTtcclxuICAgICAgICBub3RjaFdyYXBwZXIgJiYgbm90Y2hXcmFwcGVyLnNldEF0dHJpYnV0ZShEQVRBX0FDVElWRSwgXCJcIik7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fdG9nZ2xlRGVmYXVsdERhdGVQbGFjZWhvbGRlcihpbnB1dCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9nZXRFbGVtZW50cyhldmVudCkge1xyXG4gICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZTtcclxuICAgICAgdGhpcy5fbGFiZWwgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFwibGFiZWxcIiwgdGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50ICYmIHRoaXMuX2xhYmVsKSB7XHJcbiAgICAgIGNvbnN0IHByZXZMYWJlbFdpZHRoID0gdGhpcy5fbGFiZWxXaWR0aDtcclxuICAgICAgdGhpcy5fZ2V0TGFiZWxEYXRhKCk7XHJcblxyXG4gICAgICBpZiAocHJldkxhYmVsV2lkdGggIT09IHRoaXMuX2xhYmVsV2lkdGgpIHtcclxuICAgICAgICB0aGlzLl9ub3RjaE1pZGRsZSA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoXHJcbiAgICAgICAgICBTRUxFQ1RPUl9OT1RDSF9NSURETEUsXHJcbiAgICAgICAgICBldmVudC50YXJnZXQucGFyZW50Tm9kZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5fbm90Y2hMZWFkaW5nID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShcclxuICAgICAgICAgIFNFTEVDVE9SX05PVENIX0xFQURJTkcsXHJcbiAgICAgICAgICBldmVudC50YXJnZXQucGFyZW50Tm9kZVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5fYXBwbHlOb3RjaCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZGVhY3RpdmF0ZShldmVudCkge1xyXG4gICAgY29uc3QgaW5wdXQgPSBldmVudCA/IGV2ZW50LnRhcmdldCA6IHRoaXMuaW5wdXQ7XHJcblxyXG4gICAgaWYgKGlucHV0LmdldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIikgPT09IFwidHJ1ZVwiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBub3RjaFdyYXBwZXIgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFxyXG4gICAgICBTRUxFQ1RPUl9OT1RDSCxcclxuICAgICAgaW5wdXQucGFyZW50Tm9kZVxyXG4gICAgKTtcclxuICAgIG5vdGNoV3JhcHBlci5yZW1vdmVBdHRyaWJ1dGUoREFUQV9GT0NVU0VEKTtcclxuXHJcbiAgICBpZiAoaW5wdXQudmFsdWUgPT09IFwiXCIpIHtcclxuICAgICAgaW5wdXQucmVtb3ZlQXR0cmlidXRlKERBVEFfQUNUSVZFKTtcclxuICAgICAgbm90Y2hXcmFwcGVyLnJlbW92ZUF0dHJpYnV0ZShEQVRBX0FDVElWRSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl90b2dnbGVEZWZhdWx0RGF0ZVBsYWNlaG9sZGVyKGlucHV0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhY3RpdmF0ZShpbnN0YW5jZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBpbnN0YW5jZS5fYWN0aXZhdGUoZXZlbnQpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWFjdGl2YXRlKGluc3RhbmNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIGluc3RhbmNlLl9kZWFjdGl2YXRlKGV2ZW50KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZywgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGxldCBkYXRhID0gRGF0YS5nZXREYXRhKHRoaXMsIERBVEFfS0VZKTtcclxuICAgICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09IFwib2JqZWN0XCIgJiYgY29uZmlnO1xyXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2UvLnRlc3QoY29uZmlnKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICBkYXRhID0gbmV3IElucHV0KHRoaXMsIF9jb25maWcpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRhdGFbY29uZmlnXShvcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudCkge1xyXG4gICAgcmV0dXJuIERhdGEuZ2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCBjb25maWcgPSB7fSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdGhpcy5nZXRJbnN0YW5jZShlbGVtZW50KSB8fFxyXG4gICAgICBuZXcgdGhpcyhlbGVtZW50LCB0eXBlb2YgY29uZmlnID09PSBcIm9iamVjdFwiID8gY29uZmlnIDogbnVsbClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbnB1dDtcclxuIiwiY29uc3Qgb3B0aW9ucyA9IHtcclxuICBwcm9wZXJ0eTogXCJjb2xvclwiLFxyXG4gIGRlZmF1bHRWYWx1ZTogbnVsbCxcclxuICBpbmhlcml0OiB0cnVlLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFN0eWxlID0gKGNsYXNzTmFtZSwgY3VzdG9tT3B0aW9ucykgPT4ge1xyXG4gIGNvbnN0IHsgcHJvcGVydHksIGRlZmF1bHRWYWx1ZSwgaW5oZXJpdCB9ID0geyAuLi5vcHRpb25zLCAuLi5jdXN0b21PcHRpb25zIH07XHJcblxyXG4gIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG5cclxuICBjb25zdCBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XHJcbiAgY29uc3QgdmFsdWUgPSBjb21wdXRlZFN0eWxlW3Byb3BlcnR5XSB8fCBkZWZhdWx0VmFsdWU7XHJcblxyXG4gIC8vIEdldCB0aGUgY29tcHV0ZWQgY29sb3IgdmFsdWUgb2YgdGhlIHBhcmVudCBlbGVtZW50XHJcbiAgY29uc3QgcGFyZW50Q29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQucGFyZW50RWxlbWVudCk7XHJcbiAgY29uc3QgcGFyZW50VmFsdWUgPSBwYXJlbnRDb21wdXRlZFN0eWxlW3Byb3BlcnR5XTtcclxuXHJcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtZW50KTtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgdGhlIGNvbXB1dGVkIGNvbG9yIHZhbHVlIGlzIHRoZSBzYW1lIGFzIHRoZSBwYXJlbnQncyBjb2xvciB2YWx1ZS4gVGhhdCBtZWFucyB0aGUgY29sb3IgaXMgbm90IHNldCBvbiB0aGUgZWxlbWVudCBpdHNlbGYgYW5kIGl0J3MgaW5oZXJpdGVkIGZyb20gdGhlIHBhcmVudCBlbGVtZW50XHJcbiAgaWYgKCFpbmhlcml0ICYmIHBhcmVudFZhbHVlICYmIHZhbHVlID09PSBwYXJlbnRWYWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybiB0aGUgY29tcHV0ZWQgY29sb3IgdmFsdWUgb3IgdGhlIGRlZmF1bHRWYWx1ZSBpZiBpdCdzIG5vdCBzZXRcclxuICByZXR1cm4gdmFsdWUgfHwgZGVmYXVsdFZhbHVlO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBlbGVtZW50LCB0eXBlQ2hlY2tDb25maWcgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleFwiO1xyXG5pbXBvcnQgRGF0YSBmcm9tIFwiLi4vLi4vZG9tL2RhdGFcIjtcclxuaW1wb3J0IEV2ZW50SGFuZGxlciBmcm9tIFwiLi4vLi4vZG9tL2V2ZW50LWhhbmRsZXJcIjtcclxuaW1wb3J0IE1hbmlwdWxhdG9yIGZyb20gXCIuLi8uLi9kb20vbWFuaXB1bGF0b3JcIjtcclxuaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi8uLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCB7IGdldFN0eWxlIH0gZnJvbSBcIi4uLy4uL3V0aWwvZ2V0U3R5bGVcIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5Db25zdGFudHNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jb25zdCBOQU1FID0gXCJyaXBwbGVcIjtcclxuY29uc3QgREFUQV9LRVkgPSBcInR3ZS5yaXBwbGVcIjtcclxuXHJcbmNvbnN0IEdSQURJRU5UID1cclxuICBcInJnYmEoe3tjb2xvcn19LCAwLjIpIDAsIHJnYmEoe3tjb2xvcn19LCAwLjMpIDQwJSwgcmdiYSh7e2NvbG9yfX0sIDAuNCkgNTAlLCByZ2JhKHt7Y29sb3J9fSwgMC41KSA2MCUsIHJnYmEoe3tjb2xvcn19LCAwKSA3MCVcIjtcclxuXHJcbmNvbnN0IFNFTEVDVE9SX0NPTVBPTkVOVCA9IFtcIltkYXRhLXR3ZS1yaXBwbGUtaW5pdF1cIl07XHJcbmNvbnN0IERFRkFVTFRfUklQUExFX0NPTE9SID0gWzAsIDAsIDBdO1xyXG5cclxuLy8gcHJldHRpZXItaWdub3JlXHJcbmNvbnN0IEJPT1RTVFJBUF9DT0xPUlMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogXCJwcmltYXJ5XCIsXHJcbiAgICBncmFkaWVudENvbG9yOiBnZXRTdHlsZShcInRleHQtcHJpbWFyeVwiLCB7IGRlZmF1bHRWYWx1ZTogXCIjM0I3MUNBXCIsIGluaGVyaXQ6IGZhbHNlIH0pLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJzZWNvbmRhcnlcIixcclxuICAgIGdyYWRpZW50Q29sb3I6IGdldFN0eWxlKFwidGV4dC1wcmltYXJ5LTEwMFwiLCB7IGRlZmF1bHRWYWx1ZTogXCIjOUZBNkIyXCIsIGluaGVyaXQ6IGZhbHNlIH0pLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJzdWNjZXNzXCIsXHJcbiAgICBncmFkaWVudENvbG9yOiBnZXRTdHlsZShcInRleHQtc3VjY2Vzc1wiLCB7IGRlZmF1bHRWYWx1ZTogXCIjMTRBNDREXCIsIGluaGVyaXQ6IGZhbHNlIH0pLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJkYW5nZXJcIixcclxuICAgIGdyYWRpZW50Q29sb3I6IGdldFN0eWxlKFwidGV4dC1kYW5nZXJcIiwgeyBkZWZhdWx0VmFsdWU6IFwiI0RDNEM2NFwiLCBpbmhlcml0OiBmYWxzZSB9KSxcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwid2FybmluZ1wiLFxyXG4gICAgZ3JhZGllbnRDb2xvcjogZ2V0U3R5bGUoXCJ0ZXh0LXdhcm5pbmdcIiwgeyBkZWZhdWx0VmFsdWU6IFwiI0U0QTExQlwiLCBpbmhlcml0OiBmYWxzZSB9KSxcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiaW5mb1wiLFxyXG4gICAgZ3JhZGllbnRDb2xvcjogZ2V0U3R5bGUoXCJ0ZXh0LWluZm9cIiwgeyBkZWZhdWx0VmFsdWU6IFwiIzU0QjREM1wiLCBpbmhlcml0OiBmYWxzZSB9KSxcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwibGlnaHRcIixcclxuICAgIGdyYWRpZW50Q29sb3I6IFwiI2ZiZmJmYlwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJkYXJrXCIsXHJcbiAgICBncmFkaWVudENvbG9yOiBcIiMyNjI2MjZcIixcclxuICB9LFxyXG5dO1xyXG5cclxuLy8gU2V0cyB2YWx1ZSB3aGVuIHJ1biBvcGFjaXR5IHRyYW5zaXRpb25cclxuLy8gSGlkZSBlbGVtZW50IGFmdGVyIDUwJSAoMC41KSB0aW1lIG9mIGFuaW1hdGlvbiBhbmQgZmluaXNoIG9uIDEwMCVcclxuY29uc3QgVFJBTlNJVElPTl9CUkVBS19PUEFDSVRZID0gMC41O1xyXG5cclxuY29uc3QgRGVmYXVsdCA9IHtcclxuICByaXBwbGVDZW50ZXJlZDogZmFsc2UsXHJcbiAgcmlwcGxlQ29sb3I6IFwiXCIsXHJcbiAgcmlwcGxlQ29sb3JEYXJrOiBcIlwiLFxyXG4gIHJpcHBsZUR1cmF0aW9uOiBcIjUwMG1zXCIsXHJcbiAgcmlwcGxlUmFkaXVzOiAwLFxyXG4gIHJpcHBsZVVuYm91bmQ6IGZhbHNlLFxyXG59O1xyXG5cclxuY29uc3QgRGVmYXVsdFR5cGUgPSB7XHJcbiAgcmlwcGxlQ2VudGVyZWQ6IFwiYm9vbGVhblwiLFxyXG4gIHJpcHBsZUNvbG9yOiBcInN0cmluZ1wiLFxyXG4gIHJpcHBsZUNvbG9yRGFyazogXCJzdHJpbmdcIixcclxuICByaXBwbGVEdXJhdGlvbjogXCJzdHJpbmdcIixcclxuICByaXBwbGVSYWRpdXM6IFwibnVtYmVyXCIsXHJcbiAgcmlwcGxlVW5ib3VuZDogXCJib29sZWFuXCIsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0Q2xhc3NlcyA9IHtcclxuICByaXBwbGU6IFwicmVsYXRpdmUgb3ZlcmZsb3ctaGlkZGVuIGlubGluZS1ibG9jayBhbGlnbi1ib3R0b21cIixcclxuICByaXBwbGVXYXZlOlxyXG4gICAgXCJyb3VuZGVkLVs1MCVdIG9wYWNpdHktNTAgcG9pbnRlci1ldmVudHMtbm9uZSBhYnNvbHV0ZSB0b3VjaC1ub25lIHNjYWxlLTAgdHJhbnNpdGlvbi1bdHJhbnNmb3JtLF9vcGFjaXR5XSBlYXNlLVtjdWJpYy1iZXppZXIoMCwwLDAuMTUsMSksX2N1YmljLWJlemllcigwLDAsMC4xNSwxKV0gei1bOTk5XVwiLFxyXG4gIHVuYm91bmQ6IFwib3ZlcmZsb3ctdmlzaWJsZVwiLFxyXG59O1xyXG5cclxuY29uc3QgRGVmYXVsdENsYXNzZXNUeXBlID0ge1xyXG4gIHJpcHBsZTogXCJzdHJpbmdcIixcclxuICByaXBwbGVXYXZlOiBcInN0cmluZ1wiLFxyXG4gIHVuYm91bmQ6IFwic3RyaW5nXCIsXHJcbn07XHJcblxyXG4vKlxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuQ2xhc3MgRGVmaW5pdGlvblxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuKi9cclxuXHJcbmNsYXNzIFJpcHBsZSB7XHJcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucywgY2xhc3Nlcykge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5fZ2V0Q29uZmlnKG9wdGlvbnMpO1xyXG4gICAgdGhpcy5fY2xhc3NlcyA9IHRoaXMuX2dldENsYXNzZXMoY2xhc3Nlcyk7XHJcbiAgICB0aGlzLl9jdXJyZW50Q29sb3IgPSB0aGlzLl9vcHRpb25zLnJpcHBsZUNvbG9yO1xyXG5cclxuICAgIGlmICh0aGlzLl9lbGVtZW50KSB7XHJcbiAgICAgIERhdGEuc2V0RGF0YShlbGVtZW50LCBEQVRBX0tFWSwgdGhpcyk7XHJcbiAgICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMucmlwcGxlKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NsaWNrSGFuZGxlciA9IHRoaXMuX2NyZWF0ZVJpcHBsZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fcmlwcGxlVGltZXIgPSBudWxsO1xyXG4gICAgdGhpcy5faXNNaW5XaWR0aFNldCA9IGZhbHNlO1xyXG4gICAgdGhpcy5faW5pdGlhbENsYXNzZXMgPSBudWxsO1xyXG5cclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0dGVyc1xyXG5cclxuICBzdGF0aWMgZ2V0IE5BTUUoKSB7XHJcbiAgICByZXR1cm4gTkFNRTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpY1xyXG5cclxuICBpbml0KCkge1xyXG4gICAgdGhpcy5fYWRkQ2xpY2tFdmVudCh0aGlzLl9lbGVtZW50KTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBEYXRhLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xyXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBcIm1vdXNlZG93blwiLCB0aGlzLl9jbGlja0hhbmRsZXIpO1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgICB0aGlzLl9vcHRpb25zID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIFByaXZhdGVcclxuXHJcbiAgX2F1dG9Jbml0KGV2ZW50KSB7XHJcbiAgICBTRUxFQ1RPUl9DT01QT05FTlQuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gU2VsZWN0b3JFbmdpbmUuY2xvc2VzdChldmVudC50YXJnZXQsIHNlbGVjdG9yKTtcclxuICAgICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5jbG9zZXN0KGV2ZW50LnRhcmdldCwgc2VsZWN0b3IpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQuc3R5bGUubWluV2lkdGgpIHtcclxuICAgICAgTWFuaXB1bGF0b3Iuc3R5bGUodGhpcy5fZWxlbWVudCwge1xyXG4gICAgICAgIFwibWluLXdpZHRoXCI6IGdldENvbXB1dGVkU3R5bGUodGhpcy5fZWxlbWVudCkud2lkdGgsXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLl9pc01pbldpZHRoU2V0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9vcHRpb25zID0gdGhpcy5fZ2V0Q29uZmlnKCk7XHJcbiAgICB0aGlzLl9jbGFzc2VzID0gdGhpcy5fZ2V0Q2xhc3NlcygpO1xyXG5cclxuICAgIHRoaXMuX2luaXRpYWxDbGFzc2VzID0gWy4uLnRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0XTtcclxuICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMucmlwcGxlKTtcclxuICAgIHRoaXMuX2NyZWF0ZVJpcHBsZShldmVudCk7XHJcbiAgfVxyXG5cclxuICBfYWRkQ2xpY2tFdmVudCh0YXJnZXQpIHtcclxuICAgIEV2ZW50SGFuZGxlci5vbih0YXJnZXQsIFwibW91c2Vkb3duXCIsIHRoaXMuX2NsaWNrSGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlUmlwcGxlKGV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZih0aGlzLl9jbGFzc2VzLnJpcHBsZSkgPCAwKSB7XHJcbiAgICAgIE1hbmlwdWxhdG9yLmFkZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX2NsYXNzZXMucmlwcGxlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IGxheWVyWCwgbGF5ZXJZIH0gPSBldmVudDtcclxuICAgIGNvbnN0IG9mZnNldFggPSBldmVudC5vZmZzZXRYIHx8IGxheWVyWDtcclxuICAgIGNvbnN0IG9mZnNldFkgPSBldmVudC5vZmZzZXRZIHx8IGxheWVyWTtcclxuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2VsZW1lbnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLl9lbGVtZW50Lm9mZnNldFdpZHRoO1xyXG4gICAgY29uc3QgZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvblRvTXNOdW1iZXIodGhpcy5fb3B0aW9ucy5yaXBwbGVEdXJhdGlvbik7XHJcbiAgICBjb25zdCBkaWFtZXRlck9wdGlvbnMgPSB7XHJcbiAgICAgIG9mZnNldFg6IHRoaXMuX29wdGlvbnMucmlwcGxlQ2VudGVyZWQgPyBoZWlnaHQgLyAyIDogb2Zmc2V0WCxcclxuICAgICAgb2Zmc2V0WTogdGhpcy5fb3B0aW9ucy5yaXBwbGVDZW50ZXJlZCA/IHdpZHRoIC8gMiA6IG9mZnNldFksXHJcbiAgICAgIGhlaWdodCxcclxuICAgICAgd2lkdGgsXHJcbiAgICB9O1xyXG4gICAgY29uc3QgZGlhbWV0ZXIgPSB0aGlzLl9nZXREaWFtZXRlcihkaWFtZXRlck9wdGlvbnMpO1xyXG4gICAgY29uc3QgcmFkaXVzVmFsdWUgPSB0aGlzLl9vcHRpb25zLnJpcHBsZVJhZGl1cyB8fCBkaWFtZXRlciAvIDI7XHJcblxyXG4gICAgY29uc3Qgb3BhY2l0eSA9IHtcclxuICAgICAgZGVsYXk6IGR1cmF0aW9uICogVFJBTlNJVElPTl9CUkVBS19PUEFDSVRZLFxyXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gLSBkdXJhdGlvbiAqIFRSQU5TSVRJT05fQlJFQUtfT1BBQ0lUWSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgc3R5bGVzID0ge1xyXG4gICAgICBsZWZ0OiB0aGlzLl9vcHRpb25zLnJpcHBsZUNlbnRlcmVkXHJcbiAgICAgICAgPyBgJHt3aWR0aCAvIDIgLSByYWRpdXNWYWx1ZX1weGBcclxuICAgICAgICA6IGAke29mZnNldFggLSByYWRpdXNWYWx1ZX1weGAsXHJcbiAgICAgIHRvcDogdGhpcy5fb3B0aW9ucy5yaXBwbGVDZW50ZXJlZFxyXG4gICAgICAgID8gYCR7aGVpZ2h0IC8gMiAtIHJhZGl1c1ZhbHVlfXB4YFxyXG4gICAgICAgIDogYCR7b2Zmc2V0WSAtIHJhZGl1c1ZhbHVlfXB4YCxcclxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLl9vcHRpb25zLnJpcHBsZVJhZGl1cyAqIDIgfHwgZGlhbWV0ZXJ9cHhgLFxyXG4gICAgICB3aWR0aDogYCR7dGhpcy5fb3B0aW9ucy5yaXBwbGVSYWRpdXMgKiAyIHx8IGRpYW1ldGVyfXB4YCxcclxuICAgICAgdHJhbnNpdGlvbkRlbGF5OiBgMHMsICR7b3BhY2l0eS5kZWxheX1tc2AsXHJcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogYCR7ZHVyYXRpb259bXMsICR7b3BhY2l0eS5kdXJhdGlvbn1tc2AsXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJpcHBsZUhUTUwgPSBlbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgIHRoaXMuX2NyZWF0ZUhUTUxSaXBwbGUoe1xyXG4gICAgICB3cmFwcGVyOiB0aGlzLl9lbGVtZW50LFxyXG4gICAgICByaXBwbGU6IHJpcHBsZUhUTUwsXHJcbiAgICAgIHN0eWxlcyxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fcmVtb3ZlSFRNTFJpcHBsZSh7IHJpcHBsZTogcmlwcGxlSFRNTCwgZHVyYXRpb24gfSk7XHJcbiAgfVxyXG5cclxuICBfY3JlYXRlSFRNTFJpcHBsZSh7IHdyYXBwZXIsIHJpcHBsZSwgc3R5bGVzIH0pIHtcclxuICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChcclxuICAgICAgKHByb3BlcnR5KSA9PiAocmlwcGxlLnN0eWxlW3Byb3BlcnR5XSA9IHN0eWxlc1twcm9wZXJ0eV0pXHJcbiAgICApO1xyXG4gICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3MocmlwcGxlLCB0aGlzLl9jbGFzc2VzLnJpcHBsZVdhdmUpO1xyXG4gICAgcmlwcGxlLnNldEF0dHJpYnV0ZShcImRhdGEtdHdlLXJpcHBsZS1yZWZcIiwgXCJcIik7XHJcbiAgICB0aGlzLl9hZGRDb2xvcihyaXBwbGUsIHdyYXBwZXIpO1xyXG5cclxuICAgIHRoaXMuX3RvZ2dsZVVuYm91bmQod3JhcHBlcik7XHJcbiAgICB0aGlzLl9hcHBlbmRSaXBwbGUocmlwcGxlLCB3cmFwcGVyKTtcclxuICB9XHJcblxyXG4gIF9yZW1vdmVIVE1MUmlwcGxlKHsgcmlwcGxlLCBkdXJhdGlvbiB9KSB7XHJcbiAgICBpZiAodGhpcy5fcmlwcGxlVGltZXIpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JpcHBsZVRpbWVyKTtcclxuICAgICAgdGhpcy5fcmlwcGxlVGltZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHJpcHBsZSkge1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICByaXBwbGUuY2xhc3NMaXN0LmFkZChcIiFvcGFjaXR5LTBcIik7XHJcbiAgICAgIH0sIDEwKTtcclxuICAgIH1cclxuICAgIHRoaXMuX3JpcHBsZVRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIGlmIChyaXBwbGUpIHtcclxuICAgICAgICByaXBwbGUucmVtb3ZlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnQpIHtcclxuICAgICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoXCJbZGF0YS10d2UtcmlwcGxlLXJlZl1cIiwgdGhpcy5fZWxlbWVudCkuZm9yRWFjaChcclxuICAgICAgICAgICAgKHJpcHBsZUVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmlwcGxlRWwucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBpZiAodGhpcy5faXNNaW5XaWR0aFNldCkge1xyXG4gICAgICAgICAgICBNYW5pcHVsYXRvci5zdHlsZSh0aGlzLl9lbGVtZW50LCB7IFwibWluLXdpZHRoXCI6IFwiXCIgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzTWluV2lkdGhTZXQgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIGNoZWNrIGlmIGFkZGVkIHJpcHBsZSBjbGFzc2VzIHdhc24ndCB0aGVyZSBpbml0aWFseVxyXG4gICAgICAgICAgY29uc3QgY2xhc3Nlc1RvUmVtb3ZlID0gdGhpcy5faW5pdGlhbENsYXNzZXNcclxuICAgICAgICAgICAgPyB0aGlzLl9hZGRlZE5ld1JpcHBsZUNsYXNzZXMoXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGFzc2VzLnJpcHBsZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxDbGFzc2VzXHJcbiAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICA6IHRoaXMuX2NsYXNzZXMucmlwcGxlLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgIE1hbmlwdWxhdG9yLnJlbW92ZUNsYXNzKHRoaXMuX2VsZW1lbnQsIGNsYXNzZXNUb1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCBkdXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICBfYWRkZWROZXdSaXBwbGVDbGFzc2VzKGRlZmF1bHRSaXBwbGUsIGluaXRpYWxDbGFzc2VzKSB7XHJcbiAgICByZXR1cm4gZGVmYXVsdFJpcHBsZVxyXG4gICAgICAuc3BsaXQoXCIgXCIpXHJcbiAgICAgIC5maWx0ZXIoXHJcbiAgICAgICAgKGl0ZW0pID0+IGluaXRpYWxDbGFzc2VzLmZpbmRJbmRleCgoaW5pdCkgPT4gaXRlbSA9PT0gaW5pdCkgPT09IC0xXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBfZHVyYXRpb25Ub01zTnVtYmVyKHRpbWUpIHtcclxuICAgIHJldHVybiBOdW1iZXIodGltZS5yZXBsYWNlKFwibXNcIiwgXCJcIikucmVwbGFjZShcInNcIiwgXCIwMDBcIikpO1xyXG4gIH1cclxuXHJcbiAgX2dldENvbmZpZyhjb25maWcgPSB7fSkge1xyXG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICBjb25maWcgPSB7XHJcbiAgICAgIC4uLkRlZmF1bHQsXHJcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxyXG4gICAgICAuLi5jb25maWcsXHJcbiAgICB9O1xyXG5cclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcclxuICAgIHJldHVybiBjb25maWc7XHJcbiAgfVxyXG5cclxuICBfZ2V0Q2xhc3NlcyhjbGFzc2VzID0ge30pIHtcclxuICAgIGNvbnN0IGRhdGFBdHRyaWJ1dGVzID0gTWFuaXB1bGF0b3IuZ2V0RGF0YUNsYXNzQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICBjbGFzc2VzID0ge1xyXG4gICAgICAuLi5EZWZhdWx0Q2xhc3NlcyxcclxuICAgICAgLi4uZGF0YUF0dHJpYnV0ZXMsXHJcbiAgICAgIC4uLmNsYXNzZXMsXHJcbiAgICB9O1xyXG5cclxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FLCBjbGFzc2VzLCBEZWZhdWx0Q2xhc3Nlc1R5cGUpO1xyXG5cclxuICAgIHJldHVybiBjbGFzc2VzO1xyXG4gIH1cclxuXHJcbiAgX2dldERpYW1ldGVyKHsgb2Zmc2V0WCwgb2Zmc2V0WSwgaGVpZ2h0LCB3aWR0aCB9KSB7XHJcbiAgICBjb25zdCB0b3AgPSBvZmZzZXRZIDw9IGhlaWdodCAvIDI7XHJcbiAgICBjb25zdCBsZWZ0ID0gb2Zmc2V0WCA8PSB3aWR0aCAvIDI7XHJcbiAgICBjb25zdCBweXRoYWdvcmVhbiA9IChzaWRlQSwgc2lkZUIpID0+IE1hdGguc3FydChzaWRlQSAqKiAyICsgc2lkZUIgKiogMik7XHJcblxyXG4gICAgY29uc3QgcG9zaXRpb25DZW50ZXIgPSBvZmZzZXRZID09PSBoZWlnaHQgLyAyICYmIG9mZnNldFggPT09IHdpZHRoIC8gMjtcclxuICAgIC8vIG1vdXNlIHBvc2l0aW9uIG9uIHRoZSBxdWFkcmFudHMgb2YgdGhlIGNvb3JkaW5hdGUgc3lzdGVtXHJcbiAgICBjb25zdCBxdWFkcmFudCA9IHtcclxuICAgICAgZmlyc3Q6IHRvcCA9PT0gdHJ1ZSAmJiBsZWZ0ID09PSBmYWxzZSxcclxuICAgICAgc2Vjb25kOiB0b3AgPT09IHRydWUgJiYgbGVmdCA9PT0gdHJ1ZSxcclxuICAgICAgdGhpcmQ6IHRvcCA9PT0gZmFsc2UgJiYgbGVmdCA9PT0gdHJ1ZSxcclxuICAgICAgZm91cnRoOiB0b3AgPT09IGZhbHNlICYmIGxlZnQgPT09IGZhbHNlLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBnZXRDb3JuZXIgPSB7XHJcbiAgICAgIHRvcExlZnQ6IHB5dGhhZ29yZWFuKG9mZnNldFgsIG9mZnNldFkpLFxyXG4gICAgICB0b3BSaWdodDogcHl0aGFnb3JlYW4od2lkdGggLSBvZmZzZXRYLCBvZmZzZXRZKSxcclxuICAgICAgYm90dG9tTGVmdDogcHl0aGFnb3JlYW4ob2Zmc2V0WCwgaGVpZ2h0IC0gb2Zmc2V0WSksXHJcbiAgICAgIGJvdHRvbVJpZ2h0OiBweXRoYWdvcmVhbih3aWR0aCAtIG9mZnNldFgsIGhlaWdodCAtIG9mZnNldFkpLFxyXG4gICAgfTtcclxuXHJcbiAgICBsZXQgZGlhbWV0ZXIgPSAwO1xyXG5cclxuICAgIGlmIChwb3NpdGlvbkNlbnRlciB8fCBxdWFkcmFudC5mb3VydGgpIHtcclxuICAgICAgZGlhbWV0ZXIgPSBnZXRDb3JuZXIudG9wTGVmdDtcclxuICAgIH0gZWxzZSBpZiAocXVhZHJhbnQudGhpcmQpIHtcclxuICAgICAgZGlhbWV0ZXIgPSBnZXRDb3JuZXIudG9wUmlnaHQ7XHJcbiAgICB9IGVsc2UgaWYgKHF1YWRyYW50LnNlY29uZCkge1xyXG4gICAgICBkaWFtZXRlciA9IGdldENvcm5lci5ib3R0b21SaWdodDtcclxuICAgIH0gZWxzZSBpZiAocXVhZHJhbnQuZmlyc3QpIHtcclxuICAgICAgZGlhbWV0ZXIgPSBnZXRDb3JuZXIuYm90dG9tTGVmdDtcclxuICAgIH1cclxuICAgIHJldHVybiBkaWFtZXRlciAqIDI7XHJcbiAgfVxyXG5cclxuICBfYXBwZW5kUmlwcGxlKHRhcmdldCwgcGFyZW50KSB7XHJcbiAgICBjb25zdCBGSVhfQUREX1JJUFBMRV9FRkZFQ1QgPSA1MDsgLy8gZGVsYXkgZm9yIGFjdGl2ZSBhbmltYXRpb25zXHJcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBNYW5pcHVsYXRvci5hZGRDbGFzcyh0YXJnZXQsIFwib3BhY2l0eS0wIHNjYWxlLTEwMFwiKTtcclxuICAgIH0sIEZJWF9BRERfUklQUExFX0VGRkVDVCk7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlVW5ib3VuZCh0YXJnZXQpIHtcclxuICAgIGlmICh0aGlzLl9vcHRpb25zLnJpcHBsZVVuYm91bmQgPT09IHRydWUpIHtcclxuICAgICAgTWFuaXB1bGF0b3IuYWRkQ2xhc3ModGFyZ2V0LCB0aGlzLl9jbGFzc2VzLnVuYm91bmQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgTWFuaXB1bGF0b3IucmVtb3ZlQ2xhc3ModGFyZ2V0LCB0aGlzLl9jbGFzc2VzLnVuYm91bmQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2FkZENvbG9yKHRhcmdldCkge1xyXG4gICAgbGV0IHJpcHBsZUNvbG9yID0gdGhpcy5fb3B0aW9ucy5yaXBwbGVDb2xvciB8fCBcInJnYigwLDAsMClcIjtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIGxvY2FsU3RvcmFnZS50aGVtZSA9PT0gXCJkYXJrXCIgfHxcclxuICAgICAgKCEoXCJ0aGVtZVwiIGluIGxvY2FsU3RvcmFnZSkgJiZcclxuICAgICAgICB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikubWF0Y2hlcylcclxuICAgICkge1xyXG4gICAgICByaXBwbGVDb2xvciA9IHRoaXMuX29wdGlvbnMucmlwcGxlQ29sb3JEYXJrIHx8IHRoaXMuX29wdGlvbnMucmlwcGxlQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgSVNfQk9PVFNUUkFQX0NPTE9SID0gQk9PVFNUUkFQX0NPTE9SUy5maW5kKFxyXG4gICAgICAoY29sb3IpID0+IGNvbG9yLm5hbWUgPT09IHJpcHBsZUNvbG9yLnRvTG93ZXJDYXNlKClcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgcmdiVmFsdWUgPSBJU19CT09UU1RSQVBfQ09MT1JcclxuICAgICAgPyB0aGlzLl9jb2xvclRvUkdCKElTX0JPT1RTVFJBUF9DT0xPUi5ncmFkaWVudENvbG9yKS5qb2luKFwiLFwiKVxyXG4gICAgICA6IHRoaXMuX2NvbG9yVG9SR0IocmlwcGxlQ29sb3IpLmpvaW4oXCIsXCIpO1xyXG5cclxuICAgIGNvbnN0IGdyYWRpZW50SW1hZ2UgPSBHUkFESUVOVC5zcGxpdChcInt7Y29sb3J9fVwiKS5qb2luKGAke3JnYlZhbHVlfWApO1xyXG4gICAgdGFyZ2V0LnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGByYWRpYWwtZ3JhZGllbnQoY2lyY2xlLCAke2dyYWRpZW50SW1hZ2V9KWA7XHJcbiAgfVxyXG5cclxuICBfY29sb3JUb1JHQihjb2xvcikge1xyXG4gICAgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcclxuICAgICAgY29uc3QgSEVYX0NPTE9SX0xFTkdUSCA9IDc7XHJcbiAgICAgIGNvbnN0IElTX1NIT1JUX0hFWCA9IGNvbG9yLmxlbmd0aCA8IEhFWF9DT0xPUl9MRU5HVEg7XHJcbiAgICAgIGlmIChJU19TSE9SVF9IRVgpIHtcclxuICAgICAgICBjb2xvciA9IGAjJHtjb2xvclsxXX0ke2NvbG9yWzFdfSR7Y29sb3JbMl19JHtjb2xvclsyXX0ke2NvbG9yWzNdfSR7Y29sb3JbM119YDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIHBhcnNlSW50KGNvbG9yLnN1YnN0cigxLCAyKSwgMTYpLFxyXG4gICAgICAgIHBhcnNlSW50KGNvbG9yLnN1YnN0cigzLCAyKSwgMTYpLFxyXG4gICAgICAgIHBhcnNlSW50KGNvbG9yLnN1YnN0cig1LCAyKSwgMTYpLFxyXG4gICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG5hbWVkQ29sb3JzVG9SZ2JhKGNvbG9yKSB7XHJcbiAgICAgIGNvbnN0IHRlbXBFbGVtID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChcclxuICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmljdHVtXCIpXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IGZsYWcgPSBcInJnYigxLCAyLCAzKVwiO1xyXG4gICAgICB0ZW1wRWxlbS5zdHlsZS5jb2xvciA9IGZsYWc7XHJcbiAgICAgIGlmICh0ZW1wRWxlbS5zdHlsZS5jb2xvciAhPT0gZmxhZykge1xyXG4gICAgICAgIHJldHVybiBERUZBVUxUX1JJUFBMRV9DT0xPUjtcclxuICAgICAgfVxyXG4gICAgICB0ZW1wRWxlbS5zdHlsZS5jb2xvciA9IGNvbG9yO1xyXG4gICAgICBpZiAodGVtcEVsZW0uc3R5bGUuY29sb3IgPT09IGZsYWcgfHwgdGVtcEVsZW0uc3R5bGUuY29sb3IgPT09IFwiXCIpIHtcclxuICAgICAgICByZXR1cm4gREVGQVVMVF9SSVBQTEVfQ09MT1I7XHJcbiAgICAgIH0gLy8gY29sb3IgcGFyc2UgZmFpbGVkXHJcbiAgICAgIGNvbG9yID0gZ2V0Q29tcHV0ZWRTdHlsZSh0ZW1wRWxlbSkuY29sb3I7XHJcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGVtcEVsZW0pO1xyXG4gICAgICByZXR1cm4gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmdiYVRvUmdiKGNvbG9yKSB7XHJcbiAgICAgIGNvbG9yID0gY29sb3IubWF0Y2goL1suXFxkXSsvZykubWFwKChhKSA9PiArTnVtYmVyKGEpKTtcclxuICAgICAgY29sb3IubGVuZ3RoID0gMztcclxuICAgICAgcmV0dXJuIGNvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb2xvci50b0xvd2VyQ2FzZSgpID09PSBcInRyYW5zcGFyZW50XCIpIHtcclxuICAgICAgcmV0dXJuIERFRkFVTFRfUklQUExFX0NPTE9SO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbG9yWzBdID09PSBcIiNcIikge1xyXG4gICAgICByZXR1cm4gaGV4VG9SZ2IoY29sb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbG9yLmluZGV4T2YoXCJyZ2JcIikgPT09IC0xKSB7XHJcbiAgICAgIGNvbG9yID0gbmFtZWRDb2xvcnNUb1JnYmEoY29sb3IpO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvbG9yLmluZGV4T2YoXCJyZ2JcIikgPT09IDApIHtcclxuICAgICAgcmV0dXJuIHJnYmFUb1JnYihjb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIERFRkFVTFRfUklQUExFX0NPTE9SO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljXHJcbiAgc3RhdGljIGF1dG9Jbml0aWFsKGluc3RhbmNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIGluc3RhbmNlLl9hdXRvSW5pdChldmVudCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IERhdGEuZ2V0RGF0YSh0aGlzLCBEQVRBX0tFWSk7XHJcbiAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmlwcGxlKHRoaXMsIG9wdGlvbnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKGVsZW1lbnQpIHtcclxuICAgIHJldHVybiBEYXRhLmdldERhdGEoZWxlbWVudCwgREFUQV9LRVkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE9yQ3JlYXRlSW5zdGFuY2UoZWxlbWVudCwgY29uZmlnID0ge30pIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuZ2V0SW5zdGFuY2UoZWxlbWVudCkgfHxcclxuICAgICAgbmV3IHRoaXMoZWxlbWVudCwgdHlwZW9mIGNvbmZpZyA9PT0gXCJvYmplY3RcIiA/IGNvbmZpZyA6IG51bGwpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmlwcGxlO1xyXG4iLCJpbXBvcnQgeyBpc1JUTCwgcmVmbG93LCB0eXBlQ2hlY2tDb25maWcgfSBmcm9tIFwiLi4vLi4vdXRpbC9pbmRleFwiO1xyXG5pbXBvcnQgRXZlbnRIYW5kbGVyIGZyb20gXCIuLi8uLi9kb20vZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgTWFuaXB1bGF0b3IgZnJvbSBcIi4uLy4uL2RvbS9tYW5pcHVsYXRvclwiO1xyXG5pbXBvcnQgU2VsZWN0b3JFbmdpbmUgZnJvbSBcIi4uLy4uL2RvbS9zZWxlY3Rvci1lbmdpbmVcIjtcclxuaW1wb3J0IFNjcm9sbEJhckhlbHBlciBmcm9tIFwiLi4vLi4vdXRpbC9zY3JvbGxiYXJcIjtcclxuaW1wb3J0IEJhc2VDb21wb25lbnQgZnJvbSBcIi4uLy4uL2Jhc2UtY29tcG9uZW50XCI7XHJcbmltcG9ydCBCYWNrZHJvcCBmcm9tIFwiLi4vLi4vdXRpbC9iYWNrZHJvcFwiO1xyXG5pbXBvcnQgRm9jdXNUcmFwIGZyb20gXCIuLi8uLi91dGlsL2ZvY3VzVHJhcFwiO1xyXG5cclxuaW1wb3J0IHsgZW5hYmxlRGlzbWlzc1RyaWdnZXIgfSBmcm9tIFwiLi4vLi4vdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zXCI7XHJcbmltcG9ydCB7IGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IH0gZnJvbSBcIi4uLy4uL3V0aWwvaW5kZXhcIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5Db25zdGFudHNcclxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiovXHJcblxyXG5jb25zdCBOQU1FID0gXCJtb2RhbFwiO1xyXG5jb25zdCBEQVRBX0tFWSA9IFwidHdlLm1vZGFsXCI7XHJcbmNvbnN0IEVWRU5UX0tFWSA9IGAuJHtEQVRBX0tFWX1gO1xyXG5jb25zdCBFU0NBUEVfS0VZID0gXCJFc2NhcGVcIjtcclxuXHJcbmNvbnN0IERlZmF1bHQgPSB7XHJcbiAgYmFja2Ryb3A6IHRydWUsXHJcbiAga2V5Ym9hcmQ6IHRydWUsXHJcbiAgZm9jdXM6IHRydWUsXHJcbn07XHJcblxyXG5jb25zdCBEZWZhdWx0VHlwZSA9IHtcclxuICBiYWNrZHJvcDogXCIoYm9vbGVhbnxzdHJpbmcpXCIsXHJcbiAga2V5Ym9hcmQ6IFwiYm9vbGVhblwiLFxyXG4gIGZvY3VzOiBcImJvb2xlYW5cIixcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRDbGFzc2VzID0ge1xyXG4gIHNob3c6IFwidHJhbnNmb3JtLW5vbmVcIixcclxuICBzdGF0aWM6IFwic2NhbGUtWzEuMDJdXCIsXHJcbiAgc3RhdGljUHJvcGVydGllczogXCJ0cmFuc2l0aW9uLXNjYWxlIGR1cmF0aW9uLTMwMCBlYXNlLWluLW91dFwiLFxyXG4gIGJhY2tkcm9wOlxyXG4gICAgXCJvcGFjaXR5LTUwIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBlYXNlLWluLW91dCBmaXhlZCB0b3AtMCBsZWZ0LTAgei1bMTA0MF0gYmctYmxhY2sgdy1zY3JlZW4gaC1zY3JlZW5cIixcclxufTtcclxuXHJcbmNvbnN0IERlZmF1bHRDbGFzc2VzVHlwZSA9IHtcclxuICBzaG93OiBcInN0cmluZ1wiLFxyXG4gIHN0YXRpYzogXCJzdHJpbmdcIixcclxuICBzdGF0aWNQcm9wZXJ0aWVzOiBcInN0cmluZ1wiLFxyXG4gIGJhY2tkcm9wOiBcInN0cmluZ1wiLFxyXG59O1xyXG5cclxuY29uc3QgRVZFTlRfSElERSA9IGBoaWRlJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfSElERV9QUkVWRU5URUQgPSBgaGlkZVByZXZlbnRlZCR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX0hJRERFTiA9IGBoaWRkZW4ke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XID0gYHNob3cke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX1JFU0laRSA9IGByZXNpemUke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9DTElDS19ESVNNSVNTID0gYGNsaWNrLmRpc21pc3Mke0VWRU5UX0tFWX1gO1xyXG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YDtcclxuY29uc3QgRVZFTlRfTU9VU0VVUF9ESVNNSVNTID0gYG1vdXNldXAuZGlzbWlzcyR7RVZFTlRfS0VZfWA7XHJcbmNvbnN0IEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTID0gYG1vdXNlZG93bi5kaXNtaXNzJHtFVkVOVF9LRVl9YDtcclxuXHJcbmNvbnN0IE9QRU5fU0VMRUNUT1JfQk9EWSA9IFwiZGF0YS10d2UtbW9kYWwtb3BlblwiO1xyXG5jb25zdCBPUEVOX1NFTEVDVE9SID0gXCJkYXRhLXR3ZS1vcGVuXCI7XHJcbmNvbnN0IFNFTEVDVE9SX0RJQUxPRyA9IFwiW2RhdGEtdHdlLW1vZGFsLWRpYWxvZy1yZWZdXCI7XHJcbmNvbnN0IFNFTEVDVE9SX01PREFMX0JPRFkgPSBcIltkYXRhLXR3ZS1tb2RhbC1ib2R5LXJlZl1cIjtcclxuXHJcbi8qXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5DbGFzcyBEZWZpbml0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4qL1xyXG5cclxuY2xhc3MgTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcsIGNsYXNzZXMpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQpO1xyXG5cclxuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xyXG4gICAgdGhpcy5fY2xhc3NlcyA9IHRoaXMuX2dldENsYXNzZXMoY2xhc3Nlcyk7XHJcbiAgICB0aGlzLl9iYWNrZHJvcCA9IHRoaXMuX2luaXRpYWxpemVCYWNrRHJvcCgpO1xyXG4gICAgdGhpcy5fZm9jdXN0cmFwID0gdGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpO1xyXG4gICAgdGhpcy5fc2Nyb2xsQmFyID0gbmV3IFNjcm9sbEJhckhlbHBlcigpO1xyXG5cclxuICAgIHRoaXMuX2RpYWxvZyA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRElBTE9HLCB0aGlzLl9lbGVtZW50KTtcclxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcclxuICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBmYWxzZTtcclxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fZGlkSW5pdCA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMuX2luaXQoKTtcclxuICB9XHJcblxyXG4gIC8vIEdldHRlcnNcclxuXHJcbiAgc3RhdGljIGdldCBOQU1FKCkge1xyXG4gICAgcmV0dXJuIE5BTUU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XHJcbiAgICByZXR1cm4gRGVmYXVsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgZ2V0RGVmYXVsdFR5cGUoKSB7XHJcbiAgICByZXR1cm4gRGVmYXVsdFR5cGU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWNcclxuXHJcbiAgdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcclxuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XHJcbiAgfVxyXG5cclxuICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcclxuICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVywge1xyXG4gICAgICByZWxhdGVkVGFyZ2V0LFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9pc1Nob3duID0gdHJ1ZTtcclxuXHJcbiAgICBpZiAodGhpcy5faXNBbmltYXRlZCgpKSB7XHJcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2Nyb2xsQmFyLmhpZGUoKTtcclxuXHJcbiAgICBkb2N1bWVudC5ib2R5LnNldEF0dHJpYnV0ZShPUEVOX1NFTEVDVE9SX0JPRFksIFwidHJ1ZVwiKTtcclxuXHJcbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcclxuXHJcbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xyXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcclxuXHJcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZGlhbG9nLCBFVkVOVF9NT1VTRURPV05fRElTTUlTUywgKCkgPT4ge1xyXG4gICAgICBFdmVudEhhbmRsZXIub25lKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFVVBfRElTTUlTUywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcy5fZWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XHJcbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUpO1xyXG5cclxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xyXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMuX2lzQW5pbWF0ZWQoKTtcclxuXHJcbiAgICBpZiAoaXNBbmltYXRlZCkge1xyXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XHJcbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xyXG5cclxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kaXNhYmxlKCk7XHJcblxyXG4gICAgY29uc3QgbW9kYWxEaWFsb2cgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgdGhpcy5fZWxlbWVudCk7XHJcbiAgICBtb2RhbERpYWxvZy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NsYXNzZXMuc2hvdyk7XHJcblxyXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTKTtcclxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZGlhbG9nLCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyk7XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZCk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShPUEVOX1NFTEVDVE9SKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBbd2luZG93LCBkb2N1bWVudCwgdGhpcy5fZGlhbG9nXS5mb3JFYWNoKChodG1sRWxlbWVudCkgPT5cclxuICAgICAgRXZlbnRIYW5kbGVyLm9mZihodG1sRWxlbWVudCwgRVZFTlRfS0VZKVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLl9iYWNrZHJvcC5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLl9mb2N1c3RyYXAuZGlzYWJsZSgpO1xyXG5cclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZVVwZGF0ZSgpIHtcclxuICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJpdmF0ZVxyXG5cclxuICBfaW5pdCgpIHtcclxuICAgIGlmICh0aGlzLl9kaWRJbml0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBlbmFibGVEaXNtaXNzVHJpZ2dlcihNb2RhbCk7XHJcblxyXG4gICAgdGhpcy5fZGlkSW5pdCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xyXG4gICAgcmV0dXJuIG5ldyBCYWNrZHJvcCh7XHJcbiAgICAgIGlzVmlzaWJsZTogQm9vbGVhbih0aGlzLl9jb25maWcuYmFja2Ryb3ApLCAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcclxuICAgICAgaXNBbmltYXRlZDogdGhpcy5faXNBbmltYXRlZCgpLFxyXG4gICAgICBiYWNrZHJvcENsYXNzZXM6IHRoaXMuX2NsYXNzZXMuYmFja2Ryb3AsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9pbml0aWFsaXplRm9jdXNUcmFwKCkge1xyXG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAodGhpcy5fZWxlbWVudCwge1xyXG4gICAgICBldmVudDogXCJrZXlkb3duXCIsXHJcbiAgICAgIGNvbmRpdGlvbjogKGV2ZW50KSA9PiBldmVudC5rZXkgPT09IFwiVGFiXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5faXNBbmltYXRlZCgpO1xyXG4gICAgY29uc3QgbW9kYWxCb2R5ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9NT0RBTF9CT0RZLCB0aGlzLl9kaWFsb2cpO1xyXG5cclxuICAgIGlmIChcclxuICAgICAgIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fFxyXG4gICAgICB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFXHJcbiAgICApIHtcclxuICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxyXG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLW1vZGFsXCIsIHRydWUpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiZGlhbG9nXCIpO1xyXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoYCR7T1BFTl9TRUxFQ1RPUn1gLCBcInRydWVcIik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XHJcblxyXG4gICAgY29uc3QgbW9kYWxEaWFsb2cgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgdGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgbW9kYWxEaWFsb2cuY2xhc3NMaXN0LmFkZCh0aGlzLl9jbGFzc2VzLnNob3cpO1xyXG4gICAgbW9kYWxEaWFsb2cuY2xhc3NMaXN0LnJlbW92ZShcIm9wYWNpdHktMFwiKTtcclxuICAgIG1vZGFsRGlhbG9nLmNsYXNzTGlzdC5hZGQoXCJvcGFjaXR5LTEwMFwiKTtcclxuXHJcbiAgICBpZiAobW9kYWxCb2R5KSB7XHJcbiAgICAgIG1vZGFsQm9keS5zY3JvbGxUb3AgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0FuaW1hdGVkKSB7XHJcbiAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0cmFuc2l0aW9uQ29tcGxldGUgPSAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLl9jb25maWcuZm9jdXMpIHtcclxuICAgICAgICB0aGlzLl9mb2N1c3RyYXAudHJhcCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcclxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04sIHtcclxuICAgICAgICByZWxhdGVkVGFyZ2V0LFxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayh0cmFuc2l0aW9uQ29tcGxldGUsIHRoaXMuX2RpYWxvZywgaXNBbmltYXRlZCk7XHJcbiAgfVxyXG5cclxuICBfc2V0RXNjYXBlRXZlbnQoKSB7XHJcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xyXG4gICAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkpIHtcclxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XHJcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfS0VZRE9XTl9ESVNNSVNTKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRSZXNpemVFdmVudCgpIHtcclxuICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX1JFU0laRSwgKCkgPT4gdGhpcy5fYWRqdXN0RGlhbG9nKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgRXZlbnRIYW5kbGVyLm9mZih3aW5kb3csIEVWRU5UX1JFU0laRSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfaGlkZU1vZGFsKCkge1xyXG4gICAgY29uc3QgbW9kYWxEaWFsb2cgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgdGhpcy5fZWxlbWVudCk7XHJcbiAgICBtb2RhbERpYWxvZy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NsYXNzZXMuc2hvdyk7XHJcbiAgICBtb2RhbERpYWxvZy5jbGFzc0xpc3QucmVtb3ZlKFwib3BhY2l0eS0xMDBcIik7XHJcbiAgICBtb2RhbERpYWxvZy5jbGFzc0xpc3QuYWRkKFwib3BhY2l0eS0wXCIpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWUgPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChtb2RhbERpYWxvZyk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgfSwgdHJhbnNpdGlvblRpbWUpO1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgdHJ1ZSk7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtbW9kYWxcIik7XHJcbiAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcInJvbGVcIik7XHJcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoKCkgPT4ge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUF0dHJpYnV0ZShPUEVOX1NFTEVDVE9SX0JPRFkpO1xyXG4gICAgICB0aGlzLl9yZXNldEFkanVzdG1lbnRzKCk7XHJcbiAgICAgIHRoaXMuX3Njcm9sbEJhci5yZXNldCgpO1xyXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XHJcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrKSB7XHJcbiAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCA9PT0gXCJzdGF0aWNcIikge1xyXG4gICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fYmFja2Ryb3Auc2hvdyhjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBfaXNBbmltYXRlZCgpIHtcclxuICAgIGNvbnN0IGFuaW1hdGUgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RJQUxPRywgdGhpcy5fZWxlbWVudCk7XHJcbiAgICByZXR1cm4gISFhbmltYXRlO1xyXG4gIH1cclxuXHJcbiAgX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKSB7XHJcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFX1BSRVZFTlRFRCk7XHJcbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgY2xhc3NMaXN0LCBzY3JvbGxIZWlnaHQsIHN0eWxlIH0gPSB0aGlzLl9lbGVtZW50O1xyXG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID1cclxuICAgICAgc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgICAvLyByZXR1cm4gaWYgdGhlIGZvbGxvd2luZyBiYWNrZ3JvdW5kIHRyYW5zaXRpb24gaGFzbid0IHlldCBjb21wbGV0ZWRcclxuICAgIGlmIChcclxuICAgICAgKCFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgc3R5bGUub3ZlcmZsb3dZID09PSBcImhpZGRlblwiKSB8fFxyXG4gICAgICBjbGFzc0xpc3QuY29udGFpbnModGhpcy5fY2xhc3Nlcy5zdGF0aWMpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNNb2RhbE92ZXJmbG93aW5nKSB7XHJcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9IFwiaGlkZGVuXCI7XHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3NMaXN0LmFkZCguLi50aGlzLl9jbGFzc2VzLnN0YXRpYy5zcGxpdChcIiBcIikpO1xyXG4gICAgY2xhc3NMaXN0LmFkZCguLi50aGlzLl9jbGFzc2VzLnN0YXRpY1Byb3BlcnRpZXMuc3BsaXQoXCIgXCIpKTtcclxuXHJcbiAgICBjb25zdCB0cmFuc2lzaXRpb25UaW1lID0gZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgIGNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY2xhc3Nlcy5zdGF0aWMpO1xyXG5cclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSguLi50aGlzLl9jbGFzc2VzLnN0YXRpY1Byb3BlcnRpZXMuc3BsaXQoXCIgXCIpKTtcclxuICAgICAgfSwgdHJhbnNpc2l0aW9uVGltZSk7XHJcblxyXG4gICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xyXG4gICAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4ge1xyXG4gICAgICAgICAgc3R5bGUub3ZlcmZsb3dZID0gXCJcIjtcclxuICAgICAgICB9LCB0aGlzLl9kaWFsb2cpO1xyXG4gICAgICB9XHJcbiAgICB9LCB0aGlzLl9kaWFsb2cpO1xyXG5cclxuICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcclxuICB9XHJcblxyXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XHJcbiAgICBjb25maWcgPSB7XHJcbiAgICAgIC4uLkRlZmF1bHQsXHJcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxyXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gXCJvYmplY3RcIiA/IGNvbmZpZyA6IHt9KSxcclxuICAgIH07XHJcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XHJcbiAgICByZXR1cm4gY29uZmlnO1xyXG4gIH1cclxuXHJcbiAgX2dldENsYXNzZXMoY2xhc3Nlcykge1xyXG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQ2xhc3NBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpO1xyXG5cclxuICAgIGNsYXNzZXMgPSB7XHJcbiAgICAgIC4uLkRlZmF1bHRDbGFzc2VzLFxyXG4gICAgICAuLi5kYXRhQXR0cmlidXRlcyxcclxuICAgICAgLi4uY2xhc3NlcyxcclxuICAgIH07XHJcblxyXG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUsIGNsYXNzZXMsIERlZmF1bHRDbGFzc2VzVHlwZSk7XHJcblxyXG4gICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgfVxyXG5cclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gIF9hZGp1c3REaWFsb2coKSB7XHJcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPVxyXG4gICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpO1xyXG4gICAgY29uc3QgaXNCb2R5T3ZlcmZsb3dpbmcgPSBzY3JvbGxiYXJXaWR0aCA+IDA7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAoIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSkgfHxcclxuICAgICAgKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgaXNSVEwoKSlcclxuICAgICkge1xyXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgIWlzUlRMKCkpIHx8XHJcbiAgICAgICghaXNCb2R5T3ZlcmZsb3dpbmcgJiYgaXNNb2RhbE92ZXJmbG93aW5nICYmIGlzUlRMKCkpXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBgJHtzY3JvbGxiYXJXaWR0aH1weGA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfcmVzZXRBZGp1c3RtZW50cygpIHtcclxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBcIlwiO1xyXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhdGljXHJcblxyXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgY29uc3QgZGF0YSA9IE1vZGFsLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTW9kYWw7XHJcbiIsImltcG9ydCBFdmVudEhhbmRsZXIgZnJvbSBcIi4uLy4uL2RvbS9ldmVudC1oYW5kbGVyXCI7XHJcbmltcG9ydCBTZWxlY3RvckVuZ2luZSBmcm9tIFwiLi4vLi4vZG9tL3NlbGVjdG9yLWVuZ2luZVwiO1xyXG5pbXBvcnQge1xyXG4gIGlzRGlzYWJsZWQsXHJcbiAgZ2V0RWxlbWVudEZyb21TZWxlY3RvcixcclxuICBpc1Zpc2libGUsXHJcbiAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCxcclxufSBmcm9tIFwiLi4vLi4vdXRpbFwiO1xyXG5cclxuY29uc3QgZHJvcGRvd25DYWxsYmFjayA9IChjb21wb25lbnQsIGluaXRTZWxlY3RvcikgPT4ge1xyXG4gIEV2ZW50SGFuZGxlci5vbihcclxuICAgIGRvY3VtZW50LFxyXG4gICAgYGNsaWNrLnR3ZS4ke2NvbXBvbmVudC5OQU1FfWAsXHJcbiAgICBpbml0U2VsZWN0b3IsXHJcbiAgICBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykudG9nZ2xlKCk7XHJcbiAgICB9XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IHRhYkNhbGxiYWNrID0gKGNvbXBvbmVudCwgaW5pdFNlbGVjdG9yKSA9PiB7XHJcbiAgRXZlbnRIYW5kbGVyLm9uKFxyXG4gICAgZG9jdW1lbnQsXHJcbiAgICBgY2xpY2sudHdlLiR7Y29tcG9uZW50Lk5BTUV9LmRhdGEtYXBpYCxcclxuICAgIGluaXRTZWxlY3RvcixcclxuICAgIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBpZiAoW1wiQVwiLCBcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBkYXRhID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XHJcbiAgICAgIGRhdGEuc2hvdygpO1xyXG4gICAgfVxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCBvZmZjYW52YXNDYWxsYmFjayA9IChjb21wb25lbnQsIGluaXRTZWxlY3RvcikgPT4ge1xyXG4gIEV2ZW50SGFuZGxlci5vbihcclxuICAgIGRvY3VtZW50LFxyXG4gICAgYGNsaWNrLnR3ZS4ke2NvbXBvbmVudC5OQU1FfS5kYXRhLWFwaWAsXHJcbiAgICBpbml0U2VsZWN0b3IsXHJcbiAgICBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKTtcclxuXHJcbiAgICAgIGlmIChbXCJBXCIsIFwiQVJFQVwiXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBjb21wb25lbnQuRVZFTlRfSElEREVOLCAoKSA9PiB7XHJcbiAgICAgICAgLy8gZm9jdXMgb24gdHJpZ2dlciB3aGVuIGl0IGlzIGNsb3NlZFxyXG4gICAgICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcclxuICAgICAgICAgIHRoaXMuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBhIHRvZ2dsZXIgb2YgYW4gb2ZmY2FudmFzLCB3aGlsZSBhbm90aGVyIGlzIG9wZW5cclxuICAgICAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShjb21wb25lbnQuT1BFTl9TRUxFQ1RPUik7XHJcbiAgICAgIGlmIChhbGxSZWFkeU9wZW4gJiYgYWxsUmVhZHlPcGVuICE9PSB0YXJnZXQpIHtcclxuICAgICAgICBjb21wb25lbnQuZ2V0SW5zdGFuY2UoYWxsUmVhZHlPcGVuKS5oaWRlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRhdGEgPSBjb21wb25lbnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpO1xyXG4gICAgICBkYXRhLnRvZ2dsZSh0aGlzKTtcclxuICAgIH1cclxuICApO1xyXG59O1xyXG5cclxuY29uc3QgYnV0dG9uQ2FsbGJhY2sgPSAoY29tcG9uZW50LCBpbml0U2VsZWN0b3IpID0+IHtcclxuICBFdmVudEhhbmRsZXIub24oXHJcbiAgICBkb2N1bWVudCxcclxuICAgIGBjbGljay50d2UuJHtjb21wb25lbnQuTkFNRX1gLFxyXG4gICAgaW5pdFNlbGVjdG9yLFxyXG4gICAgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICBjb25zdCBidXR0b24gPSBldmVudC50YXJnZXQuY2xvc2VzdChpbml0U2VsZWN0b3IpO1xyXG4gICAgICBjb25zdCBkYXRhID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UoYnV0dG9uKTtcclxuXHJcbiAgICAgIGRhdGEudG9nZ2xlKCk7XHJcbiAgICB9XHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IHJpcHBsZUNhbGxiYWNrID0gKGNvbXBvbmVudCwgaW5pdFNlbGVjdG9yKSA9PiB7XHJcbiAgRXZlbnRIYW5kbGVyLm9uZShcclxuICAgIGRvY3VtZW50LFxyXG4gICAgXCJtb3VzZWRvd25cIixcclxuICAgIGluaXRTZWxlY3RvcixcclxuICAgIGNvbXBvbmVudC5hdXRvSW5pdGlhbChuZXcgY29tcG9uZW50KCkpXHJcbiAgKTtcclxufTtcclxuXHJcbmNvbnN0IGNvbGxhcHNlQ2FsbGJhY2sgPSAoY29tcG9uZW50LCBpbml0U2VsZWN0b3IpID0+IHtcclxuICBFdmVudEhhbmRsZXIub24oXHJcbiAgICBkb2N1bWVudCxcclxuICAgIGBjbGljay50d2UuJHtjb21wb25lbnQuTkFNRX0uZGF0YS1hcGlgLFxyXG4gICAgaW5pdFNlbGVjdG9yLFxyXG4gICAgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcclxuICAgICAgaWYgKFxyXG4gICAgICAgIGV2ZW50LnRhcmdldC50YWdOYW1lID09PSBcIkFcIiB8fFxyXG4gICAgICAgIChldmVudC5kZWxlZ2F0ZVRhcmdldCAmJiBldmVudC5kZWxlZ2F0ZVRhcmdldC50YWdOYW1lID09PSBcIkFcIilcclxuICAgICAgKSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xyXG4gICAgICBjb25zdCBzZWxlY3RvckVsZW1lbnRzID0gU2VsZWN0b3JFbmdpbmUuZmluZChzZWxlY3Rvcik7XHJcblxyXG4gICAgICBzZWxlY3RvckVsZW1lbnRzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBjb21wb25lbnQuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCB7IHRvZ2dsZTogZmFsc2UgfSkudG9nZ2xlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICk7XHJcbn07XHJcblxyXG5jb25zdCB0b29sdGlwc0NhbGxiYWNrID0gKGNvbXBvbmVudCwgaW5pdFNlbGVjdG9yKSA9PiB7XHJcbiAgY29uc3QgdG9vbHRpcFRyaWdnZXJMaXN0ID0gW10uc2xpY2UuY2FsbChcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaW5pdFNlbGVjdG9yKVxyXG4gICk7XHJcbiAgdG9vbHRpcFRyaWdnZXJMaXN0Lm1hcChmdW5jdGlvbiAodG9vbHRpcFRyaWdnZXJFbCkge1xyXG4gICAgcmV0dXJuIG5ldyBjb21wb25lbnQodG9vbHRpcFRyaWdnZXJFbCk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG5jb25zdCBwb3BvdmVyQ2FsbGJhY2sgPSAoY29tcG9uZW50LCBpbml0U2VsZWN0b3IpID0+IHtcclxuICBjb25zdCBwb3BvdmVyVHJpZ2dlckxpc3QgPSBbXS5zbGljZS5jYWxsKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChpbml0U2VsZWN0b3IpXHJcbiAgKTtcclxuICBwb3BvdmVyVHJpZ2dlckxpc3QubWFwKGZ1bmN0aW9uIChwb3BvdmVyVHJpZ2dlckVsKSB7XHJcbiAgICByZXR1cm4gbmV3IGNvbXBvbmVudChwb3BvdmVyVHJpZ2dlckVsKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IG1vZGFsQ2FsbGJhY2sgPSAoY29tcG9uZW50LCBpbml0U2VsZWN0b3IpID0+IHtcclxuICBFdmVudEhhbmRsZXIub24oXHJcbiAgICBkb2N1bWVudCxcclxuICAgIGBjbGljay50d2UuJHtjb21wb25lbnQuTkFNRX1gLFxyXG4gICAgaW5pdFNlbGVjdG9yLFxyXG4gICAgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XHJcblxyXG4gICAgICBpZiAoW1wiQVwiLCBcIkFSRUFcIl0uaW5jbHVkZXModGhpcy50YWdOYW1lKSkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGFyZ2V0LCBjb21wb25lbnQuRVZFTlRfU0hPVywgKHNob3dFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xyXG4gICAgICAgICAgLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIGNvbXBvbmVudC5FVkVOVF9ISURERU4sICgpID0+IHtcclxuICAgICAgICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcclxuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGF2b2lkIGNvbmZsaWN0IHdoZW4gY2xpY2tpbmcgbW9kZGFsIHRvZ2dsZXIgd2hpbGUgYW5vdGhlciBvbmUgaXMgb3BlblxyXG4gICAgICBjb25zdCBhbGxSZWFkeU9wZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFxyXG4gICAgICAgIGBbJHtjb21wb25lbnQuT1BFTl9TRUxFQ1RPUn09XCJ0cnVlXCJdYFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoYWxsUmVhZHlPcGVuKSB7XHJcbiAgICAgICAgY29tcG9uZW50LmdldEluc3RhbmNlKGFsbFJlYWR5T3BlbikuaGlkZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBkYXRhID0gY29tcG9uZW50LmdldE9yQ3JlYXRlSW5zdGFuY2UodGFyZ2V0KTtcclxuXHJcbiAgICAgIGRhdGEudG9nZ2xlKHRoaXMpO1xyXG4gICAgfVxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIGRyb3Bkb3duQ2FsbGJhY2ssXHJcbiAgdGFiQ2FsbGJhY2ssXHJcbiAgb2ZmY2FudmFzQ2FsbGJhY2ssXHJcbiAgYnV0dG9uQ2FsbGJhY2ssXHJcbiAgcmlwcGxlQ2FsbGJhY2ssXHJcbiAgY29sbGFwc2VDYWxsYmFjayxcclxuICB0b29sdGlwc0NhbGxiYWNrLFxyXG4gIHBvcG92ZXJDYWxsYmFjayxcclxuICBtb2RhbENhbGxiYWNrLFxyXG59O1xyXG4iLCJpbXBvcnQge1xyXG4gIGRyb3Bkb3duQ2FsbGJhY2ssXHJcbiAgb2ZmY2FudmFzQ2FsbGJhY2ssXHJcbiAgdGFiQ2FsbGJhY2ssXHJcbiAgYnV0dG9uQ2FsbGJhY2ssXHJcbiAgcmlwcGxlQ2FsbGJhY2ssXHJcbiAgY29sbGFwc2VDYWxsYmFjayxcclxuICB0b29sdGlwc0NhbGxiYWNrLFxyXG4gIHBvcG92ZXJDYWxsYmFjayxcclxuICBtb2RhbENhbGxiYWNrLFxyXG59IGZyb20gXCIuLi9jYWxsYmFja3MvZnJlZVwiO1xyXG5cclxuY29uc3QgZGVmYXVsdEluaXRTZWxlY3RvcnMgPSB7XHJcbiAgY2Fyb3VzZWw6IHtcclxuICAgIG5hbWU6IFwiQ2Fyb3VzZWxcIixcclxuICAgIHNlbGVjdG9yOiBcIltkYXRhLXR3ZS1jYXJvdXNlbC1pbml0XVwiLFxyXG4gICAgaXNUb2dnbGVyOiBmYWxzZSxcclxuICB9LFxyXG4gIGlucHV0OiB7XHJcbiAgICBuYW1lOiBcIklucHV0XCIsXHJcbiAgICBzZWxlY3RvcjogXCJbZGF0YS10d2UtaW5wdXQtd3JhcHBlci1pbml0XVwiLFxyXG4gICAgaXNUb2dnbGVyOiBmYWxzZSxcclxuICB9LFxyXG4gIHNjcm9sbHNweToge1xyXG4gICAgbmFtZTogXCJTY3JvbGxTcHlcIixcclxuICAgIHNlbGVjdG9yOiBcIltkYXRhLXR3ZS1zcHk9J3Njcm9sbCddXCIsXHJcbiAgICBpc1RvZ2dsZXI6IGZhbHNlLFxyXG4gIH0sXHJcblxyXG4gIC8vIHRvZ2dsZXJzXHJcbiAgYnV0dG9uOiB7XHJcbiAgICBuYW1lOiBcIkJ1dHRvblwiLFxyXG4gICAgc2VsZWN0b3I6IFwiW2RhdGEtdHdlLXRvZ2dsZT0nYnV0dG9uJ11cIixcclxuICAgIGlzVG9nZ2xlcjogdHJ1ZSxcclxuICAgIGNhbGxiYWNrOiBidXR0b25DYWxsYmFjayxcclxuICB9LFxyXG4gIGNvbGxhcHNlOiB7XHJcbiAgICBuYW1lOiBcIkNvbGxhcHNlXCIsXHJcbiAgICBzZWxlY3RvcjogXCJbZGF0YS10d2UtY29sbGFwc2UtaW5pdF1cIixcclxuICAgIGlzVG9nZ2xlcjogdHJ1ZSxcclxuICAgIGNhbGxiYWNrOiBjb2xsYXBzZUNhbGxiYWNrLFxyXG4gIH0sXHJcbiAgZHJvcGRvd246IHtcclxuICAgIG5hbWU6IFwiRHJvcGRvd25cIixcclxuICAgIHNlbGVjdG9yOiBcIltkYXRhLXR3ZS1kcm9wZG93bi10b2dnbGUtcmVmXVwiLFxyXG4gICAgaXNUb2dnbGVyOiB0cnVlLFxyXG4gICAgY2FsbGJhY2s6IGRyb3Bkb3duQ2FsbGJhY2ssXHJcbiAgfSxcclxuICByaXBwbGU6IHtcclxuICAgIG5hbWU6IFwiUmlwcGxlXCIsXHJcbiAgICBzZWxlY3RvcjogXCJbZGF0YS10d2UtcmlwcGxlLWluaXRdXCIsXHJcbiAgICBpc1RvZ2dsZXI6IHRydWUsXHJcbiAgICBjYWxsYmFjazogcmlwcGxlQ2FsbGJhY2ssXHJcbiAgfSxcclxuICBvZmZjYW52YXM6IHtcclxuICAgIG5hbWU6IFwiT2ZmY2FudmFzXCIsXHJcbiAgICBzZWxlY3RvcjogXCJbZGF0YS10d2Utb2ZmY2FudmFzLXRvZ2dsZV1cIixcclxuICAgIGlzVG9nZ2xlcjogdHJ1ZSxcclxuICAgIGNhbGxiYWNrOiBvZmZjYW52YXNDYWxsYmFjayxcclxuICB9LFxyXG4gIHRhYjoge1xyXG4gICAgbmFtZTogXCJUYWJcIixcclxuICAgIHNlbGVjdG9yOlxyXG4gICAgICBcIltkYXRhLXR3ZS10b2dnbGU9J3RhYiddLCBbZGF0YS10d2UtdG9nZ2xlPSdwaWxsJ10sIFtkYXRhLXR3ZS10b2dnbGU9J2xpc3QnXVwiLFxyXG4gICAgaXNUb2dnbGVyOiB0cnVlLFxyXG4gICAgY2FsbGJhY2s6IHRhYkNhbGxiYWNrLFxyXG4gIH0sXHJcbiAgdG9vbHRpcDoge1xyXG4gICAgbmFtZTogXCJUb29sdGlwXCIsXHJcbiAgICBzZWxlY3RvcjogXCJbZGF0YS10d2UtdG9nZ2xlPSd0b29sdGlwJ11cIixcclxuICAgIGlzVG9nZ2xlcjogZmFsc2UsXHJcbiAgICBjYWxsYmFjazogdG9vbHRpcHNDYWxsYmFjayxcclxuICB9LFxyXG4gIHBvcG92ZXI6IHtcclxuICAgIG5hbWU6IFwiUG9wb3ZlclwiLFxyXG4gICAgc2VsZWN0b3I6IFwiW2RhdGEtdHdlLXRvZ2dsZT0ncG9wb3ZlciddXCIsXHJcbiAgICBpc1RvZ2dsZXI6IHRydWUsXHJcbiAgICBjYWxsYmFjazogcG9wb3ZlckNhbGxiYWNrLFxyXG4gIH0sXHJcbiAgbW9kYWw6IHtcclxuICAgIG5hbWU6IFwiTW9kYWxcIixcclxuICAgIHNlbGVjdG9yOiBcIltkYXRhLXR3ZS10b2dnbGU9J21vZGFsJ11cIixcclxuICAgIGlzVG9nZ2xlcjogdHJ1ZSxcclxuICAgIGNhbGxiYWNrOiBtb2RhbENhbGxiYWNrLFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0SW5pdFNlbGVjdG9ycztcclxuIiwiaW1wb3J0IHsgZ2V0alF1ZXJ5LCBvbkRPTUNvbnRlbnRMb2FkZWQgfSBmcm9tIFwiLi4vdXRpbC9pbmRleFwiO1xyXG5cclxuY29uc3QganF1ZXJ5SW5pdCA9IChwbHVnaW4pID0+IHtcclxuICBvbkRPTUNvbnRlbnRMb2FkZWQoKCkgPT4ge1xyXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpO1xyXG5cclxuICAgIGlmICgkKSB7XHJcbiAgICAgIGNvbnN0IG5hbWUgPSBwbHVnaW4uTkFNRTtcclxuICAgICAgY29uc3QgSlFVRVJZX05PX0NPTkZMSUNUID0gJC5mbltuYW1lXTtcclxuICAgICAgJC5mbltuYW1lXSA9IHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XHJcbiAgICAgICQuZm5bbmFtZV0uQ29uc3RydWN0b3IgPSBwbHVnaW47XHJcbiAgICAgICQuZm5bbmFtZV0ubm9Db25mbGljdCA9ICgpID0+IHtcclxuICAgICAgICAkLmZuW25hbWVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xyXG4gICAgICAgIHJldHVybiBwbHVnaW4ualF1ZXJ5SW50ZXJmYWNlO1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQganF1ZXJ5SW5pdDtcclxuIiwiY2xhc3MgSW5pdFJlZ2lzdGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaW5pdHMgPSBbXTtcclxuICB9XHJcblxyXG4gIGdldCBpbml0aWFsaXplZCgpIHtcclxuICAgIHJldHVybiB0aGlzLmluaXRzO1xyXG4gIH1cclxuXHJcbiAgaXNJbml0ZWQoY29tcG9uZW50TmFtZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5pdHMuaW5jbHVkZXMoY29tcG9uZW50TmFtZSk7XHJcbiAgfVxyXG5cclxuICBhZGQoY29tcG9uZW50TmFtZSkge1xyXG4gICAgaWYgKCF0aGlzLmlzSW5pdGVkKGNvbXBvbmVudE5hbWUpKSB7XHJcbiAgICAgIHRoaXMuaW5pdHMucHVzaChjb21wb25lbnROYW1lKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluaXRSZWdpc3RlcjtcclxuIiwiaW1wb3J0IFNlbGVjdG9yRW5naW5lIGZyb20gXCIuLi9kb20vc2VsZWN0b3ItZW5naW5lXCI7XHJcbmltcG9ydCBqcXVlcnlJbml0IGZyb20gXCIuL2pxdWVyeUluaXRcIjtcclxuXHJcbi8vIGtleSA9PiBjb21wb25lbnQgTkFNRSBjb25zdGFudFxyXG4vLyBuYW1lID0+IGNvbXBvbmVudCBleHBvcnRlZCBieSBuYW1lXHJcbmltcG9ydCBJbml0UmVnaXN0ZXIgZnJvbSBcIi4vUmVnaXN0ZXJcIjtcclxuXHJcbmNvbnN0IHJlZ2lzdGVyID0gbmV3IEluaXRSZWdpc3RlcigpO1xyXG5sZXQgX2RlZmF1bHRJbml0U2VsZWN0b3JzO1xyXG5cclxuY29uc3QgZ2V0Q29tcG9uZW50RGF0YSA9IChjb21wb25lbnQpID0+IHtcclxuICByZXR1cm4gX2RlZmF1bHRJbml0U2VsZWN0b3JzW2NvbXBvbmVudC5OQU1FXSB8fCBudWxsO1xyXG59O1xyXG5cclxuY29uc3QgaW5pdENvbXBvbmVudCA9IChjb21wb25lbnQsIG9wdGlvbnMpID0+IHtcclxuICBpZiAoXHJcbiAgICAhY29tcG9uZW50IHx8XHJcbiAgICAoIW9wdGlvbnMuYWxsb3dSZWluaXRzICYmIHJlZ2lzdGVyLmlzSW5pdGVkKGNvbXBvbmVudC5OQU1FKSlcclxuICApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyLmFkZChjb21wb25lbnQuTkFNRSk7XHJcblxyXG4gIGNvbnN0IHRoaXNDb21wb25lbnQgPSBnZXRDb21wb25lbnREYXRhKGNvbXBvbmVudCk7XHJcbiAgY29uc3QgaXNUb2dnbGVyID0gdGhpc0NvbXBvbmVudD8uaXNUb2dnbGVyIHx8IGZhbHNlO1xyXG5cclxuICBqcXVlcnlJbml0KGNvbXBvbmVudCk7XHJcblxyXG4gIGlmICh0aGlzQ29tcG9uZW50Py5hZHZhbmNlZCkge1xyXG4gICAgdGhpc0NvbXBvbmVudD8uYWR2YW5jZWQoY29tcG9uZW50LCB0aGlzQ29tcG9uZW50Py5zZWxlY3Rvcik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoaXNUb2dnbGVyKSB7XHJcbiAgICB0aGlzQ29tcG9uZW50Py5jYWxsYmFjayhjb21wb25lbnQsIHRoaXNDb21wb25lbnQ/LnNlbGVjdG9yKTtcclxuXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBTZWxlY3RvckVuZ2luZS5maW5kKHRoaXNDb21wb25lbnQ/LnNlbGVjdG9yKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICBsZXQgaW5zdGFuY2UgPSBjb21wb25lbnQuZ2V0SW5zdGFuY2UoZWxlbWVudCk7XHJcbiAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgIGluc3RhbmNlID0gbmV3IGNvbXBvbmVudChlbGVtZW50KTtcclxuICAgICAgaWYgKHRoaXNDb21wb25lbnQ/Lm9uSW5pdCkge1xyXG4gICAgICAgIGluc3RhbmNlW3RoaXNDb21wb25lbnQub25Jbml0XSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyBjb25zdCBpbml0ID0gKGNvbXBvbmVudHMsIG9wdGlvbnMpID0+IHtcclxuLy8gICBjb21wb25lbnRzLmZvckVhY2goKGNvbXBvbmVudCkgPT4gaW5pdENvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMpKTtcclxuLy8gfTtcclxuXHJcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xyXG4gIGFsbG93UmVpbml0czogZmFsc2UsXHJcbiAgY2hlY2tPdGhlckltcG9ydHM6IGZhbHNlLFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIEluaXRUV0Uge1xyXG4gIGNvbnN0cnVjdG9yKGRlZmF1bHRJbml0U2VsZWN0b3JzKSB7XHJcbiAgICBfZGVmYXVsdEluaXRTZWxlY3RvcnMgPSBkZWZhdWx0SW5pdFNlbGVjdG9ycztcclxuICB9XHJcblxyXG4gIGluaXQgPSAoY29tcG9uZW50cywgb3B0aW9ucykgPT4ge1xyXG4gICAgY29tcG9uZW50cy5mb3JFYWNoKChjb21wb25lbnQpID0+IGluaXRDb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zKSk7XHJcbiAgfTtcclxuXHJcbiAgaW5pdFRXRSA9IChjb21wb25lbnRzLCBvcHRpb25zKSA9PiB7XHJcbiAgICBjb25zdCBpbml0T3B0aW9ucyA9IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfTtcclxuXHJcbiAgICBjb25zdCBjb21wb25lbnRMaXN0ID0gT2JqZWN0LmtleXMoX2RlZmF1bHRJbml0U2VsZWN0b3JzKS5tYXAoKGVsZW1lbnQpID0+IHtcclxuICAgICAgY29uc3QgcmVxdWlyZUF1dG9pbml0ID0gQm9vbGVhbihcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKF9kZWZhdWx0SW5pdFNlbGVjdG9yc1tlbGVtZW50XS5zZWxlY3RvcilcclxuICAgICAgKTtcclxuICAgICAgaWYgKHJlcXVpcmVBdXRvaW5pdCkge1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbX2RlZmF1bHRJbml0U2VsZWN0b3JzW2VsZW1lbnRdLm5hbWVdO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICFjb21wb25lbnQgJiZcclxuICAgICAgICAgICFyZWdpc3Rlci5pc0luaXRlZChlbGVtZW50KSAmJlxyXG4gICAgICAgICAgaW5pdE9wdGlvbnMuY2hlY2tPdGhlckltcG9ydHNcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgYFBsZWFzZSBpbXBvcnQgJHtfZGVmYXVsdEluaXRTZWxlY3RvcnNbZWxlbWVudF0ubmFtZX0gZnJvbSBcInR3LWVsZW1lbnRzXCIgcGFja2FnZSBhbmQgYWRkIGl0IHRvIGEgb2JqZWN0IHBhcmFtZXRlciBpbnNpZGUgXCJpbml0VFdFXCIgZnVuY3Rpb25gXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmluaXQoY29tcG9uZW50TGlzdCwgaW5pdE9wdGlvbnMpO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluaXRUV0U7XHJcbiIsImltcG9ydCBkZWZhdWx0SW5pdFNlbGVjdG9ycyBmcm9tIFwiLi9pbml0U2VsZWN0b3JzL2ZyZWVcIjtcclxuaW1wb3J0IHsgSW5pdFRXRSB9IGZyb20gXCIuL2luZGV4XCI7XHJcblxyXG5jb25zdCBpbml0VFdFSW5zdGFuY2UgPSBuZXcgSW5pdFRXRShkZWZhdWx0SW5pdFNlbGVjdG9ycyk7XHJcbmNvbnN0IGluaXRUV0UgPSBpbml0VFdFSW5zdGFuY2UuaW5pdFRXRTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGluaXRUV0U7XHJcbiJdLCJuYW1lcyI6WyJtYXBEYXRhIiwic3RvcmVEYXRhIiwiaWQiLCJzZXQiLCJlbGVtZW50Iiwia2V5IiwiZGF0YSIsImdldCIsImtleVByb3BlcnRpZXMiLCJkZWxldGUiLCJEYXRhIiwic2V0RGF0YSIsImluc3RhbmNlIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJNQVhfVUlEIiwiTUlMTElTRUNPTkRTX01VTFRJUExJRVIiLCJUUkFOU0lUSU9OX0VORCIsInRvVHlwZSIsIm9iaiIsInRvU3RyaW5nIiwiY2FsbCIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJnZXRVSUQiLCJwcmVmaXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3IiLCJzZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsImhyZWZBdHRyIiwiaW5jbHVkZXMiLCJzdGFydHNXaXRoIiwic3BsaXQiLCJ0cmltIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRFbGVtZW50RnJvbVNlbGVjdG9yIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiZmxvYXRUcmFuc2l0aW9uRHVyYXRpb24iLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwiZmxvYXRUcmFuc2l0aW9uRGVsYXkiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsImlzRWxlbWVudCIsImpxdWVyeSIsIm5vZGVUeXBlIiwiZ2V0RWxlbWVudCIsImxlbmd0aCIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJleHBlY3RlZFR5cGVzIiwidmFsdWUiLCJ2YWx1ZVR5cGUiLCJSZWdFeHAiLCJ0ZXN0IiwiRXJyb3IiLCJ0b1VwcGVyQ2FzZSIsImlzVmlzaWJsZSIsInN0eWxlIiwicGFyZW50Tm9kZSIsImVsZW1lbnRTdHlsZSIsInBhcmVudE5vZGVTdHlsZSIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5IiwiaXNEaXNhYmxlZCIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImRpc2FibGVkIiwiaGFzQXR0cmlidXRlIiwiZmluZFNoYWRvd1Jvb3QiLCJkb2N1bWVudEVsZW1lbnQiLCJhdHRhY2hTaGFkb3ciLCJnZXRSb290Tm9kZSIsInJvb3QiLCJTaGFkb3dSb290Iiwibm9vcCIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsImdldGpRdWVyeSIsImpRdWVyeSIsImJvZHkiLCJET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzIiwib25ET01Db250ZW50TG9hZGVkIiwiY2FsbGJhY2siLCJyZWFkeVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInB1c2giLCJpc1JUTCIsImRpciIsInRhZyIsImNyZWF0ZUVsZW1lbnQiLCJleGVjdXRlIiwiZXhlY3V0ZUFmdGVyVHJhbnNpdGlvbiIsInRyYW5zaXRpb25FbGVtZW50Iiwid2FpdEZvclRyYW5zaXRpb24iLCJkdXJhdGlvblBhZGRpbmciLCJlbXVsYXRlZER1cmF0aW9uIiwiY2FsbGVkIiwiaGFuZGxlciIsInRhcmdldCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwiZ2V0TmV4dEFjdGl2ZUVsZW1lbnQiLCJsaXN0IiwiYWN0aXZlRWxlbWVudCIsInNob3VsZEdldE5leHQiLCJpc0N5Y2xlQWxsb3dlZCIsImluZGV4IiwiaW5kZXhPZiIsImxpc3RMZW5ndGgiLCJtYXgiLCJtaW4iLCJuYW1lc3BhY2VSZWdleCIsInN0cmlwTmFtZVJlZ2V4Iiwic3RyaXBVaWRSZWdleCIsImV2ZW50UmVnaXN0cnkiLCJ1aWRFdmVudCIsImN1c3RvbUV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiY3VzdG9tRXZlbnRzUmVnZXgiLCJuYXRpdmVFdmVudHMiLCJTZXQiLCJnZXRVaWRFdmVudCIsInVpZCIsImdldEV2ZW50IiwiYm9vdHN0cmFwSGFuZGxlciIsImZuIiwiZXZlbnQiLCJkZWxlZ2F0ZVRhcmdldCIsIm9uZU9mZiIsIkV2ZW50SGFuZGxlciIsIm9mZiIsInR5cGUiLCJhcHBseSIsImJvb3RzdHJhcERlbGVnYXRpb25IYW5kbGVyIiwiZG9tRWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaSIsImZpbmRIYW5kbGVyIiwiZXZlbnRzIiwiZGVsZWdhdGlvblNlbGVjdG9yIiwidWlkRXZlbnRMaXN0IiwibGVuIiwib3JpZ2luYWxIYW5kbGVyIiwibm9ybWFsaXplUGFyYW1zIiwib3JpZ2luYWxUeXBlRXZlbnQiLCJkZWxlZ2F0aW9uRm4iLCJkZWxlZ2F0aW9uIiwidHlwZUV2ZW50IiwiZ2V0VHlwZUV2ZW50IiwiaGFzIiwiYWRkSGFuZGxlciIsIndyYXBGbiIsInJlbGF0ZWRUYXJnZXQiLCJoYW5kbGVycyIsInByZXZpb3VzRm4iLCJyZXBsYWNlIiwicmVtb3ZlSGFuZGxlciIsInJlbW92ZU5hbWVzcGFjZWRIYW5kbGVycyIsIm5hbWVzcGFjZSIsInN0b3JlRWxlbWVudEV2ZW50IiwiaGFuZGxlcktleSIsIm9uIiwib25lIiwiaW5OYW1lc3BhY2UiLCJpc05hbWVzcGFjZSIsImVsZW1lbnRFdmVudCIsInNsaWNlIiwia2V5SGFuZGxlcnMiLCJ0cmlnZ2VyIiwiYXJncyIsIiQiLCJpc05hdGl2ZSIsImpRdWVyeUV2ZW50IiwiYnViYmxlcyIsIm5hdGl2ZURpc3BhdGNoIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2dCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIkN1c3RvbUV2ZW50IiwiY2FuY2VsYWJsZSIsImRlZmluZVByb3BlcnR5IiwicHJldmVudERlZmF1bHQiLCJWRVJTSU9OIiwiQmFzZUNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwiX2VsZW1lbnQiLCJEQVRBX0tFWSIsImRpc3Bvc2UiLCJFVkVOVF9LRVkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicHJvcGVydHlOYW1lIiwiX3F1ZXVlQ2FsbGJhY2siLCJpc0FuaW1hdGVkIiwiZ2V0SW5zdGFuY2UiLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiTkFNRSIsIkNMQVNTX05BTUVfQUNUSVZFIiwiQnV0dG9uIiwidG9nZ2xlIiwic2V0QXR0cmlidXRlIiwialF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsInRvcCIsImJvdHRvbSIsInJpZ2h0IiwibGVmdCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsInN0YXJ0IiwiZW5kIiwiY2xpcHBpbmdQYXJlbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwicmVkdWNlIiwiYWNjIiwicGxhY2VtZW50IiwiY29uY2F0IiwicGxhY2VtZW50cyIsImJlZm9yZVJlYWQiLCJyZWFkIiwiYWZ0ZXJSZWFkIiwiYmVmb3JlTWFpbiIsIm1haW4iLCJhZnRlck1haW4iLCJiZWZvcmVXcml0ZSIsIndyaXRlIiwiYWZ0ZXJXcml0ZSIsIm1vZGlmaWVyUGhhc2VzIiwiZ2V0Tm9kZU5hbWUiLCJub2RlTmFtZSIsImdldFdpbmRvdyIsIm5vZGUiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJPd25FbGVtZW50IiwiRWxlbWVudCIsImlzSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzU2hhZG93Um9vdCIsImFwcGx5U3R5bGVzIiwiX3JlZiIsInN0YXRlIiwiZWxlbWVudHMiLCJuYW1lIiwic3R5bGVzIiwiYXR0cmlidXRlcyIsImFzc2lnbiIsInJlbW92ZUF0dHJpYnV0ZSIsImVmZmVjdCIsIl9yZWYyIiwiaW5pdGlhbFN0eWxlcyIsInBvc2l0aW9uIiwib3B0aW9ucyIsInN0cmF0ZWd5IiwibWFyZ2luIiwiYXJyb3ciLCJzdHlsZVByb3BlcnRpZXMiLCJoYXNPd25Qcm9wZXJ0eSIsImF0dHJpYnV0ZSIsImFwcGx5U3R5bGVzJDEiLCJlbmFibGVkIiwicGhhc2UiLCJyZXF1aXJlcyIsImdldEJhc2VQbGFjZW1lbnQiLCJyb3VuZCIsImdldFVBU3RyaW5nIiwidWFEYXRhIiwibmF2aWdhdG9yIiwidXNlckFnZW50RGF0YSIsImJyYW5kcyIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIml0ZW0iLCJicmFuZCIsInZlcnNpb24iLCJqb2luIiwidXNlckFnZW50IiwiaXNMYXlvdXRWaWV3cG9ydCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluY2x1ZGVTY2FsZSIsImlzRml4ZWRTdHJhdGVneSIsImNsaWVudFJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJvZmZzZXRXaWR0aCIsIndpZHRoIiwiaGVpZ2h0IiwidmlzdWFsVmlld3BvcnQiLCJhZGRWaXN1YWxPZmZzZXRzIiwieCIsIm9mZnNldExlZnQiLCJ5Iiwib2Zmc2V0VG9wIiwiZ2V0TGF5b3V0UmVjdCIsImFicyIsInBhcmVudCIsImNoaWxkIiwicm9vdE5vZGUiLCJuZXh0IiwiaXNTYW1lTm9kZSIsImhvc3QiLCJpc1RhYmxlRWxlbWVudCIsImdldERvY3VtZW50RWxlbWVudCIsImdldFBhcmVudE5vZGUiLCJhc3NpZ25lZFNsb3QiLCJnZXRUcnVlT2Zmc2V0UGFyZW50Iiwib2Zmc2V0UGFyZW50IiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiaXNGaXJlZm94IiwiaXNJRSIsImVsZW1lbnRDc3MiLCJjdXJyZW50Tm9kZSIsImNzcyIsInRyYW5zZm9ybSIsInBlcnNwZWN0aXZlIiwiY29udGFpbiIsIndpbGxDaGFuZ2UiLCJmaWx0ZXIiLCJnZXRPZmZzZXRQYXJlbnQiLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJ3aXRoaW4iLCJtYXRoTWF4IiwibWF0aE1pbiIsIndpdGhpbk1heENsYW1wIiwidiIsImdldEZyZXNoU2lkZU9iamVjdCIsIm1lcmdlUGFkZGluZ09iamVjdCIsInBhZGRpbmdPYmplY3QiLCJleHBhbmRUb0hhc2hNYXAiLCJoYXNoTWFwIiwidG9QYWRkaW5nT2JqZWN0IiwicGFkZGluZyIsInJlY3RzIiwiX3N0YXRlJG1vZGlmaWVyc0RhdGEkIiwiYXJyb3dFbGVtZW50IiwicG9wcGVyT2Zmc2V0cyIsIm1vZGlmaWVyc0RhdGEiLCJiYXNlUGxhY2VtZW50IiwiYXhpcyIsImlzVmVydGljYWwiLCJhcnJvd1JlY3QiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudFNpemUiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwib2Zmc2V0IiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwiYXJyb3ckMSIsInJlcXVpcmVzSWZFeGlzdHMiLCJnZXRWYXJpYXRpb24iLCJ1bnNldFNpZGVzIiwicm91bmRPZmZzZXRzQnlEUFIiLCJ3aW4iLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwibWFwVG9TdHlsZXMiLCJfT2JqZWN0JGFzc2lnbjIiLCJwb3BwZXJSZWN0IiwidmFyaWF0aW9uIiwib2Zmc2V0cyIsImdwdUFjY2VsZXJhdGlvbiIsImFkYXB0aXZlIiwicm91bmRPZmZzZXRzIiwiaXNGaXhlZCIsIl9vZmZzZXRzJHgiLCJfb2Zmc2V0cyR5IiwiX3JlZjMiLCJoYXNYIiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJoZWlnaHRQcm9wIiwid2lkdGhQcm9wIiwib2Zmc2V0WSIsIm9mZnNldFgiLCJjb21tb25TdHlsZXMiLCJfcmVmNCIsIl9PYmplY3QkYXNzaWduIiwiY29tcHV0ZVN0eWxlcyIsIl9yZWY1IiwiX29wdGlvbnMkZ3B1QWNjZWxlcmF0IiwiX29wdGlvbnMkYWRhcHRpdmUiLCJfb3B0aW9ucyRyb3VuZE9mZnNldHMiLCJjb21wdXRlU3R5bGVzJDEiLCJwYXNzaXZlIiwiX29wdGlvbnMkc2Nyb2xsIiwic2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwic2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudCIsInVwZGF0ZSIsImV2ZW50TGlzdGVuZXJzIiwiaGFzaCIsImdldE9wcG9zaXRlUGxhY2VtZW50IiwibWF0Y2hlZCIsImdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50IiwiZ2V0V2luZG93U2Nyb2xsIiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiZ2V0Vmlld3BvcnRSZWN0IiwiaHRtbCIsImxheW91dFZpZXdwb3J0IiwiZ2V0RG9jdW1lbnRSZWN0IiwiX2VsZW1lbnQkb3duZXJEb2N1bWVuIiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJkaXJlY3Rpb24iLCJpc1Njcm9sbFBhcmVudCIsIl9nZXRDb21wdXRlZFN0eWxlIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJnZXRTY3JvbGxQYXJlbnQiLCJsaXN0U2Nyb2xsUGFyZW50cyIsImlzQm9keSIsInVwZGF0ZWRMaXN0IiwicmVjdFRvQ2xpZW50UmVjdCIsInJlY3QiLCJnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiY2FuRXNjYXBlQ2xpcHBpbmciLCJjbGlwcGVyRWxlbWVudCIsImdldENsaXBwaW5nUmVjdCIsImJvdW5kYXJ5Iiwicm9vdEJvdW5kYXJ5IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImZpcnN0Q2xpcHBpbmdQYXJlbnQiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiY29tcHV0ZU9mZnNldHMiLCJjb21tb25YIiwiY29tbW9uWSIsIm1haW5BeGlzIiwiZGV0ZWN0T3ZlcmZsb3ciLCJfb3B0aW9ucyIsIl9vcHRpb25zJHBsYWNlbWVudCIsIl9vcHRpb25zJHN0cmF0ZWd5IiwiX29wdGlvbnMkYm91bmRhcnkiLCJfb3B0aW9ucyRyb290Qm91bmRhcnkiLCJfb3B0aW9ucyRlbGVtZW50Q29udGUiLCJlbGVtZW50Q29udGV4dCIsIl9vcHRpb25zJGFsdEJvdW5kYXJ5IiwiYWx0Qm91bmRhcnkiLCJfb3B0aW9ucyRwYWRkaW5nIiwiYWx0Q29udGV4dCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsImNvbnRleHRFbGVtZW50IiwicmVmZXJlbmNlQ2xpZW50UmVjdCIsInBvcHBlckNsaWVudFJlY3QiLCJlbGVtZW50Q2xpZW50UmVjdCIsIm92ZXJmbG93T2Zmc2V0cyIsIm9mZnNldERhdGEiLCJtdWx0aXBseSIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwiZmxpcFZhcmlhdGlvbnMiLCJfb3B0aW9ucyRhbGxvd2VkQXV0b1AiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJhbGxQbGFjZW1lbnRzIiwiYWxsb3dlZFBsYWNlbWVudHMiLCJvdmVyZmxvd3MiLCJzb3J0IiwiYSIsImIiLCJnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyIsIm9wcG9zaXRlUGxhY2VtZW50IiwiZmxpcCIsIl9za2lwIiwiX29wdGlvbnMkbWFpbkF4aXMiLCJjaGVja01haW5BeGlzIiwiX29wdGlvbnMkYWx0QXhpcyIsImFsdEF4aXMiLCJjaGVja0FsdEF4aXMiLCJzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJfb3B0aW9ucyRmbGlwVmFyaWF0aW8iLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJpc0Jhc2VQbGFjZW1lbnQiLCJyZWZlcmVuY2VSZWN0IiwiY2hlY2tzTWFwIiwiTWFwIiwibWFrZUZhbGxiYWNrQ2hlY2tzIiwiZmlyc3RGaXR0aW5nUGxhY2VtZW50IiwiX2Jhc2VQbGFjZW1lbnQiLCJpc1N0YXJ0VmFyaWF0aW9uIiwibWFpblZhcmlhdGlvblNpZGUiLCJhbHRWYXJpYXRpb25TaWRlIiwiY2hlY2tzIiwiZXZlcnkiLCJjaGVjayIsIm51bWJlck9mQ2hlY2tzIiwiX2xvb3AiLCJfaSIsImZpdHRpbmdQbGFjZW1lbnQiLCJmaW5kIiwiX3JldCIsInJlc2V0IiwiZmxpcCQxIiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJoaWRlIiwicHJldmVudE92ZXJmbG93IiwicmVmZXJlbmNlT3ZlcmZsb3ciLCJwb3BwZXJBbHRPdmVyZmxvdyIsInJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyIsInBvcHBlckVzY2FwZU9mZnNldHMiLCJpc1JlZmVyZW5jZUhpZGRlbiIsImhhc1BvcHBlckVzY2FwZWQiLCJoaWRlJDEiLCJkaXN0YW5jZUFuZFNraWRkaW5nVG9YWSIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsIl9vcHRpb25zJG9mZnNldCIsIl9kYXRhJHN0YXRlJHBsYWNlbWVudCIsIm9mZnNldCQxIiwicG9wcGVyT2Zmc2V0cyQxIiwiZ2V0QWx0QXhpcyIsIl9vcHRpb25zJHRldGhlciIsInRldGhlciIsIl9vcHRpb25zJHRldGhlck9mZnNldCIsInRldGhlck9mZnNldCIsInRldGhlck9mZnNldFZhbHVlIiwibm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlIiwib2Zmc2V0TW9kaWZpZXJTdGF0ZSIsIl9vZmZzZXRNb2RpZmllclN0YXRlJCIsIm1haW5TaWRlIiwiYWx0U2lkZSIsImFkZGl0aXZlIiwibWluTGVuIiwibWF4TGVuIiwiYXJyb3dQYWRkaW5nT2JqZWN0IiwiYXJyb3dQYWRkaW5nTWluIiwiYXJyb3dQYWRkaW5nTWF4IiwiYXJyb3dMZW4iLCJtaW5PZmZzZXQiLCJtYXhPZmZzZXQiLCJjbGllbnRPZmZzZXQiLCJvZmZzZXRNb2RpZmllclZhbHVlIiwidGV0aGVyTWluIiwidGV0aGVyTWF4IiwicHJldmVudGVkT2Zmc2V0IiwiX29mZnNldE1vZGlmaWVyU3RhdGUkMiIsIl9tYWluU2lkZSIsIl9hbHRTaWRlIiwiX29mZnNldCIsIl9sZW4iLCJfbWluIiwiX21heCIsImlzT3JpZ2luU2lkZSIsIl9vZmZzZXRNb2RpZmllclZhbHVlIiwiX3RldGhlck1pbiIsIl90ZXRoZXJNYXgiLCJfcHJldmVudGVkT2Zmc2V0IiwicHJldmVudE92ZXJmbG93JDEiLCJnZXRIVE1MRWxlbWVudFNjcm9sbCIsImdldE5vZGVTY3JvbGwiLCJpc0VsZW1lbnRTY2FsZWQiLCJnZXRDb21wb3NpdGVSZWN0IiwiZWxlbWVudE9yVmlydHVhbEVsZW1lbnQiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsIm9mZnNldFBhcmVudElzU2NhbGVkIiwib3JkZXIiLCJtb2RpZmllcnMiLCJ2aXNpdGVkIiwicmVzdWx0IiwibW9kaWZpZXIiLCJhZGQiLCJkZXAiLCJkZXBNb2RpZmllciIsIm9yZGVyTW9kaWZpZXJzIiwib3JkZXJlZE1vZGlmaWVycyIsImRlYm91bmNlIiwicGVuZGluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsIm1lcmdlQnlOYW1lIiwibWVyZ2VkIiwiY3VycmVudCIsImV4aXN0aW5nIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsImFyZ3VtZW50cyIsIl9rZXkiLCJwb3BwZXJHZW5lcmF0b3IiLCJnZW5lcmF0b3JPcHRpb25zIiwiX2dlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYiLCJkZWZhdWx0TW9kaWZpZXJzIiwiX2dlbmVyYXRvck9wdGlvbnMkZGVmMiIsImRlZmF1bHRPcHRpb25zIiwiZWZmZWN0Q2xlYW51cEZucyIsImlzRGVzdHJveWVkIiwic2V0T3B0aW9ucyIsInNldE9wdGlvbnNBY3Rpb24iLCJjbGVhbnVwTW9kaWZpZXJFZmZlY3RzIiwibSIsInJ1bk1vZGlmaWVyRWZmZWN0cyIsImZvcmNlVXBkYXRlIiwiX3N0YXRlJGVsZW1lbnRzIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllIiwiX3N0YXRlJG9yZGVyZWRNb2RpZmllMiIsImRlc3Ryb3kiLCJvbkZpcnN0VXBkYXRlIiwiX3JlZiRvcHRpb25zIiwiY2xlYW51cEZuIiwibm9vcEZuIiwiY3JlYXRlUG9wcGVyIiwibm9ybWFsaXplRGF0YSIsInZhbCIsIm5vcm1hbGl6ZURhdGFLZXkiLCJjaHIiLCJNYW5pcHVsYXRvciIsInNldERhdGFBdHRyaWJ1dGUiLCJyZW1vdmVEYXRhQXR0cmlidXRlIiwiZ2V0RGF0YUF0dHJpYnV0ZXMiLCJkYXRhc2V0IiwicHVyZUtleSIsImNoYXJBdCIsImdldERhdGFDbGFzc0F0dHJpYnV0ZXMiLCJnZXREYXRhQXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJjbGFzc05hbWVPckxpc3QiLCJfY2xhc3NOYW1lT3JMaXN0VG9BcnJheSIsImNsYXNzTmFtZSIsInJlbW92ZSIsImFkZENsYXNzIiwiYWRkU3R5bGUiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwic2Nyb2xsWSIsInNjcm9sbFgiLCJOT0RFX1RFWFQiLCJTZWxlY3RvckVuZ2luZSIsImNsb3Nlc3QiLCJtYXRjaGVzIiwicHJvdG90eXBlIiwiZmluZE9uZSIsImNoaWxkcmVuIiwicGFyZW50cyIsImFuY2VzdG9yIiwicHJldiIsInByZXZpb3VzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsImZvY3VzYWJsZUNoaWxkcmVuIiwiZm9jdXNhYmxlcyIsImVsIiwiREFUQV9BUElfS0VZIiwiRVNDQVBFX0tFWSIsIlNQQUNFX0tFWSIsIlRBQl9LRVkiLCJBUlJPV19VUF9LRVkiLCJBUlJPV19ET1dOX0tFWSIsIlJJR0hUX01PVVNFX0JVVFRPTiIsIlJFR0VYUF9LRVlET1dOIiwiRVZFTlRfSElERSIsIkVWRU5UX0hJRERFTiIsIkVWRU5UX1NIT1ciLCJFVkVOVF9TSE9XTiIsIkVWRU5UX0NMSUNLX0RBVEFfQVBJIiwiRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSIsIkVWRU5UX0tFWVVQX0RBVEFfQVBJIiwiQ0xBU1NfTkFNRV9TSE9XIiwiQ0xBU1NfTkFNRV9EUk9QVVAiLCJDTEFTU19OQU1FX0RST1BFTkQiLCJDTEFTU19OQU1FX0RST1BTVEFSVCIsIlNFTEVDVE9SX05BVkJBUiIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFIiwiU0VMRUNUT1JfTUVOVSIsIlNFTEVDVE9SX05BVkJBUl9OQVYiLCJTRUxFQ1RPUl9WSVNJQkxFX0lURU1TIiwiUExBQ0VNRU5UX1RPUCIsIlBMQUNFTUVOVF9UT1BFTkQiLCJQTEFDRU1FTlRfQk9UVE9NIiwiUExBQ0VNRU5UX0JPVFRPTUVORCIsIlBMQUNFTUVOVF9SSUdIVCIsIlBMQUNFTUVOVF9MRUZUIiwiQU5JTUFUSU9OX0ZBREVfSU4iLCJvcGFjaXR5IiwiQU5JTUFUSU9OX0ZBREVfT1VUIiwiQU5JTUFUSU9OX1RJTUlORyIsIml0ZXJhdGlvbnMiLCJlYXNpbmciLCJmaWxsIiwiRGVmYXVsdCIsInBvcHBlckNvbmZpZyIsImF1dG9DbG9zZSIsImRyb3Bkb3duQW5pbWF0aW9uIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJEZWZhdWx0VHlwZSIsIkRyb3Bkb3duIiwiX3BvcHBlciIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiX2ZhZGVPdXRBbmltYXRlIiwiaXNQcmVmZXJzUmVkdWNlZE1vdGlvblNldCIsIm1hdGNoTWVkaWEiLCJfYW5pbWF0aW9uQ2FuUGxheSIsIl9kaWRJbml0IiwiX2luaXQiLCJfaXNTaG93biIsInNob3ciLCJnZXRQYXJlbnRGcm9tRWxlbWVudCIsIl9jcmVhdGVQb3BwZXIiLCJlbGVtIiwiZm9jdXMiLCJhbmltYXRlIiwiZHVyYXRpb24iLCJfY29tcGxldGVIaWRlIiwiZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiY2xlYXJNZW51cyIsInBsYXlTdGF0ZSIsIlR5cGVFcnJvciIsIlBvcHBlciIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiaXNEaXNwbGF5U3RhdGljIiwiUG9wcGVyLmNyZWF0ZVBvcHBlciIsIl9nZXRQbGFjZW1lbnQiLCJwYXJlbnREcm9wZG93biIsInR3ZURyb3Bkb3duUG9zaXRpb24iLCJpc0VuZCIsInR3ZURyb3Bkb3duQWxpZ25tZW50IiwiX2dldE9mZnNldCIsInBhcnNlSW50IiwicG9wcGVyRGF0YSIsImRlZmF1bHRCc1BvcHBlckNvbmZpZyIsIl9zZWxlY3RNZW51SXRlbSIsIml0ZW1zIiwiYnV0dG9uIiwidG9nZ2xlcyIsImNvbnRleHQiLCJjb21wb3NlZFBhdGgiLCJpc01lbnVUYXJnZXQiLCJ0YWdOYW1lIiwiY2xpY2tFdmVudCIsImlzQWN0aXZlIiwic3RvcFByb3BhZ2F0aW9uIiwiZ2V0VG9nZ2xlQnV0dG9uIiwiQVRUUl9TSE9XIiwiQVRUUl9DT0xMQVBTRUQiLCJBVFRSX0NPTExBUFNJTkciLCJBVFRSX0hPUklaT05UQUwiLCJBVFRSX0NPTExBUFNFX0lURU0iLCJBVFRSX0NPTExBUFNFX0RFRVBFUl9DSElMRFJFTiIsIldJRFRIIiwiSEVJR0hUIiwiU0VMRUNUT1JfREFUQV9BQ1RJVkVTIiwiU0VMRUNUT1JfREFUQV9DT0xMQVBTRV9JTklUIiwiRGVmYXVsdENsYXNzZXMiLCJ2aXNpYmxlIiwiaGlkZGVuIiwiYmFzZVRyYW5zaXRpb24iLCJjb2xsYXBzaW5nIiwiY29sbGFwc2luZ0hvcml6b250YWwiLCJEZWZhdWx0Q2xhc3Nlc1R5cGUiLCJDb2xsYXBzZSIsImNsYXNzZXMiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX2NsYXNzZXMiLCJfZ2V0Q2xhc3NlcyIsIl90cmlnZ2VyQXJyYXkiLCJ0b2dnbGVMaXN0IiwiZmlsdGVyRWxlbWVudCIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsIl9pbml0aWFsaXplQ2hpbGRyZW4iLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwiY29udGFpbmVyIiwidGVtcEFjdGl2ZURhdGEiLCJlbGVtQWN0aXZlIiwiZGltZW5zaW9uIiwiX2dldERpbWVuc2lvbiIsIkNMQVNTX05BTUVfVFJBTlNJVElPTiIsImNvbXBsZXRlIiwic2Nyb2xsU2l6ZSIsInRyaWdnZXJBcnJheUxlbmd0aCIsImRhdGFBdHRyaWJ1dGVzIiwic2VsZWN0ZWQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJTRUxFQ1RPUl9GSVhFRF9DT05URU5UIiwiU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQiLCJTY3JvbGxCYXJIZWxwZXIiLCJnZXRXaWR0aCIsImRvY3VtZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiX2Rpc2FibGVPdmVyRmxvdyIsIl9zZXRFbGVtZW50QXR0cmlidXRlcyIsImNhbGN1bGF0ZWRWYWx1ZSIsIl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSIsInN0eWxlUHJvcCIsInNjcm9sbGJhcldpZHRoIiwibWFuaXB1bGF0aW9uQ2FsbEJhY2siLCJfYXBwbHlNYW5pcHVsYXRpb25DYWxsYmFjayIsIl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzIiwiYWN0dWFsVmFsdWUiLCJyZW1vdmVQcm9wZXJ0eSIsImNhbGxCYWNrIiwiaXNPdmVyZmxvd2luZyIsInJvb3RFbGVtZW50IiwiY2xpY2tDYWxsYmFjayIsImJhY2tkcm9wQ2xhc3NlcyIsIkVWRU5UX01PVVNFRE9XTiIsIkJhY2tkcm9wIiwiX2lzQXBwZW5kZWQiLCJfYXBwZW5kIiwiX2dldEVsZW1lbnQiLCJfZW11bGF0ZUFuaW1hdGlvbiIsImJhY2tkcm9wIiwiYXBwZW5kIiwiRm9jdXNUcmFwIiwidG9nZ2xlciIsIl90b2dnbGVyIiwiX2V2ZW50IiwiX2NvbmRpdGlvbiIsImNvbmRpdGlvbiIsIl9vbmx5VmlzaWJsZSIsIm9ubHlWaXNpYmxlIiwiX2ZvY3VzYWJsZUVsZW1lbnRzIiwiX2ZpcnN0RWxlbWVudCIsIl9sYXN0RWxlbWVudCIsImUiLCJzaGlmdEtleSIsInRyYXAiLCJfc2V0RWxlbWVudHMiLCJfc2V0Rm9jdXNUcmFwIiwiZGlzYWJsZSIsIl9maWx0ZXJWaXNpYmxlIiwiYW5jZXN0b3JzIiwiYWxsRWxlbWVudHMiLCJoYXNEaXNhYmxlZEF0dHJpYnV0ZSIsImFkZGVkRXZlbnRzTGlzdCIsImVuYWJsZURpc21pc3NUcmlnZ2VyIiwiY29tcG9uZW50IiwibWV0aG9kIiwiVEFCIiwiRVZFTlRfTE9BRF9EQVRBX0FQSSIsImtleWJvYXJkIiwiT1BFTl9TRUxFQ1RPUiIsIkVWRU5UX0tFWURPV05fRElTTUlTUyIsIk9mZmNhbnZhcyIsIl9iYWNrZHJvcCIsIl9pbml0aWFsaXplQmFja0Ryb3AiLCJfZm9jdXN0cmFwIiwiX2luaXRpYWxpemVGb2N1c1RyYXAiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJjb21wbGV0ZUNhbGxCYWNrIiwiYmx1ciIsImNvbXBsZXRlQ2FsbGJhY2siLCJrZXlDb2RlIiwiQVJST1dfTEVGVF9LRVkiLCJBUlJPV19SSUdIVF9LRVkiLCJUT1VDSEVWRU5UX0NPTVBBVF9XQUlUIiwiU1dJUEVfVEhSRVNIT0xEIiwiaW50ZXJ2YWwiLCJyaWRlIiwicGF1c2UiLCJ3cmFwIiwidG91Y2giLCJwb2ludGVyIiwiYmxvY2siLCJpbnZpc2libGUiLCJzbGlkZVJpZ2h0Iiwic2xpZGVMZWZ0IiwiT1JERVJfTkVYVCIsIk9SREVSX1BSRVYiLCJESVJFQ1RJT05fTEVGVCIsIkRJUkVDVElPTl9SSUdIVCIsIktFWV9UT19ESVJFQ1RJT04iLCJFVkVOVF9TTElERSIsIkVWRU5UX1NMSUQiLCJFVkVOVF9LRVlET1dOIiwiRVZFTlRfTU9VU0VFTlRFUiIsIkVWRU5UX01PVVNFTEVBVkUiLCJFVkVOVF9UT1VDSFNUQVJUIiwiRVZFTlRfVE9VQ0hNT1ZFIiwiRVZFTlRfVE9VQ0hFTkQiLCJFVkVOVF9QT0lOVEVSRE9XTiIsIkVWRU5UX1BPSU5URVJVUCIsIkVWRU5UX0RSQUdfU1RBUlQiLCJBVFRSX0FDVElWRSIsIkFUVFJfRU5EIiwiQVRUUl9TVEFSVCIsIkFUVFJfTkVYVCIsIkFUVFJfUFJFViIsIkFUVFJfUE9JTlRFUl9FVkVOVCIsIlNFTEVDVE9SX0RBVEFfQ0FST1VTRUxfSU5JVCIsIlNFTEVDVE9SX0RBVEFfQUNUSVZFIiwiU0VMRUNUT1JfREFUQV9JVEVNIiwiU0VMRUNUT1JfREFUQV9BQ1RJVkVfSVRFTSIsIlNFTEVDVE9SX0RBVEFfSVRFTV9JTUciLCJTRUxFQ1RPUl9EQVRBX05FWFRfUFJFViIsIlNFTEVDVE9SX0RBVEFfSU5ESUNBVE9SUyIsIlNFTEVDVE9SX0lORElDQVRPUiIsIlNFTEVDVE9SX0RBVEFfU0xJREUiLCJQT0lOVEVSX1RZUEVfVE9VQ0giLCJQT0lOVEVSX1RZUEVfUEVOIiwiQ2Fyb3VzZWwiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJ0b3VjaFN0YXJ0WCIsInRvdWNoRGVsdGFYIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX3RvdWNoU3VwcG9ydGVkIiwibWF4VG91Y2hQb2ludHMiLCJfcG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwiX3NldEFjdGl2ZUVsZW1lbnRDbGFzcyIsImN5Y2xlIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiY2xlYXJJbnRlcnZhbCIsIl91cGRhdGVJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYmluZCIsInRvIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGF0YUFwaUNsaWNrSGFuZGxlciIsImNhcm91c2VscyIsImNhcm91c2VsSW50ZXJmYWNlIiwiX2VuYWJsZUN5Y2xlIiwiX2FwcGx5SW5pdGlhbENsYXNzZXMiLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsIl9oYW5kbGVTd2lwZSIsImFic0RlbHRheCIsIl9rZXlkb3duIiwiX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMiLCJoYXNQb2ludGVyUGVuVG91Y2giLCJwb2ludGVyVHlwZSIsImNsaWVudFgiLCJ0b3VjaGVzIiwibW92ZSIsImNsZWFyVGltZW91dCIsIml0ZW1JbWciLCJfZ2V0SXRlbUJ5T3JkZXIiLCJpc05leHQiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsImZyb20iLCJhY3RpdmVJbmRpY2F0b3IiLCJpbmRpY2F0b3JzIiwiZWxlbWVudEludGVydmFsIiwiZGVmYXVsdEludGVydmFsIiwiZGlyZWN0aW9uT3JPcmRlciIsIl9kaXJlY3Rpb25Ub09yZGVyIiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwiZGlyZWN0aW9uYWxBdHRyIiwib3JkZXJBdHRyIiwiX29yZGVyVG9EaXJlY3Rpb24iLCJhY3RpdmVDbGFzcyIsIm5leHRDbGFzcyIsInRyaWdnZXJTbGlkRXZlbnQiLCJhY3Rpb24iLCJzbGlkZSIsInNsaWRlSW5kZXgiLCJ1cmlBdHRyaWJ1dGVzIiwiQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiIsIkRBVEFfVEVfQVRUUklCVVRFX1BBVFRFUk4iLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsImFsbG93ZWRBdHRyaWJ1dGUiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsImF0dHJpYnV0ZU5hbWUiLCJub2RlVmFsdWUiLCJyZWdFeHAiLCJhdHRyaWJ1dGVSZWdleCIsIkRlZmF1bHRBbGxvd2xpc3QiLCJhcmVhIiwiYnIiLCJjb2wiLCJjb2RlIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwIiwicHJlIiwicyIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsInNhbml0aXplSHRtbCIsInVuc2FmZUh0bWwiLCJhbGxvd0xpc3QiLCJzYW5pdGl6ZUZuIiwiY3JlYXRlZERvY3VtZW50IiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZWxlbWVudE5hbWUiLCJhdHRyaWJ1dGVMaXN0IiwiYWxsb3dlZEF0dHJpYnV0ZXMiLCJpbm5lckhUTUwiLCJDTEFTU19QUkVGSVgiLCJESVNBTExPV0VEX0FUVFJJQlVURVMiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJjdXN0b21DbGFzcyIsInNhbml0aXplIiwiQXR0YWNobWVudE1hcCIsIkFVVE8iLCJUT1AiLCJSSUdIVCIsIkJPVFRPTSIsIkxFRlQiLCJISURFIiwiSElEREVOIiwiU0hPVyIsIlNIT1dOIiwiSU5TRVJURUQiLCJDTElDSyIsIkZPQ1VTSU4iLCJGT0NVU09VVCIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiQ0xBU1NfTkFNRV9GQURFIiwiQ0xBU1NfTkFNRV9NT0RBTCIsIkhPVkVSX1NUQVRFX1NIT1ciLCJIT1ZFUl9TVEFURV9PVVQiLCJTRUxFQ1RPUl9UT09MVElQX0lOTkVSIiwiU0VMRUNUT1JfTU9EQUwiLCJFVkVOVF9NT0RBTF9ISURFIiwiVFJJR0dFUl9IT1ZFUiIsIlRSSUdHRVJfRk9DVVMiLCJUUklHR0VSX0NMSUNLIiwiVFJJR0dFUl9NQU5VQUwiLCJUb29sdGlwIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJfZGlzcG9zZVBvcHBlciIsImlzV2l0aENvbnRlbnQiLCJzaG93RXZlbnQiLCJzaGFkb3dSb290IiwiaXNJblRoZURvbSIsImdldFRpdGxlIiwidGlwSWQiLCJhdHRhY2htZW50IiwiX2dldEF0dGFjaG1lbnQiLCJfYWRkQXR0YWNobWVudENsYXNzIiwiX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uIiwicHJldkhvdmVyU3RhdGUiLCJfY2xlYW5UaXBDbGFzcyIsInNldENvbnRlbnQiLCJfc2FuaXRpemVBbmRTZXRDb250ZW50IiwiY29udGVudCIsInRlbXBsYXRlRWxlbWVudCIsInNldEVsZW1lbnRDb250ZW50IiwidGV4dENvbnRlbnQiLCJ1cGRhdGVBdHRhY2htZW50IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIl9nZXRCYXNpY0NsYXNzUHJlZml4IiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwib3JpZ2luYWxUaXRsZVR5cGUiLCJkYXRhQXR0ciIsImJhc2ljQ2xhc3NQcmVmaXhSZWdleCIsInRhYkNsYXNzIiwidG9rZW4iLCJ0Q2xhc3MiLCJTRUxFQ1RPUl9USVRMRSIsIlNFTEVDVE9SX0NPTlRFTlQiLCJQb3BvdmVyIiwiX2dldENvbnRlbnQiLCJhY3RpdmUiLCJFVkVOVF9BQ1RJVkFURSIsIkVWRU5UX1NDUk9MTCIsIkxJTktfQUNUSVZFIiwiTElOS19DT0xMQVBTSUJMRSIsIlNFTEVDVE9SX0RST1BET1dOX0lURU0iLCJTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCIsIlNFTEVDVE9SX05BVl9MSU5LUyIsIlNFTEVDVE9SX05BVl9JVEVNUyIsIlNFTEVDVE9SX0xJU1RfSVRFTVMiLCJTRUxFQ1RPUl9MSU5LX0lURU1TIiwiU0VMRUNUT1JfRFJPUERPV04iLCJTRUxFQ1RPUl9EUk9QRE9XTl9UT0dHTEUiLCJTRUxFQ1RPUl9DT0xMQVBTSUJMRV9TQ1JPTExTUFkiLCJTRUxFQ1RPUl9BQ1RJVkUiLCJTRUxFQ1RPUl9MSVNUIiwiTUVUSE9EX09GRlNFVCIsIk1FVEhPRF9QT1NJVElPTiIsIlNjcm9sbFNweSIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9jb2xsYXBzaWJsZXMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsIl9iaW5kQWN0aXZhdGVFdmVudCIsIl9nZXRDb2xsYXBzaWJsZXMiLCJfc2hvd1N1YnNlY3Rpb24iLCJfaGlkZVN1YnNlY3Rpb24iLCJhdXRvTWV0aG9kIiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJNREJNYW5pcHVsYXRvciIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCJsaW5rIiwibGlzdEdyb3VwIiwibmF2SXRlbSIsIl9oaWRlIiwiaXRlbXNUb0hpZGUiLCJfc2hvdyIsImRlc3RpbmVkSGVpZ2h0IiwiY29sbGFwc2libGVFbGVtZW50cyIsImNvbGxhcHNpYmxlRWxlbWVudCIsImxpc3RQYXJlbnQiLCJsaXN0SGVpZ2h0IiwiY29sbGFwc2libGUiLCJ1bmFjdGl2ZSIsIkRBVEFfTkFNRV9EUk9QRE9XTl9NRU5VIiwiVEFCX0FDVElWRSIsIk5BVl9BQ1RJVkUiLCJTRUxFQ1RPUl9OQVYiLCJTRUxFQ1RPUl9UQUJfQUNUSVZFIiwiU0VMRUNUT1JfTkFWX0FDVElWRSIsIlNFTEVDVE9SX0FDVElWRV9VTCIsIlNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCIsIlRhYiIsImxpc3RFbGVtZW50IiwiYWN0aXZlTmF2RWxlbWVudCIsIml0ZW1TZWxlY3RvciIsImhpZGVFdmVudCIsIm5hdkVsZW1lbnQiLCJpc1RyYW5zaXRpb25pbmciLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiZHJvcGRvd25DaGlsZCIsImRyb3Bkb3duRWxlbWVudCIsImRyb3Bkb3duIiwidCIsIm4iLCJkIiwiWiIsInIiLCJvIiwiZXhwb3J0cyIsImMiLCJpbml0Q3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJpZGVudGlmaWVyIiwiYmFzZSIsImwiLCJmIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsIm5vbmNlIiwibmMiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJhbGwiLCJhdG9iIiwic3BsaWNlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJlbnVtZXJhYmxlIiwibG9jYWxzIiwiYW5pbWF0aW9uTmFtZSIsImlucHV0VHlwZSIsIkRBVEFfV1JBUFBFUiIsIkRBVEFfTk9UQ0giLCJEQVRBX05PVENIX0xFQURJTkciLCJEQVRBX05PVENIX01JRERMRSIsIkRBVEFfTk9UQ0hfVFJBSUxJTkciLCJEQVRBX0hFTFBFUiIsIkRBVEFfUExBQ0VIT0xERVJfQUNUSVZFIiwiREFUQV9BQ1RJVkUiLCJEQVRBX0ZPQ1VTRUQiLCJEQVRBX0ZPUk1fQ09VTlRFUiIsIlNFTEVDVE9SX09VVExJTkVfSU5QVVQiLCJTRUxFQ1RPUl9PVVRMSU5FX1RFWFRBUkVBIiwiU0VMRUNUT1JfTk9UQ0giLCJTRUxFQ1RPUl9OT1RDSF9MRUFESU5HIiwiU0VMRUNUT1JfTk9UQ0hfTUlERExFIiwiU0VMRUNUT1JfSEVMUEVSIiwiaW5wdXRGb3JtV2hpdGUiLCJub3RjaCIsIm5vdGNoTGVhZGluZyIsIm5vdGNoTGVhZGluZ05vcm1hbCIsIm5vdGNoTGVhZGluZ1doaXRlIiwibm90Y2hNaWRkbGUiLCJub3RjaE1pZGRsZU5vcm1hbCIsIm5vdGNoTWlkZGxlV2hpdGUiLCJub3RjaFRyYWlsaW5nIiwibm90Y2hUcmFpbGluZ05vcm1hbCIsIm5vdGNoVHJhaWxpbmdXaGl0ZSIsImNvdW50ZXIiLCJJbnB1dCIsIl9sYWJlbCIsIl9sYWJlbFdpZHRoIiwiX2xhYmVsTWFyZ2luTGVmdCIsIl9ub3RjaExlYWRpbmciLCJfbm90Y2hNaWRkbGUiLCJfbm90Y2hUcmFpbGluZyIsIl9pbml0aWF0ZWQiLCJfaGVscGVyIiwiX2NvdW50ZXIiLCJfY291bnRlckVsZW1lbnQiLCJfbWF4TGVuZ3RoIiwiX2xlYWRpbmdJY29uIiwiaW5pdCIsImlucHV0IiwiX2dldExhYmVsRGF0YSIsIl9hcHBseURpdnMiLCJfYXBwbHlOb3RjaCIsIl9nZXRIZWxwZXIiLCJfZ2V0Q291bnRlciIsIl9nZXRFdmVudHMiLCJfZ2V0Tm90Y2hEYXRhIiwiZm9yY2VBY3RpdmUiLCJmb3JjZUluYWN0aXZlIiwiX3JlbW92ZUJvcmRlciIsIl9zaG93UGxhY2Vob2xkZXIiLCJfZ2V0TGFiZWxXaWR0aCIsIl9nZXRMYWJlbFBvc2l0aW9uSW5JbnB1dEdyb3VwIiwiX3RvZ2dsZURlZmF1bHREYXRlUGxhY2Vob2xkZXIiLCJtYXhMZW5ndGgiLCJfc2hvd0NvdW50ZXIiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJ0YXJnZXRJZCIsImhyZWYiLCJhY3R1YWxMZW5ndGgiLCJfYmluZENvdW50ZXIiLCJzaGFkb3dMZWFkaW5nIiwic2hhZG93TWlkZGxlIiwic2hhZG93VHJhaWxpbmciLCJhbGxOb3RjaFdyYXBwZXJzIiwibm90Y2hXcmFwcGVyIiwibWFyZ2luTGVmdCIsImJvcmRlciIsIl9nZXRFbGVtZW50cyIsInByZXZMYWJlbFdpZHRoIiwiX2RlYWN0aXZhdGUiLCJkZWZhdWx0VmFsdWUiLCJpbmhlcml0IiwiZ2V0U3R5bGUiLCJjdXN0b21PcHRpb25zIiwicGFyZW50VmFsdWUiLCJwYXJlbnRFbGVtZW50IiwiR1JBRElFTlQiLCJTRUxFQ1RPUl9DT01QT05FTlQiLCJERUZBVUxUX1JJUFBMRV9DT0xPUiIsIkJPT1RTVFJBUF9DT0xPUlMiLCJncmFkaWVudENvbG9yIiwiVFJBTlNJVElPTl9CUkVBS19PUEFDSVRZIiwicmlwcGxlQ2VudGVyZWQiLCJyaXBwbGVDb2xvciIsInJpcHBsZUNvbG9yRGFyayIsInJpcHBsZUR1cmF0aW9uIiwicmlwcGxlUmFkaXVzIiwicmlwcGxlVW5ib3VuZCIsInJpcHBsZSIsInJpcHBsZVdhdmUiLCJ1bmJvdW5kIiwiUmlwcGxlIiwiX2N1cnJlbnRDb2xvciIsIl9jbGlja0hhbmRsZXIiLCJfY3JlYXRlUmlwcGxlIiwiX3JpcHBsZVRpbWVyIiwiX2lzTWluV2lkdGhTZXQiLCJfaW5pdGlhbENsYXNzZXMiLCJfYWRkQ2xpY2tFdmVudCIsIl9hdXRvSW5pdCIsIm1pbldpZHRoIiwibGF5ZXJYIiwibGF5ZXJZIiwiX2R1cmF0aW9uVG9Nc051bWJlciIsImRpYW1ldGVyT3B0aW9ucyIsImRpYW1ldGVyIiwiX2dldERpYW1ldGVyIiwicmFkaXVzVmFsdWUiLCJyaXBwbGVIVE1MIiwiX2NyZWF0ZUhUTUxSaXBwbGUiLCJ3cmFwcGVyIiwiX3JlbW92ZUhUTUxSaXBwbGUiLCJfYWRkQ29sb3IiLCJfdG9nZ2xlVW5ib3VuZCIsIl9hcHBlbmRSaXBwbGUiLCJyaXBwbGVFbCIsImNsYXNzZXNUb1JlbW92ZSIsIl9hZGRlZE5ld1JpcHBsZUNsYXNzZXMiLCJkZWZhdWx0UmlwcGxlIiwiaW5pdGlhbENsYXNzZXMiLCJmaW5kSW5kZXgiLCJ0aW1lIiwicHl0aGFnb3JlYW4iLCJzaWRlQSIsInNpZGVCIiwic3FydCIsInBvc2l0aW9uQ2VudGVyIiwicXVhZHJhbnQiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwiZm91cnRoIiwiZ2V0Q29ybmVyIiwidG9wTGVmdCIsInRvcFJpZ2h0IiwiYm90dG9tTGVmdCIsImJvdHRvbVJpZ2h0IiwibG9jYWxTdG9yYWdlIiwidGhlbWUiLCJJU19CT09UU1RSQVBfQ09MT1IiLCJjb2xvciIsInJnYlZhbHVlIiwiX2NvbG9yVG9SR0IiLCJncmFkaWVudEltYWdlIiwiYmFja2dyb3VuZEltYWdlIiwiaGV4VG9SZ2IiLCJzdWJzdHIiLCJuYW1lZENvbG9yc1RvUmdiYSIsInRlbXBFbGVtIiwiZmxhZyIsInJnYmFUb1JnYiIsImF1dG9Jbml0aWFsIiwic3RhdGljIiwic3RhdGljUHJvcGVydGllcyIsIkVWRU5UX0hJREVfUFJFVkVOVEVEIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfQ0xJQ0tfRElTTUlTUyIsIkVWRU5UX01PVVNFVVBfRElTTUlTUyIsIkVWRU5UX01PVVNFRE9XTl9ESVNNSVNTIiwiT1BFTl9TRUxFQ1RPUl9CT0RZIiwiU0VMRUNUT1JfRElBTE9HIiwiU0VMRUNUT1JfTU9EQUxfQk9EWSIsIk1vZGFsIiwiX3Njcm9sbEJhciIsIl9kaWFsb2ciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsImdldERlZmF1bHRUeXBlIiwiX2lzQW5pbWF0ZWQiLCJfYWRqdXN0RGlhbG9nIiwiX3NldEVzY2FwZUV2ZW50IiwiX3NldFJlc2l6ZUV2ZW50IiwiX3Nob3dFbGVtZW50IiwiX3Nob3dCYWNrZHJvcCIsIl9oaWRlTW9kYWwiLCJodG1sRWxlbWVudCIsImhhbmRsZVVwZGF0ZSIsIm1vZGFsQm9keSIsIm1vZGFsRGlhbG9nIiwidHJhbnNpdGlvbkNvbXBsZXRlIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uVGltZSIsIl9yZXNldEFkanVzdG1lbnRzIiwiY3VycmVudFRhcmdldCIsImlzTW9kYWxPdmVyZmxvd2luZyIsInRyYW5zaXNpdGlvblRpbWUiLCJpc0JvZHlPdmVyZmxvd2luZyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiZHJvcGRvd25DYWxsYmFjayIsImluaXRTZWxlY3RvciIsInRhYkNhbGxiYWNrIiwib2ZmY2FudmFzQ2FsbGJhY2siLCJhbGxSZWFkeU9wZW4iLCJidXR0b25DYWxsYmFjayIsInJpcHBsZUNhbGxiYWNrIiwiY29sbGFwc2VDYWxsYmFjayIsInRvb2x0aXBzQ2FsbGJhY2siLCJ0b29sdGlwVHJpZ2dlckVsIiwicG9wb3ZlckNhbGxiYWNrIiwicG9wb3ZlclRyaWdnZXJFbCIsIm1vZGFsQ2FsbGJhY2siLCJkZWZhdWx0SW5pdFNlbGVjdG9ycyIsImNhcm91c2VsIiwiaXNUb2dnbGVyIiwic2Nyb2xsc3B5IiwiY29sbGFwc2UiLCJvZmZjYW52YXMiLCJ0YWIiLCJ0b29sdGlwIiwicG9wb3ZlciIsIm1vZGFsIiwianF1ZXJ5SW5pdCIsInBsdWdpbiIsIkpRVUVSWV9OT19DT05GTElDVCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIkluaXRSZWdpc3RlciIsImluaXRzIiwiaW5pdGlhbGl6ZWQiLCJpc0luaXRlZCIsInJlZ2lzdGVyIiwiX2RlZmF1bHRJbml0U2VsZWN0b3JzIiwiZ2V0Q29tcG9uZW50RGF0YSIsImluaXRDb21wb25lbnQiLCJhbGxvd1JlaW5pdHMiLCJ0aGlzQ29tcG9uZW50IiwiYWR2YW5jZWQiLCJvbkluaXQiLCJjaGVja090aGVySW1wb3J0cyIsIkluaXRUV0UiLCJfX3B1YmxpY0ZpZWxkIiwiY29tcG9uZW50cyIsImluaXRPcHRpb25zIiwiY29tcG9uZW50TGlzdCIsImNvbnNvbGUiLCJ3YXJuIiwiaW5pdFRXRUluc3RhbmNlIiwiaW5pdFRXRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tw-elements/js/tw-elements.es.min.js\n");

/***/ })

};
;